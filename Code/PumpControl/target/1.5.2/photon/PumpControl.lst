
c:/Users/andre/OneDrive/Documents/Github/GEEN2400/Code/PumpControl/target/1.5.2/photon/PumpControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00001594  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  40024000  080a15b0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  20000000  080a15b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000594  20000068  20000068  00030068  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a161c  080a161c  0002161c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a1644  080a1644  00021644  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0009a95a  00000000  00000000  00021648  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000dc0b  00000000  00000000  000bbfa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000114ad  00000000  00000000  000c9bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001d80  00000000  00000000  000db05a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002f48  00000000  00000000  000dcdda  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002299c  00000000  00000000  000dfd22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0001eec2  00000000  00000000  001026be  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000a39eb  00000000  00000000  00121580  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000b358  00000000  00000000  001c4f6c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f001 f905 	bl	80a123c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f001 f90a 	bl	80a1252 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a15b4 	.word	0x080a15b4
 80a004c:	20000068 	.word	0x20000068
 80a0050:	20000068 	.word	0x20000068
 80a0054:	200005fc 	.word	0x200005fc
 80a0058:	200005fc 	.word	0x200005fc

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f000 fbcb 	bl	80a07f8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a1578 	.word	0x080a1578
 80a0084:	080a15a8 	.word	0x080a15a8

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b834 	b.w	80a00f4 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f865 	bl	80a015c <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f000 bb71 	b.w	80a077c <_post_loop>

080a009a <_ZdlPv>:
 80a009a:	f000 ba07 	b.w	80a04ac <free>

080a009e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a009e:	7800      	ldrb	r0, [r0, #0]
 80a00a0:	fab0 f080 	clz	r0, r0
 80a00a4:	0940      	lsrs	r0, r0, #5
 80a00a6:	4770      	bx	lr

080a00a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00a8:	2301      	movs	r3, #1
 80a00aa:	7003      	strb	r3, [r0, #0]
 80a00ac:	4770      	bx	lr

080a00ae <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00ae:	6810      	ldr	r0, [r2, #0]
 80a00b0:	4770      	bx	lr
	...

080a00b4 <_Z6pumpOnPKcS0_>:
// and changes the pump status to "ON".               //
// This function is only called when the "turnPumpOn" //
// event is published to the Prticle.io cloud         //
////////////////////////////////////////////////////////

void pumpOn (const char *event, const char *data) {
 80a00b4:	b508      	push	{r3, lr}
    digitalWrite(PUMP_PIN, HIGH);
 80a00b6:	2101      	movs	r1, #1
 80a00b8:	2000      	movs	r0, #0
 80a00ba:	f000 fed6 	bl	80a0e6a <digitalWrite>
    pumpStatus = "ON";
}
 80a00be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// event is published to the Prticle.io cloud         //
////////////////////////////////////////////////////////

void pumpOn (const char *event, const char *data) {
    digitalWrite(PUMP_PIN, HIGH);
    pumpStatus = "ON";
 80a00c2:	4902      	ldr	r1, [pc, #8]	; (80a00cc <_Z6pumpOnPKcS0_+0x18>)
 80a00c4:	4802      	ldr	r0, [pc, #8]	; (80a00d0 <_Z6pumpOnPKcS0_+0x1c>)
 80a00c6:	f000 ba97 	b.w	80a05f8 <_ZN6StringaSEPKc>
 80a00ca:	bf00      	nop
 80a00cc:	080a12d8 	.word	0x080a12d8
 80a00d0:	2000006c 	.word	0x2000006c

080a00d4 <_Z7pumpOffPKcS0_>:
// This fucntion turns the pump pin to LOW             //                             (even though they are not used in this program)
// and changes the pump status to "OFF".               //
// This function is only called when the "turnPumpOff" //
// event is published to the Prticle.io cloud          //
/////////////////////////////////////////////////////////
void pumpOff (const char *event, const char *data) {
 80a00d4:	b508      	push	{r3, lr}
    digitalWrite(PUMP_PIN, LOW);
 80a00d6:	2100      	movs	r1, #0
 80a00d8:	4608      	mov	r0, r1
 80a00da:	f000 fec6 	bl	80a0e6a <digitalWrite>
    pumpStatus = "OFF";
}
 80a00de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
// This function is only called when the "turnPumpOff" //
// event is published to the Prticle.io cloud          //
/////////////////////////////////////////////////////////
void pumpOff (const char *event, const char *data) {
    digitalWrite(PUMP_PIN, LOW);
    pumpStatus = "OFF";
 80a00e2:	4902      	ldr	r1, [pc, #8]	; (80a00ec <_Z7pumpOffPKcS0_+0x18>)
 80a00e4:	4802      	ldr	r0, [pc, #8]	; (80a00f0 <_Z7pumpOffPKcS0_+0x1c>)
 80a00e6:	f000 ba87 	b.w	80a05f8 <_ZN6StringaSEPKc>
 80a00ea:	bf00      	nop
 80a00ec:	080a12db 	.word	0x080a12db
 80a00f0:	2000006c 	.word	0x2000006c

080a00f4 <setup>:
// -> Initializes the pump status for Particle.io Cloud. //
// -> Subscribes to events on Particle.io Cloud which    //
//    turn the water pump ON/OFF.                        //
// -> Initializes the pump pin as an Output.             //
///////////////////////////////////////////////////////////
void setup() {
 80a00f4:	b510      	push	{r4, lr}

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
 80a00f6:	230c      	movs	r3, #12
 80a00f8:	b086      	sub	sp, #24
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a00fa:	2400      	movs	r4, #0
 80a00fc:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
 80a00fe:	f8ad 300c 	strh.w	r3, [sp, #12]
        extra.update = update_string_variable;
 80a0102:	4b0f      	ldr	r3, [pc, #60]	; (80a0140 <setup+0x4c>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0104:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a0106:	9304      	str	r3, [sp, #16]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0108:	490e      	ldr	r1, [pc, #56]	; (80a0144 <setup+0x50>)
 80a010a:	ab03      	add	r3, sp, #12
 80a010c:	480e      	ldr	r0, [pc, #56]	; (80a0148 <setup+0x54>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a010e:	9405      	str	r4, [sp, #20]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0110:	f000 f9ac 	bl	80a046c <spark_variable>
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
 80a0114:	4623      	mov	r3, r4
 80a0116:	4622      	mov	r2, r4
 80a0118:	9401      	str	r4, [sp, #4]
 80a011a:	9400      	str	r4, [sp, #0]
 80a011c:	490b      	ldr	r1, [pc, #44]	; (80a014c <setup+0x58>)
 80a011e:	480c      	ldr	r0, [pc, #48]	; (80a0150 <setup+0x5c>)
 80a0120:	f000 f9ac 	bl	80a047c <spark_subscribe>
 80a0124:	4623      	mov	r3, r4
 80a0126:	4622      	mov	r2, r4
 80a0128:	9401      	str	r4, [sp, #4]
 80a012a:	9400      	str	r4, [sp, #0]
 80a012c:	4909      	ldr	r1, [pc, #36]	; (80a0154 <setup+0x60>)
 80a012e:	480a      	ldr	r0, [pc, #40]	; (80a0158 <setup+0x64>)
 80a0130:	f000 f9a4 	bl	80a047c <spark_subscribe>
    // Subscibe to pump command events in the Particle Cloud
    Particle.subscribe("turnPumpOn", pumpOn, MY_DEVICES);         // Execute pumpOn function, when "turnPumpOn" event is published
    Particle.subscribe("turnPumpOff", pumpOff, MY_DEVICES);       // Execute pumpOff function, when "turnPumpOff" event is published

    // Initialize the pump pin on the Photon as an Output pin.
    pinMode(PUMP_PIN, OUTPUT);
 80a0134:	2101      	movs	r1, #1
 80a0136:	4620      	mov	r0, r4
 80a0138:	f000 fe86 	bl	80a0e48 <pinMode>
}
 80a013c:	b006      	add	sp, #24
 80a013e:	bd10      	pop	{r4, pc}
 80a0140:	080a00af 	.word	0x080a00af
 80a0144:	2000006c 	.word	0x2000006c
 80a0148:	080a12df 	.word	0x080a12df
 80a014c:	080a00b5 	.word	0x080a00b5
 80a0150:	080a12ea 	.word	0x080a12ea
 80a0154:	080a00d5 	.word	0x080a00d5
 80a0158:	080a12f5 	.word	0x080a12f5

080a015c <loop>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOOP FUNCTION:                //
// Does not need to do anything. //
///////////////////////////////////
void loop() {}
 80a015c:	4770      	bx	lr
	...

080a0160 <_GLOBAL__sub_I_pumpStatus>:
// event is published to the Prticle.io cloud          //
/////////////////////////////////////////////////////////
void pumpOff (const char *event, const char *data) {
    digitalWrite(PUMP_PIN, LOW);
    pumpStatus = "OFF";
}
 80a0160:	b510      	push	{r4, lr}
 */

 // Define which pin the pump is connected to. (Controls the relay which controls the contactor which controls the pump)
 #define PUMP_PIN  0

 String pumpStatus;
 80a0162:	4c07      	ldr	r4, [pc, #28]	; (80a0180 <_GLOBAL__sub_I_pumpStatus+0x20>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0164:	f000 f814 	bl	80a0190 <HAL_Pin_Map>
 80a0168:	4906      	ldr	r1, [pc, #24]	; (80a0184 <_GLOBAL__sub_I_pumpStatus+0x24>)
 80a016a:	4620      	mov	r0, r4
 80a016c:	f000 fa31 	bl	80a05d2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0170:	4620      	mov	r0, r4
// event is published to the Prticle.io cloud          //
/////////////////////////////////////////////////////////
void pumpOff (const char *event, const char *data) {
    digitalWrite(PUMP_PIN, LOW);
    pumpStatus = "OFF";
}
 80a0172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */

 // Define which pin the pump is connected to. (Controls the relay which controls the contactor which controls the pump)
 #define PUMP_PIN  0

 String pumpStatus;
 80a0176:	4a04      	ldr	r2, [pc, #16]	; (80a0188 <_GLOBAL__sub_I_pumpStatus+0x28>)
 80a0178:	4904      	ldr	r1, [pc, #16]	; (80a018c <_GLOBAL__sub_I_pumpStatus+0x2c>)
 80a017a:	f000 bee7 	b.w	80a0f4c <__aeabi_atexit>
 80a017e:	bf00      	nop
 80a0180:	2000006c 	.word	0x2000006c
 80a0184:	080a13ab 	.word	0x080a13ab
 80a0188:	20000068 	.word	0x20000068
 80a018c:	080a0545 	.word	0x080a0545

080a0190 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0190:	b508      	push	{r3, lr}
 80a0192:	4b02      	ldr	r3, [pc, #8]	; (80a019c <HAL_Pin_Map+0xc>)
 80a0194:	681b      	ldr	r3, [r3, #0]
 80a0196:	681b      	ldr	r3, [r3, #0]
 80a0198:	9301      	str	r3, [sp, #4]
 80a019a:	bd08      	pop	{r3, pc}
 80a019c:	080601b0 	.word	0x080601b0

080a01a0 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a01a0:	b508      	push	{r3, lr}
 80a01a2:	4b02      	ldr	r3, [pc, #8]	; (80a01ac <HAL_Pin_Mode+0xc>)
 80a01a4:	681b      	ldr	r3, [r3, #0]
 80a01a6:	689b      	ldr	r3, [r3, #8]
 80a01a8:	9301      	str	r3, [sp, #4]
 80a01aa:	bd08      	pop	{r3, pc}
 80a01ac:	080601b0 	.word	0x080601b0

080a01b0 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a01b0:	b508      	push	{r3, lr}
 80a01b2:	4b02      	ldr	r3, [pc, #8]	; (80a01bc <HAL_Get_Pin_Mode+0xc>)
 80a01b4:	681b      	ldr	r3, [r3, #0]
 80a01b6:	68db      	ldr	r3, [r3, #12]
 80a01b8:	9301      	str	r3, [sp, #4]
 80a01ba:	bd08      	pop	{r3, pc}
 80a01bc:	080601b0 	.word	0x080601b0

080a01c0 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a01c0:	b508      	push	{r3, lr}
 80a01c2:	4b02      	ldr	r3, [pc, #8]	; (80a01cc <HAL_GPIO_Write+0xc>)
 80a01c4:	681b      	ldr	r3, [r3, #0]
 80a01c6:	691b      	ldr	r3, [r3, #16]
 80a01c8:	9301      	str	r3, [sp, #4]
 80a01ca:	bd08      	pop	{r3, pc}
 80a01cc:	080601b0 	.word	0x080601b0

080a01d0 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a01d0:	b508      	push	{r3, lr}
 80a01d2:	4b02      	ldr	r3, [pc, #8]	; (80a01dc <HAL_SPI_Init+0xc>)
 80a01d4:	681b      	ldr	r3, [r3, #0]
 80a01d6:	69db      	ldr	r3, [r3, #28]
 80a01d8:	9301      	str	r3, [sp, #4]
 80a01da:	bd08      	pop	{r3, pc}
 80a01dc:	080601b4 	.word	0x080601b4

080a01e0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a01e0:	b508      	push	{r3, lr}
 80a01e2:	4b02      	ldr	r3, [pc, #8]	; (80a01ec <HAL_SPI_Is_Enabled+0xc>)
 80a01e4:	681b      	ldr	r3, [r3, #0]
 80a01e6:	6a1b      	ldr	r3, [r3, #32]
 80a01e8:	9301      	str	r3, [sp, #4]
 80a01ea:	bd08      	pop	{r3, pc}
 80a01ec:	080601b4 	.word	0x080601b4

080a01f0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a01f0:	b508      	push	{r3, lr}
 80a01f2:	4b02      	ldr	r3, [pc, #8]	; (80a01fc <HAL_RNG_GetRandomNumber+0xc>)
 80a01f4:	681b      	ldr	r3, [r3, #0]
 80a01f6:	685b      	ldr	r3, [r3, #4]
 80a01f8:	9301      	str	r3, [sp, #4]
 80a01fa:	bd08      	pop	{r3, pc}
 80a01fc:	0806019c 	.word	0x0806019c

080a0200 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0200:	b508      	push	{r3, lr}
 80a0202:	4b02      	ldr	r3, [pc, #8]	; (80a020c <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0204:	681b      	ldr	r3, [r3, #0]
 80a0206:	695b      	ldr	r3, [r3, #20]
 80a0208:	9301      	str	r3, [sp, #4]
 80a020a:	bd08      	pop	{r3, pc}
 80a020c:	0806019c 	.word	0x0806019c

080a0210 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0210:	b508      	push	{r3, lr}
 80a0212:	4b02      	ldr	r3, [pc, #8]	; (80a021c <os_mutex_recursive_create+0xc>)
 80a0214:	681b      	ldr	r3, [r3, #0]
 80a0216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0218:	9301      	str	r3, [sp, #4]
 80a021a:	bd08      	pop	{r3, pc}
 80a021c:	080601d0 	.word	0x080601d0

080a0220 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0220:	b508      	push	{r3, lr}
 80a0222:	4b02      	ldr	r3, [pc, #8]	; (80a022c <os_mutex_recursive_destroy+0xc>)
 80a0224:	681b      	ldr	r3, [r3, #0]
 80a0226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0228:	9301      	str	r3, [sp, #4]
 80a022a:	bd08      	pop	{r3, pc}
 80a022c:	080601d0 	.word	0x080601d0

080a0230 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0230:	b508      	push	{r3, lr}
 80a0232:	4b02      	ldr	r3, [pc, #8]	; (80a023c <HAL_USART_Init+0xc>)
 80a0234:	681b      	ldr	r3, [r3, #0]
 80a0236:	699b      	ldr	r3, [r3, #24]
 80a0238:	9301      	str	r3, [sp, #4]
 80a023a:	bd08      	pop	{r3, pc}
 80a023c:	080601c4 	.word	0x080601c4

080a0240 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0240:	b508      	push	{r3, lr}
 80a0242:	4b02      	ldr	r3, [pc, #8]	; (80a024c <HAL_USART_Write_Data+0xc>)
 80a0244:	681b      	ldr	r3, [r3, #0]
 80a0246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0248:	9301      	str	r3, [sp, #4]
 80a024a:	bd08      	pop	{r3, pc}
 80a024c:	080601c4 	.word	0x080601c4

080a0250 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0250:	b508      	push	{r3, lr}
 80a0252:	4b02      	ldr	r3, [pc, #8]	; (80a025c <HAL_USART_Available_Data+0xc>)
 80a0254:	681b      	ldr	r3, [r3, #0]
 80a0256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0258:	9301      	str	r3, [sp, #4]
 80a025a:	bd08      	pop	{r3, pc}
 80a025c:	080601c4 	.word	0x080601c4

080a0260 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0260:	b508      	push	{r3, lr}
 80a0262:	4b02      	ldr	r3, [pc, #8]	; (80a026c <HAL_USART_Read_Data+0xc>)
 80a0264:	681b      	ldr	r3, [r3, #0]
 80a0266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0268:	9301      	str	r3, [sp, #4]
 80a026a:	bd08      	pop	{r3, pc}
 80a026c:	080601c4 	.word	0x080601c4

080a0270 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0270:	b508      	push	{r3, lr}
 80a0272:	4b02      	ldr	r3, [pc, #8]	; (80a027c <HAL_USART_Peek_Data+0xc>)
 80a0274:	681b      	ldr	r3, [r3, #0]
 80a0276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0278:	9301      	str	r3, [sp, #4]
 80a027a:	bd08      	pop	{r3, pc}
 80a027c:	080601c4 	.word	0x080601c4

080a0280 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0280:	b508      	push	{r3, lr}
 80a0282:	4b02      	ldr	r3, [pc, #8]	; (80a028c <HAL_USART_Flush_Data+0xc>)
 80a0284:	681b      	ldr	r3, [r3, #0]
 80a0286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0288:	9301      	str	r3, [sp, #4]
 80a028a:	bd08      	pop	{r3, pc}
 80a028c:	080601c4 	.word	0x080601c4

080a0290 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0290:	b508      	push	{r3, lr}
 80a0292:	4b02      	ldr	r3, [pc, #8]	; (80a029c <HAL_USART_Is_Enabled+0xc>)
 80a0294:	681b      	ldr	r3, [r3, #0]
 80a0296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0298:	9301      	str	r3, [sp, #4]
 80a029a:	bd08      	pop	{r3, pc}
 80a029c:	080601c4 	.word	0x080601c4

080a02a0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a02a0:	b508      	push	{r3, lr}
 80a02a2:	4b02      	ldr	r3, [pc, #8]	; (80a02ac <HAL_USART_Available_Data_For_Write+0xc>)
 80a02a4:	681b      	ldr	r3, [r3, #0]
 80a02a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a02a8:	9301      	str	r3, [sp, #4]
 80a02aa:	bd08      	pop	{r3, pc}
 80a02ac:	080601c4 	.word	0x080601c4

080a02b0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a02b0:	b508      	push	{r3, lr}
 80a02b2:	4b02      	ldr	r3, [pc, #8]	; (80a02bc <HAL_I2C_Write_Data+0xc>)
 80a02b4:	681b      	ldr	r3, [r3, #0]
 80a02b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a02b8:	9301      	str	r3, [sp, #4]
 80a02ba:	bd08      	pop	{r3, pc}
 80a02bc:	080601ac 	.word	0x080601ac

080a02c0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a02c0:	b508      	push	{r3, lr}
 80a02c2:	4b02      	ldr	r3, [pc, #8]	; (80a02cc <HAL_I2C_Available_Data+0xc>)
 80a02c4:	681b      	ldr	r3, [r3, #0]
 80a02c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a02c8:	9301      	str	r3, [sp, #4]
 80a02ca:	bd08      	pop	{r3, pc}
 80a02cc:	080601ac 	.word	0x080601ac

080a02d0 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a02d0:	b508      	push	{r3, lr}
 80a02d2:	4b02      	ldr	r3, [pc, #8]	; (80a02dc <HAL_I2C_Read_Data+0xc>)
 80a02d4:	681b      	ldr	r3, [r3, #0]
 80a02d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a02d8:	9301      	str	r3, [sp, #4]
 80a02da:	bd08      	pop	{r3, pc}
 80a02dc:	080601ac 	.word	0x080601ac

080a02e0 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a02e0:	b508      	push	{r3, lr}
 80a02e2:	4b02      	ldr	r3, [pc, #8]	; (80a02ec <HAL_I2C_Peek_Data+0xc>)
 80a02e4:	681b      	ldr	r3, [r3, #0]
 80a02e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a02e8:	9301      	str	r3, [sp, #4]
 80a02ea:	bd08      	pop	{r3, pc}
 80a02ec:	080601ac 	.word	0x080601ac

080a02f0 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a02f0:	b508      	push	{r3, lr}
 80a02f2:	4b02      	ldr	r3, [pc, #8]	; (80a02fc <HAL_I2C_Flush_Data+0xc>)
 80a02f4:	681b      	ldr	r3, [r3, #0]
 80a02f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a02f8:	9301      	str	r3, [sp, #4]
 80a02fa:	bd08      	pop	{r3, pc}
 80a02fc:	080601ac 	.word	0x080601ac

080a0300 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0300:	b508      	push	{r3, lr}
 80a0302:	4b02      	ldr	r3, [pc, #8]	; (80a030c <HAL_I2C_Is_Enabled+0xc>)
 80a0304:	681b      	ldr	r3, [r3, #0]
 80a0306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0308:	9301      	str	r3, [sp, #4]
 80a030a:	bd08      	pop	{r3, pc}
 80a030c:	080601ac 	.word	0x080601ac

080a0310 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0310:	b508      	push	{r3, lr}
 80a0312:	4b03      	ldr	r3, [pc, #12]	; (80a0320 <HAL_I2C_Init+0x10>)
 80a0314:	681b      	ldr	r3, [r3, #0]
 80a0316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a031a:	9301      	str	r3, [sp, #4]
 80a031c:	bd08      	pop	{r3, pc}
 80a031e:	0000      	.short	0x0000
 80a0320:	080601ac 	.word	0x080601ac

080a0324 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0324:	b508      	push	{r3, lr}
 80a0326:	4b02      	ldr	r3, [pc, #8]	; (80a0330 <HAL_USB_USART_Init+0xc>)
 80a0328:	681b      	ldr	r3, [r3, #0]
 80a032a:	681b      	ldr	r3, [r3, #0]
 80a032c:	9301      	str	r3, [sp, #4]
 80a032e:	bd08      	pop	{r3, pc}
 80a0330:	080601d8 	.word	0x080601d8

080a0334 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0334:	b508      	push	{r3, lr}
 80a0336:	4b02      	ldr	r3, [pc, #8]	; (80a0340 <HAL_USB_USART_Available_Data+0xc>)
 80a0338:	681b      	ldr	r3, [r3, #0]
 80a033a:	691b      	ldr	r3, [r3, #16]
 80a033c:	9301      	str	r3, [sp, #4]
 80a033e:	bd08      	pop	{r3, pc}
 80a0340:	080601d8 	.word	0x080601d8

080a0344 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0344:	b508      	push	{r3, lr}
 80a0346:	4b02      	ldr	r3, [pc, #8]	; (80a0350 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0348:	681b      	ldr	r3, [r3, #0]
 80a034a:	695b      	ldr	r3, [r3, #20]
 80a034c:	9301      	str	r3, [sp, #4]
 80a034e:	bd08      	pop	{r3, pc}
 80a0350:	080601d8 	.word	0x080601d8

080a0354 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0354:	b508      	push	{r3, lr}
 80a0356:	4b02      	ldr	r3, [pc, #8]	; (80a0360 <HAL_USB_USART_Receive_Data+0xc>)
 80a0358:	681b      	ldr	r3, [r3, #0]
 80a035a:	699b      	ldr	r3, [r3, #24]
 80a035c:	9301      	str	r3, [sp, #4]
 80a035e:	bd08      	pop	{r3, pc}
 80a0360:	080601d8 	.word	0x080601d8

080a0364 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0364:	b508      	push	{r3, lr}
 80a0366:	4b02      	ldr	r3, [pc, #8]	; (80a0370 <HAL_USB_USART_Send_Data+0xc>)
 80a0368:	681b      	ldr	r3, [r3, #0]
 80a036a:	69db      	ldr	r3, [r3, #28]
 80a036c:	9301      	str	r3, [sp, #4]
 80a036e:	bd08      	pop	{r3, pc}
 80a0370:	080601d8 	.word	0x080601d8

080a0374 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0374:	b508      	push	{r3, lr}
 80a0376:	4b02      	ldr	r3, [pc, #8]	; (80a0380 <HAL_USB_USART_Flush_Data+0xc>)
 80a0378:	681b      	ldr	r3, [r3, #0]
 80a037a:	6a1b      	ldr	r3, [r3, #32]
 80a037c:	9301      	str	r3, [sp, #4]
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	080601d8 	.word	0x080601d8

080a0384 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0384:	b508      	push	{r3, lr}
 80a0386:	4b02      	ldr	r3, [pc, #8]	; (80a0390 <inet_gethostbyname+0xc>)
 80a0388:	681b      	ldr	r3, [r3, #0]
 80a038a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a038c:	9301      	str	r3, [sp, #4]
 80a038e:	bd08      	pop	{r3, pc}
 80a0390:	080601c0 	.word	0x080601c0

080a0394 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0394:	b508      	push	{r3, lr}
 80a0396:	4b02      	ldr	r3, [pc, #8]	; (80a03a0 <set_system_mode+0xc>)
 80a0398:	681b      	ldr	r3, [r3, #0]
 80a039a:	685b      	ldr	r3, [r3, #4]
 80a039c:	9301      	str	r3, [sp, #4]
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	080601a4 	.word	0x080601a4

080a03a4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a03a4:	b508      	push	{r3, lr}
 80a03a6:	4b03      	ldr	r3, [pc, #12]	; (80a03b4 <system_ctrl_set_app_request_handler+0x10>)
 80a03a8:	681b      	ldr	r3, [r3, #0]
 80a03aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a03ae:	9301      	str	r3, [sp, #4]
 80a03b0:	bd08      	pop	{r3, pc}
 80a03b2:	0000      	.short	0x0000
 80a03b4:	080601a4 	.word	0x080601a4

080a03b8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a03b8:	b508      	push	{r3, lr}
 80a03ba:	4b03      	ldr	r3, [pc, #12]	; (80a03c8 <system_ctrl_set_result+0x10>)
 80a03bc:	681b      	ldr	r3, [r3, #0]
 80a03be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a03c2:	9301      	str	r3, [sp, #4]
 80a03c4:	bd08      	pop	{r3, pc}
 80a03c6:	0000      	.short	0x0000
 80a03c8:	080601a4 	.word	0x080601a4

080a03cc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a03cc:	b508      	push	{r3, lr}
 80a03ce:	4b02      	ldr	r3, [pc, #8]	; (80a03d8 <network_connect+0xc>)
 80a03d0:	681b      	ldr	r3, [r3, #0]
 80a03d2:	685b      	ldr	r3, [r3, #4]
 80a03d4:	9301      	str	r3, [sp, #4]
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	080601c8 	.word	0x080601c8

080a03dc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a03dc:	b508      	push	{r3, lr}
 80a03de:	4b02      	ldr	r3, [pc, #8]	; (80a03e8 <network_connecting+0xc>)
 80a03e0:	681b      	ldr	r3, [r3, #0]
 80a03e2:	689b      	ldr	r3, [r3, #8]
 80a03e4:	9301      	str	r3, [sp, #4]
 80a03e6:	bd08      	pop	{r3, pc}
 80a03e8:	080601c8 	.word	0x080601c8

080a03ec <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a03ec:	b508      	push	{r3, lr}
 80a03ee:	4b02      	ldr	r3, [pc, #8]	; (80a03f8 <network_disconnect+0xc>)
 80a03f0:	681b      	ldr	r3, [r3, #0]
 80a03f2:	68db      	ldr	r3, [r3, #12]
 80a03f4:	9301      	str	r3, [sp, #4]
 80a03f6:	bd08      	pop	{r3, pc}
 80a03f8:	080601c8 	.word	0x080601c8

080a03fc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a03fc:	b508      	push	{r3, lr}
 80a03fe:	4b02      	ldr	r3, [pc, #8]	; (80a0408 <network_ready+0xc>)
 80a0400:	681b      	ldr	r3, [r3, #0]
 80a0402:	691b      	ldr	r3, [r3, #16]
 80a0404:	9301      	str	r3, [sp, #4]
 80a0406:	bd08      	pop	{r3, pc}
 80a0408:	080601c8 	.word	0x080601c8

080a040c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a040c:	b508      	push	{r3, lr}
 80a040e:	4b02      	ldr	r3, [pc, #8]	; (80a0418 <network_on+0xc>)
 80a0410:	681b      	ldr	r3, [r3, #0]
 80a0412:	695b      	ldr	r3, [r3, #20]
 80a0414:	9301      	str	r3, [sp, #4]
 80a0416:	bd08      	pop	{r3, pc}
 80a0418:	080601c8 	.word	0x080601c8

080a041c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a041c:	b508      	push	{r3, lr}
 80a041e:	4b02      	ldr	r3, [pc, #8]	; (80a0428 <network_off+0xc>)
 80a0420:	681b      	ldr	r3, [r3, #0]
 80a0422:	699b      	ldr	r3, [r3, #24]
 80a0424:	9301      	str	r3, [sp, #4]
 80a0426:	bd08      	pop	{r3, pc}
 80a0428:	080601c8 	.word	0x080601c8

080a042c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a042c:	b508      	push	{r3, lr}
 80a042e:	4b02      	ldr	r3, [pc, #8]	; (80a0438 <network_listen+0xc>)
 80a0430:	681b      	ldr	r3, [r3, #0]
 80a0432:	69db      	ldr	r3, [r3, #28]
 80a0434:	9301      	str	r3, [sp, #4]
 80a0436:	bd08      	pop	{r3, pc}
 80a0438:	080601c8 	.word	0x080601c8

080a043c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a043c:	b508      	push	{r3, lr}
 80a043e:	4b02      	ldr	r3, [pc, #8]	; (80a0448 <network_listening+0xc>)
 80a0440:	681b      	ldr	r3, [r3, #0]
 80a0442:	6a1b      	ldr	r3, [r3, #32]
 80a0444:	9301      	str	r3, [sp, #4]
 80a0446:	bd08      	pop	{r3, pc}
 80a0448:	080601c8 	.word	0x080601c8

080a044c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a044c:	b508      	push	{r3, lr}
 80a044e:	4b02      	ldr	r3, [pc, #8]	; (80a0458 <network_set_listen_timeout+0xc>)
 80a0450:	681b      	ldr	r3, [r3, #0]
 80a0452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0454:	9301      	str	r3, [sp, #4]
 80a0456:	bd08      	pop	{r3, pc}
 80a0458:	080601c8 	.word	0x080601c8

080a045c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a045c:	b508      	push	{r3, lr}
 80a045e:	4b02      	ldr	r3, [pc, #8]	; (80a0468 <network_get_listen_timeout+0xc>)
 80a0460:	681b      	ldr	r3, [r3, #0]
 80a0462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0464:	9301      	str	r3, [sp, #4]
 80a0466:	bd08      	pop	{r3, pc}
 80a0468:	080601c8 	.word	0x080601c8

080a046c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a046c:	b508      	push	{r3, lr}
 80a046e:	4b02      	ldr	r3, [pc, #8]	; (80a0478 <spark_variable+0xc>)
 80a0470:	681b      	ldr	r3, [r3, #0]
 80a0472:	681b      	ldr	r3, [r3, #0]
 80a0474:	9301      	str	r3, [sp, #4]
 80a0476:	bd08      	pop	{r3, pc}
 80a0478:	080601cc 	.word	0x080601cc

080a047c <spark_subscribe>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80a047c:	b508      	push	{r3, lr}
 80a047e:	4b02      	ldr	r3, [pc, #8]	; (80a0488 <spark_subscribe+0xc>)
 80a0480:	681b      	ldr	r3, [r3, #0]
 80a0482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0484:	9301      	str	r3, [sp, #4]
 80a0486:	bd08      	pop	{r3, pc}
 80a0488:	080601cc 	.word	0x080601cc

080a048c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a048c:	b508      	push	{r3, lr}
 80a048e:	4b02      	ldr	r3, [pc, #8]	; (80a0498 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0490:	681b      	ldr	r3, [r3, #0]
 80a0492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0494:	9301      	str	r3, [sp, #4]
 80a0496:	bd08      	pop	{r3, pc}
 80a0498:	080601cc 	.word	0x080601cc

080a049c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a049c:	b508      	push	{r3, lr}
 80a049e:	4b02      	ldr	r3, [pc, #8]	; (80a04a8 <malloc+0xc>)
 80a04a0:	681b      	ldr	r3, [r3, #0]
 80a04a2:	681b      	ldr	r3, [r3, #0]
 80a04a4:	9301      	str	r3, [sp, #4]
 80a04a6:	bd08      	pop	{r3, pc}
 80a04a8:	080601a0 	.word	0x080601a0

080a04ac <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a04ac:	b508      	push	{r3, lr}
 80a04ae:	4b02      	ldr	r3, [pc, #8]	; (80a04b8 <free+0xc>)
 80a04b0:	681b      	ldr	r3, [r3, #0]
 80a04b2:	685b      	ldr	r3, [r3, #4]
 80a04b4:	9301      	str	r3, [sp, #4]
 80a04b6:	bd08      	pop	{r3, pc}
 80a04b8:	080601a0 	.word	0x080601a0

080a04bc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a04bc:	b508      	push	{r3, lr}
 80a04be:	4b02      	ldr	r3, [pc, #8]	; (80a04c8 <realloc+0xc>)
 80a04c0:	681b      	ldr	r3, [r3, #0]
 80a04c2:	689b      	ldr	r3, [r3, #8]
 80a04c4:	9301      	str	r3, [sp, #4]
 80a04c6:	bd08      	pop	{r3, pc}
 80a04c8:	080601a0 	.word	0x080601a0

080a04cc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a04cc:	b570      	push	{r4, r5, r6, lr}
 80a04ce:	4604      	mov	r4, r0
 80a04d0:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a04d2:	2500      	movs	r5, #0
 80a04d4:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a04d8:	f7ff fe9a 	bl	80a0210 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a04dc:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a04de:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a04e0:	f7ff fe76 	bl	80a01d0 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a04e4:	6065      	str	r5, [r4, #4]
}
 80a04e6:	4620      	mov	r0, r4
 80a04e8:	bd70      	pop	{r4, r5, r6, pc}

080a04ea <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a04ea:	7800      	ldrb	r0, [r0, #0]
 80a04ec:	f7ff be78 	b.w	80a01e0 <HAL_SPI_Is_Enabled>

080a04f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a04f0:	b510      	push	{r4, lr}
 80a04f2:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a04f4:	6800      	ldr	r0, [r0, #0]
 80a04f6:	b118      	cbz	r0, 80a0500 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a04f8:	f7ff ffd8 	bl	80a04ac <free>
            wakeupSource_ = nullptr;
 80a04fc:	2300      	movs	r3, #0
 80a04fe:	6023      	str	r3, [r4, #0]
 80a0500:	bd10      	pop	{r4, pc}

080a0502 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0502:	b510      	push	{r4, lr}
 80a0504:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0506:	f7ff fff3 	bl	80a04f0 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a050a:	4620      	mov	r0, r4
 80a050c:	bd10      	pop	{r4, pc}
	...

080a0510 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0510:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0514:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0516:	4c08      	ldr	r4, [pc, #32]	; (80a0538 <_GLOBAL__sub_I_System+0x28>)
 80a0518:	2000      	movs	r0, #0
 80a051a:	6020      	str	r0, [r4, #0]
 80a051c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a051e:	71a0      	strb	r0, [r4, #6]
 80a0520:	8120      	strh	r0, [r4, #8]
 80a0522:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0524:	f7ff ff36 	bl	80a0394 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0528:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a052a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a052e:	4a03      	ldr	r2, [pc, #12]	; (80a053c <_GLOBAL__sub_I_System+0x2c>)
 80a0530:	4903      	ldr	r1, [pc, #12]	; (80a0540 <_GLOBAL__sub_I_System+0x30>)
 80a0532:	f000 bd0b 	b.w	80a0f4c <__aeabi_atexit>
 80a0536:	bf00      	nop
 80a0538:	2000007c 	.word	0x2000007c
 80a053c:	20000068 	.word	0x20000068
 80a0540:	080a0503 	.word	0x080a0503

080a0544 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a0544:	b510      	push	{r4, lr}
 80a0546:	4604      	mov	r4, r0
{
	free(buffer);
 80a0548:	6800      	ldr	r0, [r0, #0]
 80a054a:	f7ff ffaf 	bl	80a04ac <free>
}
 80a054e:	4620      	mov	r0, r4
 80a0550:	bd10      	pop	{r4, pc}

080a0552 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a0552:	b510      	push	{r4, lr}
 80a0554:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a0556:	6800      	ldr	r0, [r0, #0]
 80a0558:	b108      	cbz	r0, 80a055e <_ZN6String10invalidateEv+0xc>
 80a055a:	f7ff ffa7 	bl	80a04ac <free>
	buffer = NULL;
 80a055e:	2300      	movs	r3, #0
 80a0560:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a0562:	60a3      	str	r3, [r4, #8]
 80a0564:	6063      	str	r3, [r4, #4]
 80a0566:	bd10      	pop	{r4, pc}

080a0568 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a0568:	b538      	push	{r3, r4, r5, lr}
 80a056a:	4604      	mov	r4, r0
 80a056c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a056e:	6800      	ldr	r0, [r0, #0]
 80a0570:	3101      	adds	r1, #1
 80a0572:	f7ff ffa3 	bl	80a04bc <realloc>
	if (newbuffer) {
 80a0576:	b110      	cbz	r0, 80a057e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a0578:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a057c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a057e:	bd38      	pop	{r3, r4, r5, pc}

080a0580 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0580:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a0582:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a0584:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a0586:	b113      	cbz	r3, 80a058e <_ZN6String7reserveEj+0xe>
 80a0588:	6843      	ldr	r3, [r0, #4]
 80a058a:	428b      	cmp	r3, r1
 80a058c:	d207      	bcs.n	80a059e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a058e:	4620      	mov	r0, r4
 80a0590:	f7ff ffea 	bl	80a0568 <_ZN6String12changeBufferEj>
 80a0594:	b120      	cbz	r0, 80a05a0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a0596:	68a3      	ldr	r3, [r4, #8]
 80a0598:	b90b      	cbnz	r3, 80a059e <_ZN6String7reserveEj+0x1e>
 80a059a:	6822      	ldr	r2, [r4, #0]
 80a059c:	7013      	strb	r3, [r2, #0]
 80a059e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a05a0:	bd10      	pop	{r4, pc}

080a05a2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a05a2:	b570      	push	{r4, r5, r6, lr}
 80a05a4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a05a6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a05a8:	4604      	mov	r4, r0
 80a05aa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a05ac:	f7ff ffe8 	bl	80a0580 <_ZN6String7reserveEj>
 80a05b0:	b918      	cbnz	r0, 80a05ba <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a05b2:	4620      	mov	r0, r4
 80a05b4:	f7ff ffcd 	bl	80a0552 <_ZN6String10invalidateEv>
		return *this;
 80a05b8:	e009      	b.n	80a05ce <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a05ba:	462a      	mov	r2, r5
 80a05bc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a05be:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a05c0:	6820      	ldr	r0, [r4, #0]
 80a05c2:	f000 fe3b 	bl	80a123c <memcpy>
	buffer[len] = 0;
 80a05c6:	6822      	ldr	r2, [r4, #0]
 80a05c8:	68a3      	ldr	r3, [r4, #8]
 80a05ca:	2100      	movs	r1, #0
 80a05cc:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a05ce:	4620      	mov	r0, r4
 80a05d0:	bd70      	pop	{r4, r5, r6, pc}

080a05d2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a05d2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a05d4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a05d6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a05d8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a05da:	6043      	str	r3, [r0, #4]
	len = 0;
 80a05dc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a05de:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a05e0:	460d      	mov	r5, r1
 80a05e2:	b139      	cbz	r1, 80a05f4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a05e4:	4608      	mov	r0, r1
 80a05e6:	f000 fe65 	bl	80a12b4 <strlen>
 80a05ea:	4629      	mov	r1, r5
 80a05ec:	4602      	mov	r2, r0
 80a05ee:	4620      	mov	r0, r4
 80a05f0:	f7ff ffd7 	bl	80a05a2 <_ZN6String4copyEPKcj>
}
 80a05f4:	4620      	mov	r0, r4
 80a05f6:	bd38      	pop	{r3, r4, r5, pc}

080a05f8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a05f8:	b538      	push	{r3, r4, r5, lr}
 80a05fa:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a05fc:	460c      	mov	r4, r1
 80a05fe:	b141      	cbz	r1, 80a0612 <_ZN6StringaSEPKc+0x1a>
 80a0600:	4608      	mov	r0, r1
 80a0602:	f000 fe57 	bl	80a12b4 <strlen>
 80a0606:	4621      	mov	r1, r4
 80a0608:	4602      	mov	r2, r0
 80a060a:	4628      	mov	r0, r5
 80a060c:	f7ff ffc9 	bl	80a05a2 <_ZN6String4copyEPKcj>
 80a0610:	e001      	b.n	80a0616 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a0612:	f7ff ff9e 	bl	80a0552 <_ZN6String10invalidateEv>

	return *this;
}
 80a0616:	4628      	mov	r0, r5
 80a0618:	bd38      	pop	{r3, r4, r5, pc}

080a061a <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a061a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a061c:	4606      	mov	r6, r0
 80a061e:	460d      	mov	r5, r1
 80a0620:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a0622:	2400      	movs	r4, #0
  while (size--) {
 80a0624:	42bd      	cmp	r5, r7
 80a0626:	d00c      	beq.n	80a0642 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a0628:	6833      	ldr	r3, [r6, #0]
 80a062a:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a062e:	689b      	ldr	r3, [r3, #8]
 80a0630:	4630      	mov	r0, r6
 80a0632:	4798      	blx	r3
     if (chunk>=0)
 80a0634:	2800      	cmp	r0, #0
 80a0636:	db01      	blt.n	80a063c <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a0638:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a063a:	e7f3      	b.n	80a0624 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a063c:	2c00      	cmp	r4, #0
 80a063e:	bf08      	it	eq
 80a0640:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a0642:	4620      	mov	r0, r4
 80a0644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0646 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a0646:	b570      	push	{r4, r5, r6, lr}
 80a0648:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a064a:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a064c:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a064e:	b149      	cbz	r1, 80a0664 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a0650:	f000 fe30 	bl	80a12b4 <strlen>
 80a0654:	682b      	ldr	r3, [r5, #0]
 80a0656:	4602      	mov	r2, r0
 80a0658:	4621      	mov	r1, r4
 80a065a:	4628      	mov	r0, r5
    }
 80a065c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a0660:	68db      	ldr	r3, [r3, #12]
 80a0662:	4718      	bx	r3
    }
 80a0664:	bd70      	pop	{r4, r5, r6, pc}

080a0666 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a0666:	6803      	ldr	r3, [r0, #0]
 80a0668:	689b      	ldr	r3, [r3, #8]
 80a066a:	4718      	bx	r3

080a066c <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a066c:	2a01      	cmp	r2, #1
 80a066e:	bf98      	it	ls
 80a0670:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a0672:	b530      	push	{r4, r5, lr}
 80a0674:	460b      	mov	r3, r1
 80a0676:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a0678:	2100      	movs	r1, #0
 80a067a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a067e:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a0682:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a0686:	fb05 3312 	mls	r3, r5, r2, r3
 80a068a:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a068c:	2b09      	cmp	r3, #9
 80a068e:	bf94      	ite	ls
 80a0690:	3330      	addls	r3, #48	; 0x30
 80a0692:	3337      	addhi	r3, #55	; 0x37
 80a0694:	b2db      	uxtb	r3, r3
 80a0696:	4621      	mov	r1, r4
 80a0698:	f804 3901 	strb.w	r3, [r4], #-1
 80a069c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a069e:	2d00      	cmp	r5, #0
 80a06a0:	d1ef      	bne.n	80a0682 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a06a2:	f7ff ffd0 	bl	80a0646 <_ZN5Print5writeEPKc>
}
 80a06a6:	b00b      	add	sp, #44	; 0x2c
 80a06a8:	bd30      	pop	{r4, r5, pc}

080a06aa <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a06aa:	2300      	movs	r3, #0
 80a06ac:	461a      	mov	r2, r3
 80a06ae:	4619      	mov	r1, r3
 80a06b0:	6840      	ldr	r0, [r0, #4]
 80a06b2:	f7ff beab 	b.w	80a040c <network_on>
	...

080a06b8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a06b8:	4a01      	ldr	r2, [pc, #4]	; (80a06c0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a06ba:	4b02      	ldr	r3, [pc, #8]	; (80a06c4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a06bc:	601a      	str	r2, [r3, #0]
 80a06be:	4770      	bx	lr
 80a06c0:	080a1377 	.word	0x080a1377
 80a06c4:	20000088 	.word	0x20000088

080a06c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a06c8:	4b02      	ldr	r3, [pc, #8]	; (80a06d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a06ca:	681a      	ldr	r2, [r3, #0]
 80a06cc:	4b02      	ldr	r3, [pc, #8]	; (80a06d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a06ce:	601a      	str	r2, [r3, #0]
 80a06d0:	4770      	bx	lr
 80a06d2:	bf00      	nop
 80a06d4:	20000000 	.word	0x20000000
 80a06d8:	2000008c 	.word	0x2000008c

080a06dc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06dc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a06de:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a06e0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a06e2:	b113      	cbz	r3, 80a06ea <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a06e4:	2203      	movs	r2, #3
 80a06e6:	4601      	mov	r1, r0
 80a06e8:	4798      	blx	r3
    }
 80a06ea:	4620      	mov	r0, r4
 80a06ec:	bd10      	pop	{r4, pc}

080a06ee <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a06ee:	b510      	push	{r4, lr}
 80a06f0:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a06f2:	f7ff fff3 	bl	80a06dc <_ZNSt14_Function_baseD1Ev>
 80a06f6:	4620      	mov	r0, r4
 80a06f8:	bd10      	pop	{r4, pc}
	...

080a06fc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a06fc:	4803      	ldr	r0, [pc, #12]	; (80a070c <_GLOBAL__sub_I_RGB+0x10>)
 80a06fe:	2300      	movs	r3, #0
 80a0700:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a0702:	4a03      	ldr	r2, [pc, #12]	; (80a0710 <_GLOBAL__sub_I_RGB+0x14>)
 80a0704:	4903      	ldr	r1, [pc, #12]	; (80a0714 <_GLOBAL__sub_I_RGB+0x18>)
 80a0706:	f000 bc21 	b.w	80a0f4c <__aeabi_atexit>
 80a070a:	bf00      	nop
 80a070c:	20000090 	.word	0x20000090
 80a0710:	20000068 	.word	0x20000068
 80a0714:	080a06ef 	.word	0x080a06ef

080a0718 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a0718:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a071a:	4b14      	ldr	r3, [pc, #80]	; (80a076c <serialEventRun+0x54>)
 80a071c:	b133      	cbz	r3, 80a072c <serialEventRun+0x14>
 80a071e:	f000 f967 	bl	80a09f0 <_Z16_fetch_usbserialv>
 80a0722:	6803      	ldr	r3, [r0, #0]
 80a0724:	691b      	ldr	r3, [r3, #16]
 80a0726:	4798      	blx	r3
 80a0728:	2800      	cmp	r0, #0
 80a072a:	dc16      	bgt.n	80a075a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a072c:	4b10      	ldr	r3, [pc, #64]	; (80a0770 <serialEventRun+0x58>)
 80a072e:	b133      	cbz	r3, 80a073e <serialEventRun+0x26>
 80a0730:	f000 fa1c 	bl	80a0b6c <_Z22__fetch_global_Serial1v>
 80a0734:	6803      	ldr	r3, [r0, #0]
 80a0736:	691b      	ldr	r3, [r3, #16]
 80a0738:	4798      	blx	r3
 80a073a:	2800      	cmp	r0, #0
 80a073c:	dc10      	bgt.n	80a0760 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a073e:	4b0d      	ldr	r3, [pc, #52]	; (80a0774 <serialEventRun+0x5c>)
 80a0740:	b10b      	cbz	r3, 80a0746 <serialEventRun+0x2e>
 80a0742:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a0746:	4b0c      	ldr	r3, [pc, #48]	; (80a0778 <serialEventRun+0x60>)
 80a0748:	b17b      	cbz	r3, 80a076a <serialEventRun+0x52>
 80a074a:	f000 f98d 	bl	80a0a68 <_Z17_fetch_usbserial1v>
 80a074e:	6803      	ldr	r3, [r0, #0]
 80a0750:	691b      	ldr	r3, [r3, #16]
 80a0752:	4798      	blx	r3
 80a0754:	2800      	cmp	r0, #0
 80a0756:	dc06      	bgt.n	80a0766 <serialEventRun+0x4e>
 80a0758:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a075a:	f3af 8000 	nop.w
 80a075e:	e7e5      	b.n	80a072c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a0760:	f3af 8000 	nop.w
 80a0764:	e7eb      	b.n	80a073e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a0766:	f3af 8000 	nop.w
 80a076a:	bd08      	pop	{r3, pc}
	...

080a077c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a077c:	b508      	push	{r3, lr}
	serialEventRun();
 80a077e:	f7ff ffcb 	bl	80a0718 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0782:	f7ff fd3d 	bl	80a0200 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0786:	4b01      	ldr	r3, [pc, #4]	; (80a078c <_post_loop+0x10>)
 80a0788:	6018      	str	r0, [r3, #0]
 80a078a:	bd08      	pop	{r3, pc}
 80a078c:	20000524 	.word	0x20000524

080a0790 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a0790:	4802      	ldr	r0, [pc, #8]	; (80a079c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a0792:	4a03      	ldr	r2, [pc, #12]	; (80a07a0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a0794:	4903      	ldr	r1, [pc, #12]	; (80a07a4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a0796:	1a12      	subs	r2, r2, r0
 80a0798:	f000 bd50 	b.w	80a123c <memcpy>
 80a079c:	40024000 	.word	0x40024000
 80a07a0:	40024004 	.word	0x40024004
 80a07a4:	080a15b0 	.word	0x080a15b0

080a07a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a07a8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a07aa:	2300      	movs	r3, #0
 80a07ac:	9300      	str	r3, [sp, #0]
 80a07ae:	461a      	mov	r2, r3
 80a07b0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07b4:	f7ff fe00 	bl	80a03b8 <system_ctrl_set_result>
}
 80a07b8:	b003      	add	sp, #12
 80a07ba:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a07c0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a07c0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a07c2:	8843      	ldrh	r3, [r0, #2]
 80a07c4:	2b0a      	cmp	r3, #10
 80a07c6:	d008      	beq.n	80a07da <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a07c8:	2b50      	cmp	r3, #80	; 0x50
 80a07ca:	d109      	bne.n	80a07e0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a07cc:	4b09      	ldr	r3, [pc, #36]	; (80a07f4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a07ce:	681b      	ldr	r3, [r3, #0]
 80a07d0:	b13b      	cbz	r3, 80a07e2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a07d2:	b003      	add	sp, #12
 80a07d4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a07d8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a07da:	f7ff ffe5 	bl	80a07a8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a07de:	e006      	b.n	80a07ee <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a07e0:	2300      	movs	r3, #0
 80a07e2:	9300      	str	r3, [sp, #0]
 80a07e4:	461a      	mov	r2, r3
 80a07e6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a07ea:	f7ff fde5 	bl	80a03b8 <system_ctrl_set_result>
        break;
    }
}
 80a07ee:	b003      	add	sp, #12
 80a07f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a07f4:	200000a0 	.word	0x200000a0

080a07f8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a07f8:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a07fa:	4c10      	ldr	r4, [pc, #64]	; (80a083c <module_user_init_hook+0x44>)
 80a07fc:	4d10      	ldr	r5, [pc, #64]	; (80a0840 <module_user_init_hook+0x48>)
 80a07fe:	6823      	ldr	r3, [r4, #0]
 80a0800:	42ab      	cmp	r3, r5
 80a0802:	4b10      	ldr	r3, [pc, #64]	; (80a0844 <module_user_init_hook+0x4c>)
 80a0804:	bf0c      	ite	eq
 80a0806:	2201      	moveq	r2, #1
 80a0808:	2200      	movne	r2, #0
 80a080a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a080c:	d002      	beq.n	80a0814 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a080e:	f7ff ffbf 	bl	80a0790 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a0812:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a0814:	f7ff fcec 	bl	80a01f0 <HAL_RNG_GetRandomNumber>
 80a0818:	4604      	mov	r4, r0
    srand(seed);
 80a081a:	f000 fd23 	bl	80a1264 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a081e:	4b0a      	ldr	r3, [pc, #40]	; (80a0848 <module_user_init_hook+0x50>)
 80a0820:	b113      	cbz	r3, 80a0828 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a0822:	4620      	mov	r0, r4
 80a0824:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a0828:	2100      	movs	r1, #0
 80a082a:	4807      	ldr	r0, [pc, #28]	; (80a0848 <module_user_init_hook+0x50>)
 80a082c:	f7ff fe2e 	bl	80a048c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a0830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a0834:	2100      	movs	r1, #0
 80a0836:	4805      	ldr	r0, [pc, #20]	; (80a084c <module_user_init_hook+0x54>)
 80a0838:	f7ff bdb4 	b.w	80a03a4 <system_ctrl_set_app_request_handler>
 80a083c:	40024000 	.word	0x40024000
 80a0840:	9a271c1e 	.word	0x9a271c1e
 80a0844:	200000a4 	.word	0x200000a4
 80a0848:	00000000 	.word	0x00000000
 80a084c:	080a07c1 	.word	0x080a07c1

080a0850 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a0850:	4770      	bx	lr

080a0852 <_ZN9IPAddressD0Ev>:
 80a0852:	b510      	push	{r4, lr}
 80a0854:	4604      	mov	r4, r0
 80a0856:	2118      	movs	r1, #24
 80a0858:	f000 fb86 	bl	80a0f68 <_ZdlPvj>
 80a085c:	4620      	mov	r0, r4
 80a085e:	bd10      	pop	{r4, pc}

080a0860 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a0860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0862:	460f      	mov	r7, r1
 80a0864:	f100 0608 	add.w	r6, r0, #8
 80a0868:	1d05      	adds	r5, r0, #4
 80a086a:	2400      	movs	r4, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a086c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a0870:	220a      	movs	r2, #10
 80a0872:	4638      	mov	r0, r7
 80a0874:	f7ff fefa 	bl	80a066c <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a0878:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a087a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a087c:	d007      	beq.n	80a088e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a087e:	2c00      	cmp	r4, #0
 80a0880:	d0f4      	beq.n	80a086c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a0882:	212e      	movs	r1, #46	; 0x2e
 80a0884:	4638      	mov	r0, r7
 80a0886:	f7ff feee 	bl	80a0666 <_ZN5Print5printEc>
 80a088a:	4404      	add	r4, r0
 80a088c:	e7ee      	b.n	80a086c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a088e:	4620      	mov	r0, r4
 80a0890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a0894 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a0894:	b510      	push	{r4, lr}
 80a0896:	4604      	mov	r4, r0
 80a0898:	4b04      	ldr	r3, [pc, #16]	; (80a08ac <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a089a:	2211      	movs	r2, #17
 80a089c:	f840 3b04 	str.w	r3, [r0], #4
 80a08a0:	2100      	movs	r1, #0
 80a08a2:	f000 fcd6 	bl	80a1252 <memset>
{
    clear();
}
 80a08a6:	4620      	mov	r0, r4
 80a08a8:	bd10      	pop	{r4, pc}
 80a08aa:	bf00      	nop
 80a08ac:	080a1414 	.word	0x080a1414

080a08b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a08b0:	4603      	mov	r3, r0
 80a08b2:	4a07      	ldr	r2, [pc, #28]	; (80a08d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a08b4:	b510      	push	{r4, lr}
 80a08b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a08ba:	f101 0210 	add.w	r2, r1, #16
 80a08be:	f851 4b04 	ldr.w	r4, [r1], #4
 80a08c2:	4291      	cmp	r1, r2
 80a08c4:	f843 4b04 	str.w	r4, [r3], #4
 80a08c8:	d1f9      	bne.n	80a08be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a08ca:	780a      	ldrb	r2, [r1, #0]
 80a08cc:	701a      	strb	r2, [r3, #0]
}
 80a08ce:	bd10      	pop	{r4, pc}
 80a08d0:	080a1414 	.word	0x080a1414

080a08d4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08d4:	4a02      	ldr	r2, [pc, #8]	; (80a08e0 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a08d6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a08d8:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a08da:	2204      	movs	r2, #4
 80a08dc:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a08de:	4770      	bx	lr
 80a08e0:	080a1414 	.word	0x080a1414

080a08e4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a08e4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a08e6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a08ea:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a08ee:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a08f2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a08f6:	2304      	movs	r3, #4
 80a08f8:	6041      	str	r1, [r0, #4]
 80a08fa:	7503      	strb	r3, [r0, #20]
 80a08fc:	bd10      	pop	{r4, pc}
	...

080a0900 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a0900:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0902:	4d04      	ldr	r5, [pc, #16]	; (80a0914 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a0904:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a0906:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a090a:	9500      	str	r5, [sp, #0]
 80a090c:	f7ff ffea 	bl	80a08e4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a0910:	b003      	add	sp, #12
 80a0912:	bd30      	pop	{r4, r5, pc}
 80a0914:	080a1414 	.word	0x080a1414

080a0918 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0918:	7441      	strb	r1, [r0, #17]
 80a091a:	4770      	bx	lr

080a091c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a091c:	4770      	bx	lr

080a091e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a091e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a0920:	2100      	movs	r1, #0
 80a0922:	7c00      	ldrb	r0, [r0, #16]
 80a0924:	f7ff fd16 	bl	80a0354 <HAL_USB_USART_Receive_Data>
}
 80a0928:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a092c:	bf28      	it	cs
 80a092e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0932:	bd08      	pop	{r3, pc}

080a0934 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a0934:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a0936:	2101      	movs	r1, #1
 80a0938:	7c00      	ldrb	r0, [r0, #16]
 80a093a:	f7ff fd0b 	bl	80a0354 <HAL_USB_USART_Receive_Data>
}
 80a093e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0942:	bf28      	it	cs
 80a0944:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0948:	bd08      	pop	{r3, pc}

080a094a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a094a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a094c:	7c00      	ldrb	r0, [r0, #16]
 80a094e:	f7ff fcf9 	bl	80a0344 <HAL_USB_USART_Available_Data_For_Write>
}
 80a0952:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0956:	bd08      	pop	{r3, pc}

080a0958 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a0958:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a095a:	7c00      	ldrb	r0, [r0, #16]
 80a095c:	f7ff fcea 	bl	80a0334 <HAL_USB_USART_Available_Data>
}
 80a0960:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0964:	bd08      	pop	{r3, pc}

080a0966 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a0966:	7c00      	ldrb	r0, [r0, #16]
 80a0968:	f7ff bd04 	b.w	80a0374 <HAL_USB_USART_Flush_Data>

080a096c <_ZN9USBSerialD0Ev>:
 80a096c:	b510      	push	{r4, lr}
 80a096e:	4604      	mov	r4, r0
 80a0970:	2114      	movs	r1, #20
 80a0972:	f000 faf9 	bl	80a0f68 <_ZdlPvj>
 80a0976:	4620      	mov	r0, r4
 80a0978:	bd10      	pop	{r4, pc}

080a097a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a097a:	b538      	push	{r3, r4, r5, lr}
 80a097c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a097e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a0980:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a0982:	f7ff fcdf 	bl	80a0344 <HAL_USB_USART_Available_Data_For_Write>
 80a0986:	2800      	cmp	r0, #0
 80a0988:	dc01      	bgt.n	80a098e <_ZN9USBSerial5writeEh+0x14>
 80a098a:	7c60      	ldrb	r0, [r4, #17]
 80a098c:	b128      	cbz	r0, 80a099a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a098e:	4629      	mov	r1, r5
 80a0990:	7c20      	ldrb	r0, [r4, #16]
 80a0992:	f7ff fce7 	bl	80a0364 <HAL_USB_USART_Send_Data>
 80a0996:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a099a:	bd38      	pop	{r3, r4, r5, pc}

080a099c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a099c:	b510      	push	{r4, lr}
 80a099e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a09a0:	2300      	movs	r3, #0
 80a09a2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a09a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a09a8:	60a3      	str	r3, [r4, #8]
 80a09aa:	4b05      	ldr	r3, [pc, #20]	; (80a09c0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a09ac:	4608      	mov	r0, r1
 80a09ae:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a09b0:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a09b2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a09b4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a09b6:	4611      	mov	r1, r2
 80a09b8:	f7ff fcb4 	bl	80a0324 <HAL_USB_USART_Init>
}
 80a09bc:	4620      	mov	r0, r4
 80a09be:	bd10      	pop	{r4, pc}
 80a09c0:	080a1428 	.word	0x080a1428

080a09c4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a09c4:	b510      	push	{r4, lr}
 80a09c6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a09c8:	2214      	movs	r2, #20
 80a09ca:	2100      	movs	r1, #0
 80a09cc:	f000 fc41 	bl	80a1252 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09d0:	4b05      	ldr	r3, [pc, #20]	; (80a09e8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a09d2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a09d4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a09d6:	4b05      	ldr	r3, [pc, #20]	; (80a09ec <_Z19acquireSerialBufferv+0x28>)
 80a09d8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a09da:	f240 1301 	movw	r3, #257	; 0x101
 80a09de:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a09e0:	2381      	movs	r3, #129	; 0x81
 80a09e2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a09e4:	bd10      	pop	{r4, pc}
 80a09e6:	bf00      	nop
 80a09e8:	2000012d 	.word	0x2000012d
 80a09ec:	200000ac 	.word	0x200000ac

080a09f0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a09f0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09f2:	4d0e      	ldr	r5, [pc, #56]	; (80a0a2c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a09f4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a09f6:	a801      	add	r0, sp, #4
 80a09f8:	f7ff ffe4 	bl	80a09c4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a09fc:	6829      	ldr	r1, [r5, #0]
 80a09fe:	f011 0401 	ands.w	r4, r1, #1
 80a0a02:	d110      	bne.n	80a0a26 <_Z16_fetch_usbserialv+0x36>
 80a0a04:	4628      	mov	r0, r5
 80a0a06:	f7ff fb4a 	bl	80a009e <__cxa_guard_acquire>
 80a0a0a:	b160      	cbz	r0, 80a0a26 <_Z16_fetch_usbserialv+0x36>
 80a0a0c:	aa01      	add	r2, sp, #4
 80a0a0e:	4621      	mov	r1, r4
 80a0a10:	4807      	ldr	r0, [pc, #28]	; (80a0a30 <_Z16_fetch_usbserialv+0x40>)
 80a0a12:	f7ff ffc3 	bl	80a099c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a16:	4628      	mov	r0, r5
 80a0a18:	f7ff fb46 	bl	80a00a8 <__cxa_guard_release>
 80a0a1c:	4a05      	ldr	r2, [pc, #20]	; (80a0a34 <_Z16_fetch_usbserialv+0x44>)
 80a0a1e:	4906      	ldr	r1, [pc, #24]	; (80a0a38 <_Z16_fetch_usbserialv+0x48>)
 80a0a20:	4803      	ldr	r0, [pc, #12]	; (80a0a30 <_Z16_fetch_usbserialv+0x40>)
 80a0a22:	f000 fa93 	bl	80a0f4c <__aeabi_atexit>
	return _usbserial;
}
 80a0a26:	4802      	ldr	r0, [pc, #8]	; (80a0a30 <_Z16_fetch_usbserialv+0x40>)
 80a0a28:	b007      	add	sp, #28
 80a0a2a:	bd30      	pop	{r4, r5, pc}
 80a0a2c:	200000a8 	.word	0x200000a8
 80a0a30:	20000230 	.word	0x20000230
 80a0a34:	20000068 	.word	0x20000068
 80a0a38:	080a091d 	.word	0x080a091d

080a0a3c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a0a3c:	b510      	push	{r4, lr}
 80a0a3e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a0a40:	2214      	movs	r2, #20
 80a0a42:	2100      	movs	r1, #0
 80a0a44:	f000 fc05 	bl	80a1252 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a48:	4b05      	ldr	r3, [pc, #20]	; (80a0a60 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a0a4a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a0a4c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a0a4e:	4b05      	ldr	r3, [pc, #20]	; (80a0a64 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a0a50:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a0a52:	f240 1301 	movw	r3, #257	; 0x101
 80a0a56:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a0a58:	2381      	movs	r3, #129	; 0x81
 80a0a5a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a0a5c:	bd10      	pop	{r4, pc}
 80a0a5e:	bf00      	nop
 80a0a60:	200002e0 	.word	0x200002e0
 80a0a64:	20000248 	.word	0x20000248

080a0a68 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a0a68:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a6a:	4c0e      	ldr	r4, [pc, #56]	; (80a0aa4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a0a6c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a0a6e:	a801      	add	r0, sp, #4
 80a0a70:	f7ff ffe4 	bl	80a0a3c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a0a74:	6823      	ldr	r3, [r4, #0]
 80a0a76:	07db      	lsls	r3, r3, #31
 80a0a78:	d410      	bmi.n	80a0a9c <_Z17_fetch_usbserial1v+0x34>
 80a0a7a:	4620      	mov	r0, r4
 80a0a7c:	f7ff fb0f 	bl	80a009e <__cxa_guard_acquire>
 80a0a80:	b160      	cbz	r0, 80a0a9c <_Z17_fetch_usbserial1v+0x34>
 80a0a82:	aa01      	add	r2, sp, #4
 80a0a84:	2101      	movs	r1, #1
 80a0a86:	4808      	ldr	r0, [pc, #32]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a0a88:	f7ff ff88 	bl	80a099c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a0a8c:	4620      	mov	r0, r4
 80a0a8e:	f7ff fb0b 	bl	80a00a8 <__cxa_guard_release>
 80a0a92:	4a06      	ldr	r2, [pc, #24]	; (80a0aac <_Z17_fetch_usbserial1v+0x44>)
 80a0a94:	4906      	ldr	r1, [pc, #24]	; (80a0ab0 <_Z17_fetch_usbserial1v+0x48>)
 80a0a96:	4804      	ldr	r0, [pc, #16]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a0a98:	f000 fa58 	bl	80a0f4c <__aeabi_atexit>
  return _usbserial1;
}
 80a0a9c:	4802      	ldr	r0, [pc, #8]	; (80a0aa8 <_Z17_fetch_usbserial1v+0x40>)
 80a0a9e:	b006      	add	sp, #24
 80a0aa0:	bd10      	pop	{r4, pc}
 80a0aa2:	bf00      	nop
 80a0aa4:	20000244 	.word	0x20000244
 80a0aa8:	200002cc 	.word	0x200002cc
 80a0aac:	20000068 	.word	0x20000068
 80a0ab0:	080a091d 	.word	0x080a091d

080a0ab4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a0ab4:	4770      	bx	lr

080a0ab6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a0ab6:	7441      	strb	r1, [r0, #17]
 80a0ab8:	4770      	bx	lr

080a0aba <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a0aba:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a0abc:	7c00      	ldrb	r0, [r0, #16]
 80a0abe:	f7ff fbef 	bl	80a02a0 <HAL_USART_Available_Data_For_Write>
}
 80a0ac2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ac6:	bd08      	pop	{r3, pc}

080a0ac8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a0ac8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a0aca:	7c00      	ldrb	r0, [r0, #16]
 80a0acc:	f7ff fbc0 	bl	80a0250 <HAL_USART_Available_Data>
}
 80a0ad0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a0ad4:	bd08      	pop	{r3, pc}

080a0ad6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a0ad6:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a0ad8:	7c00      	ldrb	r0, [r0, #16]
 80a0ada:	f7ff fbc9 	bl	80a0270 <HAL_USART_Peek_Data>
}
 80a0ade:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0ae2:	bf28      	it	cs
 80a0ae4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0ae8:	bd08      	pop	{r3, pc}

080a0aea <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a0aea:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a0aec:	7c00      	ldrb	r0, [r0, #16]
 80a0aee:	f7ff fbb7 	bl	80a0260 <HAL_USART_Read_Data>
}
 80a0af2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a0af6:	bf28      	it	cs
 80a0af8:	f04f 30ff 	movcs.w	r0, #4294967295
 80a0afc:	bd08      	pop	{r3, pc}

080a0afe <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a0afe:	7c00      	ldrb	r0, [r0, #16]
 80a0b00:	f7ff bbbe 	b.w	80a0280 <HAL_USART_Flush_Data>

080a0b04 <_ZN11USARTSerialD0Ev>:
 80a0b04:	b510      	push	{r4, lr}
 80a0b06:	4604      	mov	r4, r0
 80a0b08:	2114      	movs	r1, #20
 80a0b0a:	f000 fa2d 	bl	80a0f68 <_ZdlPvj>
 80a0b0e:	4620      	mov	r0, r4
 80a0b10:	bd10      	pop	{r4, pc}

080a0b12 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b12:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b14:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a0b16:	4604      	mov	r4, r0
 80a0b18:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a0b1a:	b925      	cbnz	r5, 80a0b26 <_ZN11USARTSerial5writeEh+0x14>
 80a0b1c:	7c00      	ldrb	r0, [r0, #16]
 80a0b1e:	f7ff fbbf 	bl	80a02a0 <HAL_USART_Available_Data_For_Write>
 80a0b22:	2800      	cmp	r0, #0
 80a0b24:	dd05      	ble.n	80a0b32 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b26:	4631      	mov	r1, r6
 80a0b28:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a0b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a0b2e:	f7ff bb87 	b.w	80a0240 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a0b32:	4628      	mov	r0, r5
 80a0b34:	bd70      	pop	{r4, r5, r6, pc}
	...

080a0b38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b38:	b510      	push	{r4, lr}
 80a0b3a:	4604      	mov	r4, r0
 80a0b3c:	4608      	mov	r0, r1
 80a0b3e:	4611      	mov	r1, r2
 80a0b40:	2200      	movs	r2, #0
 80a0b42:	6062      	str	r2, [r4, #4]
 80a0b44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a0b48:	60a2      	str	r2, [r4, #8]
 80a0b4a:	4a05      	ldr	r2, [pc, #20]	; (80a0b60 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a0b4c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a0b4e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a0b50:	2201      	movs	r2, #1
 80a0b52:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a0b54:	461a      	mov	r2, r3
 80a0b56:	f7ff fb6b 	bl	80a0230 <HAL_USART_Init>
}
 80a0b5a:	4620      	mov	r0, r4
 80a0b5c:	bd10      	pop	{r4, pc}
 80a0b5e:	bf00      	nop
 80a0b60:	080a1458 	.word	0x080a1458

080a0b64 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a0b64:	7c00      	ldrb	r0, [r0, #16]
 80a0b66:	f7ff bb93 	b.w	80a0290 <HAL_USART_Is_Enabled>
	...

080a0b6c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a0b6c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a0b6e:	4d0c      	ldr	r5, [pc, #48]	; (80a0ba0 <_Z22__fetch_global_Serial1v+0x34>)
 80a0b70:	6829      	ldr	r1, [r5, #0]
 80a0b72:	f011 0401 	ands.w	r4, r1, #1
 80a0b76:	d111      	bne.n	80a0b9c <_Z22__fetch_global_Serial1v+0x30>
 80a0b78:	4628      	mov	r0, r5
 80a0b7a:	f7ff fa90 	bl	80a009e <__cxa_guard_acquire>
 80a0b7e:	b168      	cbz	r0, 80a0b9c <_Z22__fetch_global_Serial1v+0x30>
 80a0b80:	4a08      	ldr	r2, [pc, #32]	; (80a0ba4 <_Z22__fetch_global_Serial1v+0x38>)
 80a0b82:	4621      	mov	r1, r4
 80a0b84:	4b08      	ldr	r3, [pc, #32]	; (80a0ba8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a0b86:	4809      	ldr	r0, [pc, #36]	; (80a0bac <_Z22__fetch_global_Serial1v+0x40>)
 80a0b88:	f7ff ffd6 	bl	80a0b38 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a0b8c:	4628      	mov	r0, r5
 80a0b8e:	f7ff fa8b 	bl	80a00a8 <__cxa_guard_release>
 80a0b92:	4a07      	ldr	r2, [pc, #28]	; (80a0bb0 <_Z22__fetch_global_Serial1v+0x44>)
 80a0b94:	4907      	ldr	r1, [pc, #28]	; (80a0bb4 <_Z22__fetch_global_Serial1v+0x48>)
 80a0b96:	4805      	ldr	r0, [pc, #20]	; (80a0bac <_Z22__fetch_global_Serial1v+0x40>)
 80a0b98:	f000 f9d8 	bl	80a0f4c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a0b9c:	4803      	ldr	r0, [pc, #12]	; (80a0bac <_Z22__fetch_global_Serial1v+0x40>)
 80a0b9e:	bd38      	pop	{r3, r4, r5, pc}
 80a0ba0:	2000047c 	.word	0x2000047c
 80a0ba4:	20000480 	.word	0x20000480
 80a0ba8:	200003f8 	.word	0x200003f8
 80a0bac:	200003e4 	.word	0x200003e4
 80a0bb0:	20000068 	.word	0x20000068
 80a0bb4:	080a0ab5 	.word	0x080a0ab5

080a0bb8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a0bb8:	4770      	bx	lr

080a0bba <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a0bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0bbc:	4606      	mov	r6, r0
 80a0bbe:	4615      	mov	r5, r2
 80a0bc0:	460c      	mov	r4, r1
 80a0bc2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bc4:	42bc      	cmp	r4, r7
 80a0bc6:	d006      	beq.n	80a0bd6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a0bc8:	6833      	ldr	r3, [r6, #0]
 80a0bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a0bce:	689b      	ldr	r3, [r3, #8]
 80a0bd0:	4630      	mov	r0, r6
 80a0bd2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a0bd4:	e7f6      	b.n	80a0bc4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a0bd6:	4628      	mov	r0, r5
 80a0bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0bda <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a0bda:	2200      	movs	r2, #0
 80a0bdc:	7c00      	ldrb	r0, [r0, #16]
 80a0bde:	f7ff bb67 	b.w	80a02b0 <HAL_I2C_Write_Data>

080a0be2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a0be2:	2100      	movs	r1, #0
 80a0be4:	7c00      	ldrb	r0, [r0, #16]
 80a0be6:	f7ff bb6b 	b.w	80a02c0 <HAL_I2C_Available_Data>

080a0bea <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a0bea:	2100      	movs	r1, #0
 80a0bec:	7c00      	ldrb	r0, [r0, #16]
 80a0bee:	f7ff bb6f 	b.w	80a02d0 <HAL_I2C_Read_Data>

080a0bf2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a0bf2:	2100      	movs	r1, #0
 80a0bf4:	7c00      	ldrb	r0, [r0, #16]
 80a0bf6:	f7ff bb73 	b.w	80a02e0 <HAL_I2C_Peek_Data>

080a0bfa <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a0bfa:	2100      	movs	r1, #0
 80a0bfc:	7c00      	ldrb	r0, [r0, #16]
 80a0bfe:	f7ff bb77 	b.w	80a02f0 <HAL_I2C_Flush_Data>

080a0c02 <_ZN7TwoWireD0Ev>:
 80a0c02:	b510      	push	{r4, lr}
 80a0c04:	4604      	mov	r4, r0
 80a0c06:	2114      	movs	r1, #20
 80a0c08:	f000 f9ae 	bl	80a0f68 <_ZdlPvj>
 80a0c0c:	4620      	mov	r0, r4
 80a0c0e:	bd10      	pop	{r4, pc}

080a0c10 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0c10:	b510      	push	{r4, lr}
 80a0c12:	4604      	mov	r4, r0
 80a0c14:	2300      	movs	r3, #0
 80a0c16:	6063      	str	r3, [r4, #4]
 80a0c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a0c1c:	60a3      	str	r3, [r4, #8]
 80a0c1e:	4b04      	ldr	r3, [pc, #16]	; (80a0c30 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a0c20:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a0c22:	4608      	mov	r0, r1
 80a0c24:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a0c26:	4611      	mov	r1, r2
 80a0c28:	f7ff fb72 	bl	80a0310 <HAL_I2C_Init>
}
 80a0c2c:	4620      	mov	r0, r4
 80a0c2e:	bd10      	pop	{r4, pc}
 80a0c30:	080a1488 	.word	0x080a1488

080a0c34 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a0c34:	2100      	movs	r1, #0
 80a0c36:	7c00      	ldrb	r0, [r0, #16]
 80a0c38:	f7ff bb62 	b.w	80a0300 <HAL_I2C_Is_Enabled>

080a0c3c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a0c3c:	2200      	movs	r2, #0
 80a0c3e:	4611      	mov	r1, r2
 80a0c40:	6840      	ldr	r0, [r0, #4]
 80a0c42:	f7ff bbdb 	b.w	80a03fc <network_ready>

080a0c46 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a0c48:	4616      	mov	r6, r2
 80a0c4a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a0c4c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a0c4e:	460f      	mov	r7, r1
 80a0c50:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a0c52:	2100      	movs	r1, #0
 80a0c54:	a803      	add	r0, sp, #12
 80a0c56:	f000 fafc 	bl	80a1252 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0c5a:	4630      	mov	r0, r6
 80a0c5c:	f000 fb2a 	bl	80a12b4 <strlen>
 80a0c60:	2500      	movs	r5, #0
 80a0c62:	9500      	str	r5, [sp, #0]
 80a0c64:	b281      	uxth	r1, r0
 80a0c66:	687b      	ldr	r3, [r7, #4]
 80a0c68:	aa03      	add	r2, sp, #12
 80a0c6a:	4630      	mov	r0, r6
 80a0c6c:	f7ff fb8a 	bl	80a0384 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0c70:	b120      	cbz	r0, 80a0c7c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a0c72:	4629      	mov	r1, r5
 80a0c74:	4620      	mov	r0, r4
 80a0c76:	f7ff fe2d 	bl	80a08d4 <_ZN9IPAddressC1Em>
 80a0c7a:	e003      	b.n	80a0c84 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a0c7c:	a903      	add	r1, sp, #12
 80a0c7e:	4620      	mov	r0, r4
 80a0c80:	f7ff fe16 	bl	80a08b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	b009      	add	sp, #36	; 0x24
 80a0c88:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0c8a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a0c8a:	2200      	movs	r2, #0
 80a0c8c:	4611      	mov	r1, r2
 80a0c8e:	6840      	ldr	r0, [r0, #4]
 80a0c90:	f7ff bbd4 	b.w	80a043c <network_listening>

080a0c94 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a0c94:	2200      	movs	r2, #0
 80a0c96:	4611      	mov	r1, r2
 80a0c98:	6840      	ldr	r0, [r0, #4]
 80a0c9a:	f7ff bbdf 	b.w	80a045c <network_get_listen_timeout>

080a0c9e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a0c9e:	2200      	movs	r2, #0
 80a0ca0:	6840      	ldr	r0, [r0, #4]
 80a0ca2:	f7ff bbd3 	b.w	80a044c <network_set_listen_timeout>

080a0ca6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a0ca6:	2200      	movs	r2, #0
 80a0ca8:	f081 0101 	eor.w	r1, r1, #1
 80a0cac:	6840      	ldr	r0, [r0, #4]
 80a0cae:	f7ff bbbd 	b.w	80a042c <network_listen>

080a0cb2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a0cb2:	2300      	movs	r3, #0
 80a0cb4:	461a      	mov	r2, r3
 80a0cb6:	4619      	mov	r1, r3
 80a0cb8:	6840      	ldr	r0, [r0, #4]
 80a0cba:	f7ff bbaf 	b.w	80a041c <network_off>

080a0cbe <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a0cbe:	2200      	movs	r2, #0
 80a0cc0:	4611      	mov	r1, r2
 80a0cc2:	6840      	ldr	r0, [r0, #4]
 80a0cc4:	f7ff bb8a 	b.w	80a03dc <network_connecting>

080a0cc8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a0cc8:	2200      	movs	r2, #0
 80a0cca:	2102      	movs	r1, #2
 80a0ccc:	6840      	ldr	r0, [r0, #4]
 80a0cce:	f7ff bb8d 	b.w	80a03ec <network_disconnect>

080a0cd2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a0cd2:	2300      	movs	r3, #0
 80a0cd4:	461a      	mov	r2, r3
 80a0cd6:	6840      	ldr	r0, [r0, #4]
 80a0cd8:	f7ff bb78 	b.w	80a03cc <network_connect>

080a0cdc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a0cdc:	4b02      	ldr	r3, [pc, #8]	; (80a0ce8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a0cde:	2204      	movs	r2, #4
 80a0ce0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a0ce2:	4a02      	ldr	r2, [pc, #8]	; (80a0cec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a0ce4:	601a      	str	r2, [r3, #0]
 80a0ce6:	4770      	bx	lr
 80a0ce8:	20000504 	.word	0x20000504
 80a0cec:	080a14b0 	.word	0x080a14b0

080a0cf0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a0cf0:	2300      	movs	r3, #0
 80a0cf2:	461a      	mov	r2, r3
 80a0cf4:	6840      	ldr	r0, [r0, #4]
 80a0cf6:	f7ff bb69 	b.w	80a03cc <network_connect>

080a0cfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a0cfa:	2200      	movs	r2, #0
 80a0cfc:	2102      	movs	r1, #2
 80a0cfe:	6840      	ldr	r0, [r0, #4]
 80a0d00:	f7ff bb74 	b.w	80a03ec <network_disconnect>

080a0d04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a0d04:	2200      	movs	r2, #0
 80a0d06:	4611      	mov	r1, r2
 80a0d08:	6840      	ldr	r0, [r0, #4]
 80a0d0a:	f7ff bb67 	b.w	80a03dc <network_connecting>

080a0d0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a0d0e:	2200      	movs	r2, #0
 80a0d10:	4611      	mov	r1, r2
 80a0d12:	6840      	ldr	r0, [r0, #4]
 80a0d14:	f7ff bb72 	b.w	80a03fc <network_ready>

080a0d18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a0d18:	2300      	movs	r3, #0
 80a0d1a:	461a      	mov	r2, r3
 80a0d1c:	4619      	mov	r1, r3
 80a0d1e:	6840      	ldr	r0, [r0, #4]
 80a0d20:	f7ff bb74 	b.w	80a040c <network_on>

080a0d24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a0d24:	2300      	movs	r3, #0
 80a0d26:	461a      	mov	r2, r3
 80a0d28:	4619      	mov	r1, r3
 80a0d2a:	6840      	ldr	r0, [r0, #4]
 80a0d2c:	f7ff bb76 	b.w	80a041c <network_off>

080a0d30 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a0d30:	2200      	movs	r2, #0
 80a0d32:	f081 0101 	eor.w	r1, r1, #1
 80a0d36:	6840      	ldr	r0, [r0, #4]
 80a0d38:	f7ff bb78 	b.w	80a042c <network_listen>

080a0d3c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a0d3c:	2200      	movs	r2, #0
 80a0d3e:	6840      	ldr	r0, [r0, #4]
 80a0d40:	f7ff bb84 	b.w	80a044c <network_set_listen_timeout>

080a0d44 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a0d44:	2200      	movs	r2, #0
 80a0d46:	4611      	mov	r1, r2
 80a0d48:	6840      	ldr	r0, [r0, #4]
 80a0d4a:	f7ff bb87 	b.w	80a045c <network_get_listen_timeout>

080a0d4e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a0d4e:	2200      	movs	r2, #0
 80a0d50:	4611      	mov	r1, r2
 80a0d52:	6840      	ldr	r0, [r0, #4]
 80a0d54:	f7ff bb72 	b.w	80a043c <network_listening>

080a0d58 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a0d58:	b570      	push	{r4, r5, r6, lr}
 80a0d5a:	4616      	mov	r6, r2
 80a0d5c:	b08e      	sub	sp, #56	; 0x38
 80a0d5e:	4604      	mov	r4, r0
    IPAddress addr;
 80a0d60:	a808      	add	r0, sp, #32
 80a0d62:	f7ff fd97 	bl	80a0894 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a0d66:	2211      	movs	r2, #17
 80a0d68:	2100      	movs	r1, #0
 80a0d6a:	a803      	add	r0, sp, #12
 80a0d6c:	f000 fa71 	bl	80a1252 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a0d70:	4630      	mov	r0, r6
 80a0d72:	f000 fa9f 	bl	80a12b4 <strlen>
 80a0d76:	2500      	movs	r5, #0
 80a0d78:	4b0a      	ldr	r3, [pc, #40]	; (80a0da4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a0d7a:	9500      	str	r5, [sp, #0]
 80a0d7c:	b281      	uxth	r1, r0
 80a0d7e:	685b      	ldr	r3, [r3, #4]
 80a0d80:	aa03      	add	r2, sp, #12
 80a0d82:	4630      	mov	r0, r6
 80a0d84:	f7ff fafe 	bl	80a0384 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a0d88:	b120      	cbz	r0, 80a0d94 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a0d8a:	4629      	mov	r1, r5
 80a0d8c:	4620      	mov	r0, r4
 80a0d8e:	f7ff fda1 	bl	80a08d4 <_ZN9IPAddressC1Em>
 80a0d92:	e003      	b.n	80a0d9c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a0d94:	a903      	add	r1, sp, #12
 80a0d96:	4620      	mov	r0, r4
 80a0d98:	f7ff fd8a 	bl	80a08b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a0d9c:	4620      	mov	r0, r4
 80a0d9e:	b00e      	add	sp, #56	; 0x38
 80a0da0:	bd70      	pop	{r4, r5, r6, pc}
 80a0da2:	bf00      	nop
 80a0da4:	20000504 	.word	0x20000504

080a0da8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a0da8:	4b02      	ldr	r3, [pc, #8]	; (80a0db4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a0daa:	4a03      	ldr	r2, [pc, #12]	; (80a0db8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a0dac:	601a      	str	r2, [r3, #0]
 80a0dae:	2200      	movs	r2, #0
 80a0db0:	605a      	str	r2, [r3, #4]
 80a0db2:	4770      	bx	lr
 80a0db4:	2000050c 	.word	0x2000050c
 80a0db8:	080a14e4 	.word	0x080a14e4

080a0dbc <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a0dbc:	b510      	push	{r4, lr}
 80a0dbe:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a0dc0:	6880      	ldr	r0, [r0, #8]
 80a0dc2:	b108      	cbz	r0, 80a0dc8 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a0dc4:	f7ff fa2c 	bl	80a0220 <os_mutex_recursive_destroy>
 80a0dc8:	4620      	mov	r0, r4
 80a0dca:	bd10      	pop	{r4, pc}

080a0dcc <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a0dcc:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a0dce:	4e1a      	ldr	r6, [pc, #104]	; (80a0e38 <pinAvailable+0x6c>)
 80a0dd0:	4604      	mov	r4, r0
 80a0dd2:	6831      	ldr	r1, [r6, #0]
 80a0dd4:	f011 0501 	ands.w	r5, r1, #1
 80a0dd8:	d10f      	bne.n	80a0dfa <pinAvailable+0x2e>
 80a0dda:	4630      	mov	r0, r6
 80a0ddc:	f7ff f95f 	bl	80a009e <__cxa_guard_acquire>
 80a0de0:	b158      	cbz	r0, 80a0dfa <pinAvailable+0x2e>
 80a0de2:	4629      	mov	r1, r5
 80a0de4:	4815      	ldr	r0, [pc, #84]	; (80a0e3c <pinAvailable+0x70>)
 80a0de6:	f7ff fb71 	bl	80a04cc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a0dea:	4630      	mov	r0, r6
 80a0dec:	f7ff f95c 	bl	80a00a8 <__cxa_guard_release>
 80a0df0:	4a13      	ldr	r2, [pc, #76]	; (80a0e40 <pinAvailable+0x74>)
 80a0df2:	4914      	ldr	r1, [pc, #80]	; (80a0e44 <pinAvailable+0x78>)
 80a0df4:	4811      	ldr	r0, [pc, #68]	; (80a0e3c <pinAvailable+0x70>)
 80a0df6:	f000 f8a9 	bl	80a0f4c <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a0dfa:	4810      	ldr	r0, [pc, #64]	; (80a0e3c <pinAvailable+0x70>)
 80a0dfc:	f7ff fb75 	bl	80a04ea <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a0e00:	b128      	cbz	r0, 80a0e0e <pinAvailable+0x42>
 80a0e02:	f1a4 030d 	sub.w	r3, r4, #13
 80a0e06:	2b02      	cmp	r3, #2
 80a0e08:	d801      	bhi.n	80a0e0e <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a0e0a:	2000      	movs	r0, #0
 80a0e0c:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a0e0e:	f000 f877 	bl	80a0f00 <_Z19__fetch_global_Wirev>
 80a0e12:	f7ff ff0f 	bl	80a0c34 <_ZN7TwoWire9isEnabledEv>
 80a0e16:	b108      	cbz	r0, 80a0e1c <pinAvailable+0x50>
 80a0e18:	2c01      	cmp	r4, #1
 80a0e1a:	d9f6      	bls.n	80a0e0a <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a0e1c:	f7ff fea6 	bl	80a0b6c <_Z22__fetch_global_Serial1v>
 80a0e20:	f7ff fea0 	bl	80a0b64 <_ZN11USARTSerial9isEnabledEv>
 80a0e24:	b118      	cbz	r0, 80a0e2e <pinAvailable+0x62>
 80a0e26:	f1a4 0312 	sub.w	r3, r4, #18
 80a0e2a:	2b01      	cmp	r3, #1
 80a0e2c:	d9ed      	bls.n	80a0e0a <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a0e2e:	2c17      	cmp	r4, #23
 80a0e30:	bf8c      	ite	hi
 80a0e32:	2000      	movhi	r0, #0
 80a0e34:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a0e36:	bd70      	pop	{r4, r5, r6, pc}
 80a0e38:	20000514 	.word	0x20000514
 80a0e3c:	20000518 	.word	0x20000518
 80a0e40:	20000068 	.word	0x20000068
 80a0e44:	080a0dbd 	.word	0x080a0dbd

080a0e48 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e48:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a0e4a:	b538      	push	{r3, r4, r5, lr}
 80a0e4c:	4604      	mov	r4, r0
 80a0e4e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a0e50:	d80a      	bhi.n	80a0e68 <pinMode+0x20>
 80a0e52:	29ff      	cmp	r1, #255	; 0xff
 80a0e54:	d008      	beq.n	80a0e68 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e56:	f7ff ffb9 	bl	80a0dcc <pinAvailable>
 80a0e5a:	b128      	cbz	r0, 80a0e68 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e5c:	4629      	mov	r1, r5
 80a0e5e:	4620      	mov	r0, r4
}
 80a0e60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a0e64:	f7ff b99c 	b.w	80a01a0 <HAL_Pin_Mode>
 80a0e68:	bd38      	pop	{r3, r4, r5, pc}

080a0e6a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a0e6a:	b538      	push	{r3, r4, r5, lr}
 80a0e6c:	4604      	mov	r4, r0
 80a0e6e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a0e70:	f7ff f99e 	bl	80a01b0 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a0e74:	28ff      	cmp	r0, #255	; 0xff
 80a0e76:	d010      	beq.n	80a0e9a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a0e78:	2806      	cmp	r0, #6
 80a0e7a:	d804      	bhi.n	80a0e86 <digitalWrite+0x1c>
 80a0e7c:	234d      	movs	r3, #77	; 0x4d
 80a0e7e:	fa23 f000 	lsr.w	r0, r3, r0
 80a0e82:	07c3      	lsls	r3, r0, #31
 80a0e84:	d409      	bmi.n	80a0e9a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a0e86:	4620      	mov	r0, r4
 80a0e88:	f7ff ffa0 	bl	80a0dcc <pinAvailable>
 80a0e8c:	b128      	cbz	r0, 80a0e9a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e8e:	4629      	mov	r1, r5
 80a0e90:	4620      	mov	r0, r4
}
 80a0e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a0e96:	f7ff b993 	b.w	80a01c0 <HAL_GPIO_Write>
 80a0e9a:	bd38      	pop	{r3, r4, r5, pc}

080a0e9c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a0e9c:	b513      	push	{r0, r1, r4, lr}
 80a0e9e:	4c08      	ldr	r4, [pc, #32]	; (80a0ec0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a0ea0:	2300      	movs	r3, #0
 80a0ea2:	461a      	mov	r2, r3
 80a0ea4:	4619      	mov	r1, r3
 80a0ea6:	9300      	str	r3, [sp, #0]
 80a0ea8:	4620      	mov	r0, r4
 80a0eaa:	f7ff fd29 	bl	80a0900 <_ZN9IPAddressC1Ehhhh>
 80a0eae:	4620      	mov	r0, r4
 80a0eb0:	4a04      	ldr	r2, [pc, #16]	; (80a0ec4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a0eb2:	4905      	ldr	r1, [pc, #20]	; (80a0ec8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a0eb4:	b002      	add	sp, #8
 80a0eb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a0eba:	f000 b847 	b.w	80a0f4c <__aeabi_atexit>
 80a0ebe:	bf00      	nop
 80a0ec0:	20000528 	.word	0x20000528
 80a0ec4:	20000068 	.word	0x20000068
 80a0ec8:	080a0851 	.word	0x080a0851

080a0ecc <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a0ecc:	b570      	push	{r4, r5, r6, lr}
 80a0ece:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ed0:	2514      	movs	r5, #20
 80a0ed2:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ed4:	4e09      	ldr	r6, [pc, #36]	; (80a0efc <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ed6:	2100      	movs	r1, #0
 80a0ed8:	f000 f9bb 	bl	80a1252 <memset>
 80a0edc:	8025      	strh	r5, [r4, #0]
 80a0ede:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ee0:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ee2:	60a5      	str	r5, [r4, #8]
 80a0ee4:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ee6:	4628      	mov	r0, r5
 80a0ee8:	f000 f840 	bl	80a0f6c <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0eec:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0eee:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a0ef0:	4628      	mov	r0, r5
 80a0ef2:	f000 f83b 	bl	80a0f6c <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a0ef6:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a0ef8:	4620      	mov	r0, r4
 80a0efa:	bd70      	pop	{r4, r5, r6, pc}
 80a0efc:	080a1510 	.word	0x080a1510

080a0f00 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0f00:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f02:	4d0e      	ldr	r5, [pc, #56]	; (80a0f3c <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a0f04:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a0f06:	6829      	ldr	r1, [r5, #0]
 80a0f08:	f011 0401 	ands.w	r4, r1, #1
 80a0f0c:	d113      	bne.n	80a0f36 <_Z19__fetch_global_Wirev+0x36>
 80a0f0e:	4628      	mov	r0, r5
 80a0f10:	f7ff f8c5 	bl	80a009e <__cxa_guard_acquire>
 80a0f14:	b178      	cbz	r0, 80a0f36 <_Z19__fetch_global_Wirev+0x36>
 80a0f16:	a801      	add	r0, sp, #4
 80a0f18:	f7ff ffd8 	bl	80a0ecc <_Z17acquireWireBufferv>
 80a0f1c:	aa01      	add	r2, sp, #4
 80a0f1e:	4621      	mov	r1, r4
 80a0f20:	4807      	ldr	r0, [pc, #28]	; (80a0f40 <_Z19__fetch_global_Wirev+0x40>)
 80a0f22:	f7ff fe75 	bl	80a0c10 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a0f26:	4628      	mov	r0, r5
 80a0f28:	f7ff f8be 	bl	80a00a8 <__cxa_guard_release>
 80a0f2c:	4a05      	ldr	r2, [pc, #20]	; (80a0f44 <_Z19__fetch_global_Wirev+0x44>)
 80a0f2e:	4906      	ldr	r1, [pc, #24]	; (80a0f48 <_Z19__fetch_global_Wirev+0x48>)
 80a0f30:	4803      	ldr	r0, [pc, #12]	; (80a0f40 <_Z19__fetch_global_Wirev+0x40>)
 80a0f32:	f000 f80b 	bl	80a0f4c <__aeabi_atexit>
	return wire;
}
 80a0f36:	4802      	ldr	r0, [pc, #8]	; (80a0f40 <_Z19__fetch_global_Wirev+0x40>)
 80a0f38:	b007      	add	sp, #28
 80a0f3a:	bd30      	pop	{r4, r5, pc}
 80a0f3c:	20000540 	.word	0x20000540
 80a0f40:	20000544 	.word	0x20000544
 80a0f44:	20000068 	.word	0x20000068
 80a0f48:	080a0bb9 	.word	0x080a0bb9

080a0f4c <__aeabi_atexit>:
 80a0f4c:	460b      	mov	r3, r1
 80a0f4e:	4601      	mov	r1, r0
 80a0f50:	4618      	mov	r0, r3
 80a0f52:	f000 b965 	b.w	80a1220 <__cxa_atexit>
	...

080a0f58 <_ZSt15get_new_handlerv>:
 80a0f58:	4b02      	ldr	r3, [pc, #8]	; (80a0f64 <_ZSt15get_new_handlerv+0xc>)
 80a0f5a:	6818      	ldr	r0, [r3, #0]
 80a0f5c:	f3bf 8f5f 	dmb	sy
 80a0f60:	4770      	bx	lr
 80a0f62:	bf00      	nop
 80a0f64:	20000558 	.word	0x20000558

080a0f68 <_ZdlPvj>:
 80a0f68:	f7ff b897 	b.w	80a009a <_ZdlPv>

080a0f6c <_ZnajRKSt9nothrow_t>:
 80a0f6c:	f000 b800 	b.w	80a0f70 <_ZnwjRKSt9nothrow_t>

080a0f70 <_ZnwjRKSt9nothrow_t>:
 80a0f70:	b510      	push	{r4, lr}
 80a0f72:	2800      	cmp	r0, #0
 80a0f74:	bf14      	ite	ne
 80a0f76:	4604      	movne	r4, r0
 80a0f78:	2401      	moveq	r4, #1
 80a0f7a:	4620      	mov	r0, r4
 80a0f7c:	f7ff fa8e 	bl	80a049c <malloc>
 80a0f80:	b920      	cbnz	r0, 80a0f8c <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f82:	f7ff ffe9 	bl	80a0f58 <_ZSt15get_new_handlerv>
 80a0f86:	b108      	cbz	r0, 80a0f8c <_ZnwjRKSt9nothrow_t+0x1c>
 80a0f88:	4780      	blx	r0
 80a0f8a:	e7f6      	b.n	80a0f7a <_ZnwjRKSt9nothrow_t+0xa>
 80a0f8c:	bd10      	pop	{r4, pc}
	...

080a0f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a0f90:	4b18      	ldr	r3, [pc, #96]	; (80a0ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a0f92:	681a      	ldr	r2, [r3, #0]
 80a0f94:	07d1      	lsls	r1, r2, #31
 80a0f96:	bf5c      	itt	pl
 80a0f98:	2201      	movpl	r2, #1
 80a0f9a:	601a      	strpl	r2, [r3, #0]
 80a0f9c:	4b16      	ldr	r3, [pc, #88]	; (80a0ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a0f9e:	681a      	ldr	r2, [r3, #0]
 80a0fa0:	07d2      	lsls	r2, r2, #31
 80a0fa2:	bf5c      	itt	pl
 80a0fa4:	2201      	movpl	r2, #1
 80a0fa6:	601a      	strpl	r2, [r3, #0]
 80a0fa8:	4b14      	ldr	r3, [pc, #80]	; (80a0ffc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a0faa:	681a      	ldr	r2, [r3, #0]
 80a0fac:	07d0      	lsls	r0, r2, #31
 80a0fae:	bf5c      	itt	pl
 80a0fb0:	2201      	movpl	r2, #1
 80a0fb2:	601a      	strpl	r2, [r3, #0]
 80a0fb4:	4b12      	ldr	r3, [pc, #72]	; (80a1000 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a0fb6:	681a      	ldr	r2, [r3, #0]
 80a0fb8:	07d1      	lsls	r1, r2, #31
 80a0fba:	bf5c      	itt	pl
 80a0fbc:	2201      	movpl	r2, #1
 80a0fbe:	601a      	strpl	r2, [r3, #0]
 80a0fc0:	4b10      	ldr	r3, [pc, #64]	; (80a1004 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a0fc2:	681a      	ldr	r2, [r3, #0]
 80a0fc4:	07d2      	lsls	r2, r2, #31
 80a0fc6:	bf5c      	itt	pl
 80a0fc8:	2201      	movpl	r2, #1
 80a0fca:	601a      	strpl	r2, [r3, #0]
 80a0fcc:	4b0e      	ldr	r3, [pc, #56]	; (80a1008 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a0fce:	681a      	ldr	r2, [r3, #0]
 80a0fd0:	07d0      	lsls	r0, r2, #31
 80a0fd2:	bf5c      	itt	pl
 80a0fd4:	2201      	movpl	r2, #1
 80a0fd6:	601a      	strpl	r2, [r3, #0]
 80a0fd8:	4b0c      	ldr	r3, [pc, #48]	; (80a100c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a0fda:	681a      	ldr	r2, [r3, #0]
 80a0fdc:	07d1      	lsls	r1, r2, #31
 80a0fde:	bf5c      	itt	pl
 80a0fe0:	2201      	movpl	r2, #1
 80a0fe2:	601a      	strpl	r2, [r3, #0]
 80a0fe4:	4b0a      	ldr	r3, [pc, #40]	; (80a1010 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a0fe6:	681a      	ldr	r2, [r3, #0]
 80a0fe8:	07d2      	lsls	r2, r2, #31
 80a0fea:	bf5c      	itt	pl
 80a0fec:	2201      	movpl	r2, #1
 80a0fee:	601a      	strpl	r2, [r3, #0]
 80a0ff0:	4770      	bx	lr
 80a0ff2:	bf00      	nop
 80a0ff4:	20000578 	.word	0x20000578
 80a0ff8:	20000574 	.word	0x20000574
 80a0ffc:	20000570 	.word	0x20000570
 80a1000:	2000056c 	.word	0x2000056c
 80a1004:	20000568 	.word	0x20000568
 80a1008:	20000564 	.word	0x20000564
 80a100c:	20000560 	.word	0x20000560
 80a1010:	2000055c 	.word	0x2000055c

080a1014 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1014:	4b24      	ldr	r3, [pc, #144]	; (80a10a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1016:	681a      	ldr	r2, [r3, #0]
 80a1018:	07d0      	lsls	r0, r2, #31
 80a101a:	bf5c      	itt	pl
 80a101c:	2201      	movpl	r2, #1
 80a101e:	601a      	strpl	r2, [r3, #0]
 80a1020:	4b22      	ldr	r3, [pc, #136]	; (80a10ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1022:	681a      	ldr	r2, [r3, #0]
 80a1024:	07d1      	lsls	r1, r2, #31
 80a1026:	bf5c      	itt	pl
 80a1028:	2201      	movpl	r2, #1
 80a102a:	601a      	strpl	r2, [r3, #0]
 80a102c:	4b20      	ldr	r3, [pc, #128]	; (80a10b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a102e:	681a      	ldr	r2, [r3, #0]
 80a1030:	07d2      	lsls	r2, r2, #31
 80a1032:	bf5c      	itt	pl
 80a1034:	2201      	movpl	r2, #1
 80a1036:	601a      	strpl	r2, [r3, #0]
 80a1038:	4b1e      	ldr	r3, [pc, #120]	; (80a10b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a103a:	681a      	ldr	r2, [r3, #0]
 80a103c:	07d0      	lsls	r0, r2, #31
 80a103e:	bf5c      	itt	pl
 80a1040:	2201      	movpl	r2, #1
 80a1042:	601a      	strpl	r2, [r3, #0]
 80a1044:	4b1c      	ldr	r3, [pc, #112]	; (80a10b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1046:	681a      	ldr	r2, [r3, #0]
 80a1048:	07d1      	lsls	r1, r2, #31
 80a104a:	bf5c      	itt	pl
 80a104c:	2201      	movpl	r2, #1
 80a104e:	601a      	strpl	r2, [r3, #0]
 80a1050:	4b1a      	ldr	r3, [pc, #104]	; (80a10bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1052:	681a      	ldr	r2, [r3, #0]
 80a1054:	07d2      	lsls	r2, r2, #31
 80a1056:	bf5c      	itt	pl
 80a1058:	2201      	movpl	r2, #1
 80a105a:	601a      	strpl	r2, [r3, #0]
 80a105c:	4b18      	ldr	r3, [pc, #96]	; (80a10c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a105e:	681a      	ldr	r2, [r3, #0]
 80a1060:	07d0      	lsls	r0, r2, #31
 80a1062:	bf5c      	itt	pl
 80a1064:	2201      	movpl	r2, #1
 80a1066:	601a      	strpl	r2, [r3, #0]
 80a1068:	4b16      	ldr	r3, [pc, #88]	; (80a10c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a106a:	681a      	ldr	r2, [r3, #0]
 80a106c:	07d1      	lsls	r1, r2, #31
 80a106e:	bf5c      	itt	pl
 80a1070:	2201      	movpl	r2, #1
 80a1072:	601a      	strpl	r2, [r3, #0]
 80a1074:	4b14      	ldr	r3, [pc, #80]	; (80a10c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1076:	681a      	ldr	r2, [r3, #0]
 80a1078:	07d2      	lsls	r2, r2, #31
 80a107a:	bf5c      	itt	pl
 80a107c:	2201      	movpl	r2, #1
 80a107e:	601a      	strpl	r2, [r3, #0]
 80a1080:	4b12      	ldr	r3, [pc, #72]	; (80a10cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1082:	681a      	ldr	r2, [r3, #0]
 80a1084:	07d0      	lsls	r0, r2, #31
 80a1086:	bf5c      	itt	pl
 80a1088:	2201      	movpl	r2, #1
 80a108a:	601a      	strpl	r2, [r3, #0]
 80a108c:	4b10      	ldr	r3, [pc, #64]	; (80a10d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a108e:	681a      	ldr	r2, [r3, #0]
 80a1090:	07d1      	lsls	r1, r2, #31
 80a1092:	bf5c      	itt	pl
 80a1094:	2201      	movpl	r2, #1
 80a1096:	601a      	strpl	r2, [r3, #0]
 80a1098:	4b0e      	ldr	r3, [pc, #56]	; (80a10d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a109a:	681a      	ldr	r2, [r3, #0]
 80a109c:	07d2      	lsls	r2, r2, #31
 80a109e:	bf5c      	itt	pl
 80a10a0:	2201      	movpl	r2, #1
 80a10a2:	601a      	strpl	r2, [r3, #0]
 80a10a4:	4770      	bx	lr
 80a10a6:	bf00      	nop
 80a10a8:	200005a8 	.word	0x200005a8
 80a10ac:	200005a4 	.word	0x200005a4
 80a10b0:	200005a0 	.word	0x200005a0
 80a10b4:	2000059c 	.word	0x2000059c
 80a10b8:	20000598 	.word	0x20000598
 80a10bc:	20000594 	.word	0x20000594
 80a10c0:	20000590 	.word	0x20000590
 80a10c4:	2000058c 	.word	0x2000058c
 80a10c8:	20000588 	.word	0x20000588
 80a10cc:	20000584 	.word	0x20000584
 80a10d0:	20000580 	.word	0x20000580
 80a10d4:	2000057c 	.word	0x2000057c

080a10d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a10d8:	4b24      	ldr	r3, [pc, #144]	; (80a116c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a10da:	681a      	ldr	r2, [r3, #0]
 80a10dc:	07d0      	lsls	r0, r2, #31
 80a10de:	bf5c      	itt	pl
 80a10e0:	2201      	movpl	r2, #1
 80a10e2:	601a      	strpl	r2, [r3, #0]
 80a10e4:	4b22      	ldr	r3, [pc, #136]	; (80a1170 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a10e6:	681a      	ldr	r2, [r3, #0]
 80a10e8:	07d1      	lsls	r1, r2, #31
 80a10ea:	bf5c      	itt	pl
 80a10ec:	2201      	movpl	r2, #1
 80a10ee:	601a      	strpl	r2, [r3, #0]
 80a10f0:	4b20      	ldr	r3, [pc, #128]	; (80a1174 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a10f2:	681a      	ldr	r2, [r3, #0]
 80a10f4:	07d2      	lsls	r2, r2, #31
 80a10f6:	bf5c      	itt	pl
 80a10f8:	2201      	movpl	r2, #1
 80a10fa:	601a      	strpl	r2, [r3, #0]
 80a10fc:	4b1e      	ldr	r3, [pc, #120]	; (80a1178 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a10fe:	681a      	ldr	r2, [r3, #0]
 80a1100:	07d0      	lsls	r0, r2, #31
 80a1102:	bf5c      	itt	pl
 80a1104:	2201      	movpl	r2, #1
 80a1106:	601a      	strpl	r2, [r3, #0]
 80a1108:	4b1c      	ldr	r3, [pc, #112]	; (80a117c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a110a:	681a      	ldr	r2, [r3, #0]
 80a110c:	07d1      	lsls	r1, r2, #31
 80a110e:	bf5c      	itt	pl
 80a1110:	2201      	movpl	r2, #1
 80a1112:	601a      	strpl	r2, [r3, #0]
 80a1114:	4b1a      	ldr	r3, [pc, #104]	; (80a1180 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1116:	681a      	ldr	r2, [r3, #0]
 80a1118:	07d2      	lsls	r2, r2, #31
 80a111a:	bf5c      	itt	pl
 80a111c:	2201      	movpl	r2, #1
 80a111e:	601a      	strpl	r2, [r3, #0]
 80a1120:	4b18      	ldr	r3, [pc, #96]	; (80a1184 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1122:	681a      	ldr	r2, [r3, #0]
 80a1124:	07d0      	lsls	r0, r2, #31
 80a1126:	bf5c      	itt	pl
 80a1128:	2201      	movpl	r2, #1
 80a112a:	601a      	strpl	r2, [r3, #0]
 80a112c:	4b16      	ldr	r3, [pc, #88]	; (80a1188 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a112e:	681a      	ldr	r2, [r3, #0]
 80a1130:	07d1      	lsls	r1, r2, #31
 80a1132:	bf5c      	itt	pl
 80a1134:	2201      	movpl	r2, #1
 80a1136:	601a      	strpl	r2, [r3, #0]
 80a1138:	4b14      	ldr	r3, [pc, #80]	; (80a118c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a113a:	681a      	ldr	r2, [r3, #0]
 80a113c:	07d2      	lsls	r2, r2, #31
 80a113e:	bf5c      	itt	pl
 80a1140:	2201      	movpl	r2, #1
 80a1142:	601a      	strpl	r2, [r3, #0]
 80a1144:	4b12      	ldr	r3, [pc, #72]	; (80a1190 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1146:	681a      	ldr	r2, [r3, #0]
 80a1148:	07d0      	lsls	r0, r2, #31
 80a114a:	bf5c      	itt	pl
 80a114c:	2201      	movpl	r2, #1
 80a114e:	601a      	strpl	r2, [r3, #0]
 80a1150:	4b10      	ldr	r3, [pc, #64]	; (80a1194 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1152:	681a      	ldr	r2, [r3, #0]
 80a1154:	07d1      	lsls	r1, r2, #31
 80a1156:	bf5c      	itt	pl
 80a1158:	2201      	movpl	r2, #1
 80a115a:	601a      	strpl	r2, [r3, #0]
 80a115c:	4b0e      	ldr	r3, [pc, #56]	; (80a1198 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a115e:	681a      	ldr	r2, [r3, #0]
 80a1160:	07d2      	lsls	r2, r2, #31
 80a1162:	bf5c      	itt	pl
 80a1164:	2201      	movpl	r2, #1
 80a1166:	601a      	strpl	r2, [r3, #0]
 80a1168:	4770      	bx	lr
 80a116a:	bf00      	nop
 80a116c:	200005d8 	.word	0x200005d8
 80a1170:	200005d4 	.word	0x200005d4
 80a1174:	200005d0 	.word	0x200005d0
 80a1178:	200005cc 	.word	0x200005cc
 80a117c:	200005c8 	.word	0x200005c8
 80a1180:	200005c4 	.word	0x200005c4
 80a1184:	200005c0 	.word	0x200005c0
 80a1188:	200005bc 	.word	0x200005bc
 80a118c:	200005b8 	.word	0x200005b8
 80a1190:	200005b4 	.word	0x200005b4
 80a1194:	200005b0 	.word	0x200005b0
 80a1198:	200005ac 	.word	0x200005ac

080a119c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a119c:	4b18      	ldr	r3, [pc, #96]	; (80a1200 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a119e:	681a      	ldr	r2, [r3, #0]
 80a11a0:	07d1      	lsls	r1, r2, #31
 80a11a2:	bf5c      	itt	pl
 80a11a4:	2201      	movpl	r2, #1
 80a11a6:	601a      	strpl	r2, [r3, #0]
 80a11a8:	4b16      	ldr	r3, [pc, #88]	; (80a1204 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a11aa:	681a      	ldr	r2, [r3, #0]
 80a11ac:	07d2      	lsls	r2, r2, #31
 80a11ae:	bf5c      	itt	pl
 80a11b0:	2201      	movpl	r2, #1
 80a11b2:	601a      	strpl	r2, [r3, #0]
 80a11b4:	4b14      	ldr	r3, [pc, #80]	; (80a1208 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a11b6:	681a      	ldr	r2, [r3, #0]
 80a11b8:	07d0      	lsls	r0, r2, #31
 80a11ba:	bf5c      	itt	pl
 80a11bc:	2201      	movpl	r2, #1
 80a11be:	601a      	strpl	r2, [r3, #0]
 80a11c0:	4b12      	ldr	r3, [pc, #72]	; (80a120c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a11c2:	681a      	ldr	r2, [r3, #0]
 80a11c4:	07d1      	lsls	r1, r2, #31
 80a11c6:	bf5c      	itt	pl
 80a11c8:	2201      	movpl	r2, #1
 80a11ca:	601a      	strpl	r2, [r3, #0]
 80a11cc:	4b10      	ldr	r3, [pc, #64]	; (80a1210 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a11ce:	681a      	ldr	r2, [r3, #0]
 80a11d0:	07d2      	lsls	r2, r2, #31
 80a11d2:	bf5c      	itt	pl
 80a11d4:	2201      	movpl	r2, #1
 80a11d6:	601a      	strpl	r2, [r3, #0]
 80a11d8:	4b0e      	ldr	r3, [pc, #56]	; (80a1214 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a11da:	681a      	ldr	r2, [r3, #0]
 80a11dc:	07d0      	lsls	r0, r2, #31
 80a11de:	bf5c      	itt	pl
 80a11e0:	2201      	movpl	r2, #1
 80a11e2:	601a      	strpl	r2, [r3, #0]
 80a11e4:	4b0c      	ldr	r3, [pc, #48]	; (80a1218 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a11e6:	681a      	ldr	r2, [r3, #0]
 80a11e8:	07d1      	lsls	r1, r2, #31
 80a11ea:	bf5c      	itt	pl
 80a11ec:	2201      	movpl	r2, #1
 80a11ee:	601a      	strpl	r2, [r3, #0]
 80a11f0:	4b0a      	ldr	r3, [pc, #40]	; (80a121c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a11f2:	681a      	ldr	r2, [r3, #0]
 80a11f4:	07d2      	lsls	r2, r2, #31
 80a11f6:	bf5c      	itt	pl
 80a11f8:	2201      	movpl	r2, #1
 80a11fa:	601a      	strpl	r2, [r3, #0]
 80a11fc:	4770      	bx	lr
 80a11fe:	bf00      	nop
 80a1200:	200005f8 	.word	0x200005f8
 80a1204:	200005f4 	.word	0x200005f4
 80a1208:	200005f0 	.word	0x200005f0
 80a120c:	200005ec 	.word	0x200005ec
 80a1210:	200005e8 	.word	0x200005e8
 80a1214:	200005e4 	.word	0x200005e4
 80a1218:	200005e0 	.word	0x200005e0
 80a121c:	200005dc 	.word	0x200005dc

080a1220 <__cxa_atexit>:
 80a1220:	b510      	push	{r4, lr}
 80a1222:	4c05      	ldr	r4, [pc, #20]	; (80a1238 <__cxa_atexit+0x18>)
 80a1224:	4613      	mov	r3, r2
 80a1226:	b12c      	cbz	r4, 80a1234 <__cxa_atexit+0x14>
 80a1228:	460a      	mov	r2, r1
 80a122a:	4601      	mov	r1, r0
 80a122c:	2002      	movs	r0, #2
 80a122e:	f3af 8000 	nop.w
 80a1232:	bd10      	pop	{r4, pc}
 80a1234:	4620      	mov	r0, r4
 80a1236:	bd10      	pop	{r4, pc}
 80a1238:	00000000 	.word	0x00000000

080a123c <memcpy>:
 80a123c:	b510      	push	{r4, lr}
 80a123e:	1e43      	subs	r3, r0, #1
 80a1240:	440a      	add	r2, r1
 80a1242:	4291      	cmp	r1, r2
 80a1244:	d004      	beq.n	80a1250 <memcpy+0x14>
 80a1246:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a124a:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a124e:	e7f8      	b.n	80a1242 <memcpy+0x6>
 80a1250:	bd10      	pop	{r4, pc}

080a1252 <memset>:
 80a1252:	4603      	mov	r3, r0
 80a1254:	4402      	add	r2, r0
 80a1256:	4293      	cmp	r3, r2
 80a1258:	d002      	beq.n	80a1260 <memset+0xe>
 80a125a:	f803 1b01 	strb.w	r1, [r3], #1
 80a125e:	e7fa      	b.n	80a1256 <memset+0x4>
 80a1260:	4770      	bx	lr
	...

080a1264 <srand>:
 80a1264:	b538      	push	{r3, r4, r5, lr}
 80a1266:	4b12      	ldr	r3, [pc, #72]	; (80a12b0 <srand+0x4c>)
 80a1268:	4605      	mov	r5, r0
 80a126a:	681c      	ldr	r4, [r3, #0]
 80a126c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a126e:	b9d3      	cbnz	r3, 80a12a6 <srand+0x42>
 80a1270:	2018      	movs	r0, #24
 80a1272:	f7ff f913 	bl	80a049c <malloc>
 80a1276:	f243 330e 	movw	r3, #13070	; 0x330e
 80a127a:	63a0      	str	r0, [r4, #56]	; 0x38
 80a127c:	8003      	strh	r3, [r0, #0]
 80a127e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a1282:	8043      	strh	r3, [r0, #2]
 80a1284:	f241 2334 	movw	r3, #4660	; 0x1234
 80a1288:	8083      	strh	r3, [r0, #4]
 80a128a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a128e:	80c3      	strh	r3, [r0, #6]
 80a1290:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a1294:	8103      	strh	r3, [r0, #8]
 80a1296:	2305      	movs	r3, #5
 80a1298:	8143      	strh	r3, [r0, #10]
 80a129a:	230b      	movs	r3, #11
 80a129c:	8183      	strh	r3, [r0, #12]
 80a129e:	2201      	movs	r2, #1
 80a12a0:	2300      	movs	r3, #0
 80a12a2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a12a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a12a8:	2200      	movs	r2, #0
 80a12aa:	611d      	str	r5, [r3, #16]
 80a12ac:	615a      	str	r2, [r3, #20]
 80a12ae:	bd38      	pop	{r3, r4, r5, pc}
 80a12b0:	20000064 	.word	0x20000064

080a12b4 <strlen>:
 80a12b4:	4603      	mov	r3, r0
 80a12b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a12ba:	2a00      	cmp	r2, #0
 80a12bc:	d1fb      	bne.n	80a12b6 <strlen+0x2>
 80a12be:	1a18      	subs	r0, r3, r0
 80a12c0:	3801      	subs	r0, #1
 80a12c2:	4770      	bx	lr

080a12c4 <dynalib_user>:
 80a12c4:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a12d4:	0000 0000 4e4f 4f00 4646 7000 6d75 5370     ....ON.OFF.pumpS
 80a12e4:	6174 7574 0073 7574 6e72 7550 706d 6e4f     tatus.turnPumpOn
 80a12f4:	7400 7275 506e 6d75 4f70 6666 6200 7561     .turnPumpOff.bau
 80a1304:	0064 6553 6972 6c61 5500 4253 6553 6972     d.Serial.USBSeri
 80a1314:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
 80a1324:	646d 6900 0064 6e68 0064 7473 6d72 6600     md.id.hnd.strm.f
 80a1334:	6c69 0074 766c 006c 6461 4864 6e61 6c64     ilt.lvl.addHandl
 80a1344:	7265 7200 6d65 766f 4865 6e61 6c64 7265     er.removeHandler
 80a1354:	6500 756e 486d 6e61 6c64 7265 0073 534a     .enumHandlers.JS
 80a1364:	4e4f 7453 6572 6d61 6f4c 4867 6e61 6c64     ONStreamLogHandl
 80a1374:	7265 6100 7070 2500 3130 7530 0020 205d     er.app.%010u .] 
 80a1384:	2500 0064 202c 2800 3a29 0020 5b20 6300     .%d., .(): . [.c
 80a1394:	646f 2065 203d 2500 0069 6564 6174 6c69     ode = .%i.detail
 80a13a4:	2073 203d 0d00 000a 6e6c 6600 006e 6f63     s = ....ln.fn.co
 80a13b4:	6564 6400 7465 6961 006c 6f6e 656e 7400     de.detail.none.t
 80a13c4:	6172 6563 6900 666e 006f 6177 6e72 6500     race.info.warn.e
 80a13d4:	7272 726f 7000 6e61 6369 6100 6c6c 5a00     rror.panic.all.Z
 80a13e4:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 80a13f4:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 80a1404:	7361 7463 6d69 0065                         asctime.

080a140c <_ZTV9IPAddress>:
	...
 80a1414:	0861 080a 0851 080a 0853 080a               a...Q...S...

080a1420 <_ZTV9USBSerial>:
	...
 80a1428:	091d 080a 096d 080a 097b 080a 061b 080a     ....m...{.......
 80a1438:	0959 080a 091f 080a 0935 080a 0967 080a     Y.......5...g...
 80a1448:	094b 080a 0919 080a                         K.......

080a1450 <_ZTV11USARTSerial>:
	...
 80a1458:	0ab5 080a 0b05 080a 0b13 080a 061b 080a     ................
 80a1468:	0ac9 080a 0aeb 080a 0ad7 080a 0aff 080a     ................
 80a1478:	0ab7 080a 0abb 080a                         ........

080a1480 <_ZTV7TwoWire>:
	...
 80a1488:	0bb9 080a 0c03 080a 0bdb 080a 0bbb 080a     ................
 80a1498:	0be3 080a 0beb 080a 0bf3 080a 0bfb 080a     ................

080a14a8 <_ZTVN5spark9WiFiClassE>:
	...
 80a14b0:	0cd3 080a 0cc9 080a 0cbf 080a 0c3d 080a     ............=...
 80a14c0:	06ab 080a 0cb3 080a 0ca7 080a 0c9f 080a     ................
 80a14d0:	0c95 080a 0c8b 080a 0c47 080a               ........G...

080a14dc <_ZTVN5spark12NetworkClassE>:
	...
 80a14e4:	0cf1 080a 0cfb 080a 0d05 080a 0d0f 080a     ................
 80a14f4:	0d19 080a 0d25 080a 0d31 080a 0d3d 080a     ....%...1...=...
 80a1504:	0d45 080a 0d4f 080a 0d59 080a               E...O...Y...

080a1510 <_ZSt7nothrow>:
 80a1510:	0000 0000                                   ....

080a1514 <__sf_fake_stdin>:
	...

080a1534 <__sf_fake_stdout>:
	...

080a1554 <__sf_fake_stderr>:
	...
 80a1574:	0043                                        C.

080a1576 <link_const_variable_data_end>:
	...

080a1578 <link_constructors_location>:
 80a1578:	080a0161 	.word	0x080a0161
 80a157c:	080a0511 	.word	0x080a0511
 80a1580:	080a06b9 	.word	0x080a06b9
 80a1584:	080a06c9 	.word	0x080a06c9
 80a1588:	080a06fd 	.word	0x080a06fd
 80a158c:	080a0cdd 	.word	0x080a0cdd
 80a1590:	080a0da9 	.word	0x080a0da9
 80a1594:	080a0e9d 	.word	0x080a0e9d
 80a1598:	080a0f91 	.word	0x080a0f91
 80a159c:	080a1015 	.word	0x080a1015
 80a15a0:	080a10d9 	.word	0x080a10d9
 80a15a4:	080a119d 	.word	0x080a119d

080a15a8 <link_constructors_end>:
	...
