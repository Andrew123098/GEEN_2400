
c:/Users/andre/OneDrive/Documents/Github/GEEN2400/Code/PressureMonitor/target/1.5.2/photon/PressureMonitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a74  080a001c  080a001c  0001001c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  080a3a90  080a3a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  080a3a98  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  080a3a9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000006f8  20000080  20000080  00030080  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080a3b1c  080a3b1c  00023b1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080a3b44  080a3b44  00023b44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000beb65  00000000  00000000  00023b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00010b46  00000000  00000000  000e26ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000152dd  00000000  00000000  000f31f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000020f8  00000000  00000000  001084d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000035f0  00000000  00000000  0010a5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00026013  00000000  00000000  0010dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00025f94  00000000  00000000  00133bcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000a9fd6  00000000  00000000  00159b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000c124  00000000  00000000  00203b38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <link_dynalib_end+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <link_dynalib_end+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <link_dynalib_end+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 fad9 	bl	80a35e4 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <link_dynalib_end+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <link_dynalib_end+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 fade 	bl	80a35fa <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <link_dynalib_end+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000000 	.word	0x20000000
 80a0048:	080a3a9c 	.word	0x080a3a9c
 80a004c:	20000080 	.word	0x20000080
 80a0050:	20000080 	.word	0x20000080
 80a0054:	20000778 	.word	0x20000778
 80a0058:	20000778 	.word	0x20000778

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 faf7 	bl	80a1650 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3a5c 	.word	0x080a3a5c
 80a0084:	080a3a90 	.word	0x080a3a90

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b8ce 	b.w	80a0228 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 fa8b 	bl	80a05a8 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 ba9d 	b.w	80a15d4 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bee9 	b.w	80a0e70 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 beef 	b.w	80a0e80 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZN10CloudClass22update_string_variableEPKc18Spark_Data_TypeDefPKvPv>:

    static const void* update_string_variable(const char* name, Spark_Data_TypeDef type, const void* var, void* reserved)
    {
        const String* s = (const String*)var;
        return s->c_str();
    }
 80a00b2:	6810      	ldr	r0, [r2, #0]
 80a00b4:	4770      	bx	lr
	...

080a00b8 <_Z11calibrationv>:
// Fills the array used for statistical analysis //
// with data on startup and prints the data to   //
// the LCD display.                              //
///////////////////////////////////////////////////

void calibration () {
 80a00b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

    //Print to the LCD Screen
    lcd->setCursor(0,0);
 80a00ba:	4c2e      	ldr	r4, [pc, #184]	; (80a0174 <_Z11calibrationv+0xbc>)
 80a00bc:	2200      	movs	r2, #0
 80a00be:	4611      	mov	r1, r2
 80a00c0:	6820      	ldr	r0, [r4, #0]
 80a00c2:	f000 fc4d 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Starting");
 80a00c6:	492c      	ldr	r1, [pc, #176]	; (80a0178 <_Z11calibrationv+0xc0>)
 80a00c8:	6820      	ldr	r0, [r4, #0]
 80a00ca:	f001 f91d 	bl	80a1308 <_ZN5Print5printEPKc>
    lcd->setCursor(0,1);
 80a00ce:	2201      	movs	r2, #1
 80a00d0:	2100      	movs	r1, #0
 80a00d2:	6820      	ldr	r0, [r4, #0]
 80a00d4:	f000 fc44 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
    lcd->print("Calibration");
 80a00d8:	4928      	ldr	r1, [pc, #160]	; (80a017c <_Z11calibrationv+0xc4>)
 80a00da:	6820      	ldr	r0, [r4, #0]
 80a00dc:	f001 f914 	bl	80a1308 <_ZN5Print5printEPKc>
    delay(5 * 1000);
 80a00e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80a00e4:	f001 fa14 	bl	80a1510 <delay>
 80a00e8:	4d25      	ldr	r5, [pc, #148]	; (80a0180 <_Z11calibrationv+0xc8>)
 80a00ea:	f105 07f8 	add.w	r7, r5, #248	; 0xf8


    //Store first 30 values in recentData array
    for(int i = 0 ; i <= 30 ; i++){

        recentData[i] = analogRead(SENSORPIN);
 80a00ee:	200f      	movs	r0, #15
 80a00f0:	f002 f909 	bl	80a2306 <analogRead>
 80a00f4:	f002 fd56 	bl	80a2ba4 <__aeabi_i2d>
 80a00f8:	e9e5 0102 	strd	r0, r1, [r5, #8]!
        lcd->clear();
 80a00fc:	6820      	ldr	r0, [r4, #0]
 80a00fe:	f000 fc1b 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>
        lcd->setCursor(0,0);
 80a0102:	2200      	movs	r2, #0
 80a0104:	4611      	mov	r1, r2
 80a0106:	6820      	ldr	r0, [r4, #0]
 80a0108:	f000 fc2a 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd->print("Calibrating");
 80a010c:	491d      	ldr	r1, [pc, #116]	; (80a0184 <_Z11calibrationv+0xcc>)
 80a010e:	6820      	ldr	r0, [r4, #0]
 80a0110:	f001 f8fa 	bl	80a1308 <_ZN5Print5printEPKc>
        lcd->setCursor(0,1);
 80a0114:	2201      	movs	r2, #1
 80a0116:	2100      	movs	r1, #0
 80a0118:	6820      	ldr	r0, [r4, #0]
 80a011a:	f000 fc21 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd->print((recentData[i]/4096)*15);
 80a011e:	e9d5 0100 	ldrd	r0, r1, [r5]
 80a0122:	2200      	movs	r2, #0
 80a0124:	4b18      	ldr	r3, [pc, #96]	; (80a0188 <_Z11calibrationv+0xd0>)
 80a0126:	f002 fda3 	bl	80a2c70 <__aeabi_dmul>
 80a012a:	2200      	movs	r2, #0
 80a012c:	4b17      	ldr	r3, [pc, #92]	; (80a018c <_Z11calibrationv+0xd4>)
 80a012e:	f002 fd9f 	bl	80a2c70 <__aeabi_dmul>
 80a0132:	2302      	movs	r3, #2
 80a0134:	4602      	mov	r2, r0
 80a0136:	9300      	str	r3, [sp, #0]
 80a0138:	6820      	ldr	r0, [r4, #0]
 80a013a:	460b      	mov	r3, r1
 80a013c:	f001 f9c4 	bl	80a14c8 <_ZN5Print5printEdi>
        lcd->print(" PSI");
 80a0140:	4913      	ldr	r1, [pc, #76]	; (80a0190 <_Z11calibrationv+0xd8>)
 80a0142:	6820      	ldr	r0, [r4, #0]
 80a0144:	f001 f8e0 	bl	80a1308 <_ZN5Print5printEPKc>
        delay(1 * 1000);               //CHANGE UPON IMPLEMENTATION
 80a0148:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a014c:	f001 f9e0 	bl	80a1510 <delay>
    lcd->print("Calibration");
    delay(5 * 1000);


    //Store first 30 values in recentData array
    for(int i = 0 ; i <= 30 ; i++){
 80a0150:	42bd      	cmp	r5, r7

        recentData[i] = analogRead(SENSORPIN);
        lcd->clear();
 80a0152:	4e08      	ldr	r6, [pc, #32]	; (80a0174 <_Z11calibrationv+0xbc>)
    lcd->print("Calibration");
    delay(5 * 1000);


    //Store first 30 values in recentData array
    for(int i = 0 ; i <= 30 ; i++){
 80a0154:	d1cb      	bne.n	80a00ee <_Z11calibrationv+0x36>
        lcd->print(" PSI");
        delay(1 * 1000);               //CHANGE UPON IMPLEMENTATION
    }

    //Print "DONE!" to the LCD screen
    lcd->clear();
 80a0156:	6830      	ldr	r0, [r6, #0]
 80a0158:	f000 fbee 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>
    lcd->print("DONE!");
 80a015c:	490d      	ldr	r1, [pc, #52]	; (80a0194 <_Z11calibrationv+0xdc>)
 80a015e:	6830      	ldr	r0, [r6, #0]
 80a0160:	f001 f8d2 	bl	80a1308 <_ZN5Print5printEPKc>
    delay(10 * 1000);
 80a0164:	f242 7010 	movw	r0, #10000	; 0x2710

}
 80a0168:	b003      	add	sp, #12
 80a016a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    }

    //Print "DONE!" to the LCD screen
    lcd->clear();
    lcd->print("DONE!");
    delay(10 * 1000);
 80a016e:	f001 b9cf 	b.w	80a1510 <delay>
 80a0172:	bf00      	nop
 80a0174:	200001f0 	.word	0x200001f0
 80a0178:	080a36dc 	.word	0x080a36dc
 80a017c:	080a36e5 	.word	0x080a36e5
 80a0180:	200000d8 	.word	0x200000d8
 80a0184:	080a36f1 	.word	0x080a36f1
 80a0188:	3f300000 	.word	0x3f300000
 80a018c:	402e0000 	.word	0x402e0000
 80a0190:	080a36fd 	.word	0x080a36fd
 80a0194:	080a3702 	.word	0x080a3702

080a0198 <_Z7getMeanPdi>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MEAN FUNCTION:                           //
// Takes in an array of a given length and  //
// outputs the Average of the array values. //
//////////////////////////////////////////////
double getMean (double array[], int arrayLength) {
 80a0198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a019c:	4688      	mov	r8, r1
 80a019e:	f1a0 0508 	sub.w	r5, r0, #8
 80a01a2:	f100 04e8 	add.w	r4, r0, #232	; 0xe8
     double sum = 0;
 80a01a6:	2600      	movs	r6, #0
 80a01a8:	2700      	movs	r7, #0
     for (int i = 0 ; i < numData ; i++) {
         sum += array[i];
 80a01aa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 80a01ae:	4630      	mov	r0, r6
 80a01b0:	4639      	mov	r1, r7
 80a01b2:	f002 fbab 	bl	80a290c <__adddf3>
// Takes in an array of a given length and  //
// outputs the Average of the array values. //
//////////////////////////////////////////////
double getMean (double array[], int arrayLength) {
     double sum = 0;
     for (int i = 0 ; i < numData ; i++) {
 80a01b6:	42a5      	cmp	r5, r4
         sum += array[i];
 80a01b8:	4606      	mov	r6, r0
 80a01ba:	460f      	mov	r7, r1
// Takes in an array of a given length and  //
// outputs the Average of the array values. //
//////////////////////////////////////////////
double getMean (double array[], int arrayLength) {
     double sum = 0;
     for (int i = 0 ; i < numData ; i++) {
 80a01bc:	d1f5      	bne.n	80a01aa <_Z7getMeanPdi+0x12>
         sum += array[i];
     }
    return sum / arrayLength;
 80a01be:	4640      	mov	r0, r8
 80a01c0:	f002 fcf0 	bl	80a2ba4 <__aeabi_i2d>
 80a01c4:	4602      	mov	r2, r0
 80a01c6:	460b      	mov	r3, r1
 80a01c8:	4630      	mov	r0, r6
 80a01ca:	4639      	mov	r1, r7
 80a01cc:	f002 fe7a 	bl	80a2ec4 <__aeabi_ddiv>
}
 80a01d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a01d4 <_Z8getStdevPdid>:
// STANDARD DEVIATION FUNCTION:             //
// Takes in an array of a given length and  //
// the average of that array and returns    //
// its standard deviation.                  //
//////////////////////////////////////////////
double getStdev (double array[], int arrayLength, double mean) {
 80a01d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a01d8:	4699      	mov	r9, r3
    double tempArray[arrayLength];
 80a01da:	00cb      	lsls	r3, r1, #3
 80a01dc:	3308      	adds	r3, #8
// STANDARD DEVIATION FUNCTION:             //
// Takes in an array of a given length and  //
// the average of that array and returns    //
// its standard deviation.                  //
//////////////////////////////////////////////
double getStdev (double array[], int arrayLength, double mean) {
 80a01de:	af00      	add	r7, sp, #0
    double tempArray[arrayLength];
 80a01e0:	ebad 0d03 	sub.w	sp, sp, r3
// STANDARD DEVIATION FUNCTION:             //
// Takes in an array of a given length and  //
// the average of that array and returns    //
// its standard deviation.                  //
//////////////////////////////////////////////
double getStdev (double array[], int arrayLength, double mean) {
 80a01e4:	460c      	mov	r4, r1
 80a01e6:	4690      	mov	r8, r2
    double tempArray[arrayLength];
 80a01e8:	466e      	mov	r6, sp
 80a01ea:	f1a0 0b08 	sub.w	fp, r0, #8
 80a01ee:	f1ad 0a08 	sub.w	sl, sp, #8
    for (int i = 0 ; i < arrayLength ; i++) {
 80a01f2:	2500      	movs	r5, #0
 80a01f4:	42a5      	cmp	r5, r4
 80a01f6:	da0d      	bge.n	80a0214 <_Z8getStdevPdid+0x40>
        tempArray[i] = pow((array[i] - mean), 2);
 80a01f8:	e9fb 0102 	ldrd	r0, r1, [fp, #8]!
 80a01fc:	4642      	mov	r2, r8
 80a01fe:	464b      	mov	r3, r9
 80a0200:	f002 fb82 	bl	80a2908 <__aeabi_dsub>
 80a0204:	4602      	mov	r2, r0
 80a0206:	460b      	mov	r3, r1
 80a0208:	f002 fd32 	bl	80a2c70 <__aeabi_dmul>
// the average of that array and returns    //
// its standard deviation.                  //
//////////////////////////////////////////////
double getStdev (double array[], int arrayLength, double mean) {
    double tempArray[arrayLength];
    for (int i = 0 ; i < arrayLength ; i++) {
 80a020c:	3501      	adds	r5, #1
        tempArray[i] = pow((array[i] - mean), 2);
 80a020e:	e9ea 0102 	strd	r0, r1, [sl, #8]!
// the average of that array and returns    //
// its standard deviation.                  //
//////////////////////////////////////////////
double getStdev (double array[], int arrayLength, double mean) {
    double tempArray[arrayLength];
    for (int i = 0 ; i < arrayLength ; i++) {
 80a0212:	e7ef      	b.n	80a01f4 <_Z8getStdevPdid+0x20>
        tempArray[i] = pow((array[i] - mean), 2);
    }
    return sqrt(getMean(tempArray, arrayLength));
 80a0214:	4621      	mov	r1, r4
 80a0216:	4630      	mov	r0, r6
 80a0218:	f7ff ffbe 	bl	80a0198 <_Z7getMeanPdi>
 80a021c:	f002 fa4e 	bl	80a26bc <sqrt>
}
 80a0220:	46bd      	mov	sp, r7
 80a0222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080a0228 <setup>:
// -> Run Calibration function       //
// -> Calculate Mean of Values       //
// -> Calculate Standard Deviation   //
///////////////////////////////////////

void setup() {
 80a0228:	b530      	push	{r4, r5, lr}
 80a022a:	b085      	sub	sp, #20
    Serial.begin(115200);
 80a022c:	f001 fe00 	bl	80a1e30 <_Z16_fetch_usbserialv>
 80a0230:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80a0234:	f001 fde2 	bl	80a1dfc <_ZN9USBSerial5beginEl>

    // Initialize various necessities
    pinMode(SENSORPIN, INPUT);                      // Define the analog pin as an input
 80a0238:	2100      	movs	r1, #0
 80a023a:	200f      	movs	r0, #15
 80a023c:	f002 f852 	bl	80a22e4 <pinMode>
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a0240:	2400      	movs	r4, #0
        extra.size = sizeof(extra);
 80a0242:	230c      	movs	r3, #12
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a0244:	9401      	str	r4, [sp, #4]
        extra.size = sizeof(extra);
 80a0246:	f8ad 3004 	strh.w	r3, [sp, #4]
        extra.update = update_string_variable;
 80a024a:	4b23      	ldr	r3, [pc, #140]	; (80a02d8 <setup+0xb0>)
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a024c:	2204      	movs	r2, #4
    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
 80a024e:	9302      	str	r3, [sp, #8]
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0250:	4922      	ldr	r1, [pc, #136]	; (80a02dc <setup+0xb4>)
 80a0252:	ab01      	add	r3, sp, #4
 80a0254:	4822      	ldr	r0, [pc, #136]	; (80a02e0 <setup+0xb8>)
    }

    template<typename T>
    static inline bool _variable(const T *varKey, const String *userVar, const CloudVariableTypeString& userVarType)
    {
        spark_variable_t extra = {};
 80a0256:	9403      	str	r4, [sp, #12]
        extra.size = sizeof(extra);
        extra.update = update_string_variable;
        return spark_variable(varKey, userVar, CloudVariableTypeString::TYPE_ID, &extra);
 80a0258:	f000 fdda 	bl	80a0e10 <spark_variable>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
 80a025c:	4623      	mov	r3, r4
 80a025e:	2209      	movs	r2, #9
 80a0260:	4920      	ldr	r1, [pc, #128]	; (80a02e4 <setup+0xbc>)
 80a0262:	4821      	ldr	r0, [pc, #132]	; (80a02e8 <setup+0xc0>)
 80a0264:	f000 fdd4 	bl	80a0e10 <spark_variable>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return register_function(call_raw_user_function, (void*)func, funcKey);
 80a0268:	4a20      	ldr	r2, [pc, #128]	; (80a02ec <setup+0xc4>)
 80a026a:	4921      	ldr	r1, [pc, #132]	; (80a02f0 <setup+0xc8>)
 80a026c:	4821      	ldr	r0, [pc, #132]	; (80a02f4 <setup+0xcc>)
 80a026e:	f001 fa79 	bl	80a1764 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0272:	4a21      	ldr	r2, [pc, #132]	; (80a02f8 <setup+0xd0>)
 80a0274:	4921      	ldr	r1, [pc, #132]	; (80a02fc <setup+0xd4>)
 80a0276:	481f      	ldr	r0, [pc, #124]	; (80a02f4 <setup+0xcc>)
 80a0278:	f001 fa74 	bl	80a1764 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
    Particle.function("overrideOn", overrideOn);
    Particle.function("overrideOff", overrideOff);


    // Begin running the LCD Screen via I2C protocols
    lcd = new LiquidCrystal_I2C(0x3F, 16, 2);
 80a027c:	2010      	movs	r0, #16
 80a027e:	f7ff ff0c 	bl	80a009a <_Znwj>
 80a0282:	4605      	mov	r5, r0
 80a0284:	b120      	cbz	r0, 80a0290 <setup+0x68>
 80a0286:	2302      	movs	r3, #2
 80a0288:	2210      	movs	r2, #16
 80a028a:	213f      	movs	r1, #63	; 0x3f
 80a028c:	f000 faec 	bl	80a0868 <_ZN17LiquidCrystal_I2CC1Ehhh>
 80a0290:	4c1b      	ldr	r4, [pc, #108]	; (80a0300 <setup+0xd8>)
     lcd->init();
 80a0292:	4628      	mov	r0, r5
    Particle.function("overrideOn", overrideOn);
    Particle.function("overrideOff", overrideOff);


    // Begin running the LCD Screen via I2C protocols
    lcd = new LiquidCrystal_I2C(0x3F, 16, 2);
 80a0294:	6025      	str	r5, [r4, #0]
     lcd->init();
 80a0296:	f000 fbf9 	bl	80a0a8c <_ZN17LiquidCrystal_I2C4initEv>
     lcd->backlight();
 80a029a:	6820      	ldr	r0, [r4, #0]
 80a029c:	f000 fb0e 	bl	80a08bc <_ZN17LiquidCrystal_I2C9backlightEv>
     lcd->clear();
 80a02a0:	6820      	ldr	r0, [r4, #0]
 80a02a2:	f000 fb49 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>


     // Run Calibration Function
     calibration();
 80a02a6:	f7ff ff07 	bl	80a00b8 <_Z11calibrationv>

     // Store Mean Value of Array
     mean = getMean(recentData, numData);
 80a02aa:	211e      	movs	r1, #30
 80a02ac:	4815      	ldr	r0, [pc, #84]	; (80a0304 <setup+0xdc>)
 80a02ae:	f7ff ff73 	bl	80a0198 <_Z7getMeanPdi>
 80a02b2:	4602      	mov	r2, r0
 80a02b4:	460b      	mov	r3, r1
 80a02b6:	490b      	ldr	r1, [pc, #44]	; (80a02e4 <setup+0xbc>)

     // Store Standard Deviation of Array
     stdev = getStdev(recentData, numData, mean);
 80a02b8:	4812      	ldr	r0, [pc, #72]	; (80a0304 <setup+0xdc>)

     // Run Calibration Function
     calibration();

     // Store Mean Value of Array
     mean = getMean(recentData, numData);
 80a02ba:	e9c1 2300 	strd	r2, r3, [r1]

     // Store Standard Deviation of Array
     stdev = getStdev(recentData, numData, mean);
 80a02be:	211e      	movs	r1, #30
 80a02c0:	f7ff ff88 	bl	80a01d4 <_Z8getStdevPdid>
 80a02c4:	4b10      	ldr	r3, [pc, #64]	; (80a0308 <setup+0xe0>)
 80a02c6:	e9c3 0100 	strd	r0, r1, [r3]
     Serial.print("Done with calibration");
 80a02ca:	f001 fdb1 	bl	80a1e30 <_Z16_fetch_usbserialv>
 80a02ce:	490f      	ldr	r1, [pc, #60]	; (80a030c <setup+0xe4>)
 80a02d0:	f001 f81a 	bl	80a1308 <_ZN5Print5printEPKc>

}
 80a02d4:	b005      	add	sp, #20
 80a02d6:	bd30      	pop	{r4, r5, pc}
 80a02d8:	080a00b3 	.word	0x080a00b3
 80a02dc:	200001d4 	.word	0x200001d4
 80a02e0:	080a3708 	.word	0x080a3708
 80a02e4:	20000090 	.word	0x20000090
 80a02e8:	080a3712 	.word	0x080a3712
 80a02ec:	080a371b 	.word	0x080a371b
 80a02f0:	080a0479 	.word	0x080a0479
 80a02f4:	080a1739 	.word	0x080a1739
 80a02f8:	080a3726 	.word	0x080a3726
 80a02fc:	080a04d1 	.word	0x080a04d1
 80a0300:	200001f0 	.word	0x200001f0
 80a0304:	200000e0 	.word	0x200000e0
 80a0308:	200001e8 	.word	0x200001e8
 80a030c:	080a3732 	.word	0x080a3732

080a0310 <_Z8syncTimev>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SYNC TIME FUNCTION:                       //
// Syncs the onboard clock with the Particle //
// cloud clock every 3 hours.                //
///////////////////////////////////////////////
void syncTime() {
 80a0310:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0312:	f000 fbff 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
    unsigned long refreshTime;                      // Initialize variable to store time ever 3 hours
    if (millis() - refreshTime > 3600000) {         // If current time minus previous time of sync is greater than 3 hours...
 80a0316:	4b07      	ldr	r3, [pc, #28]	; (80a0334 <_Z8syncTimev+0x24>)
 80a0318:	4298      	cmp	r0, r3
 80a031a:	d909      	bls.n	80a0330 <_Z8syncTimev+0x20>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a031c:	f000 fd88 	bl	80a0e30 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
 80a0320:	b110      	cbz	r0, 80a0328 <_Z8syncTimev+0x18>
            return false;
        }
        return spark_sync_time(NULL);
 80a0322:	2000      	movs	r0, #0
 80a0324:	f000 fd94 	bl	80a0e50 <spark_sync_time>
        Particle.syncTime();                        // Refresh the onboard clock with the Particle.io cloud realtime clock
        refreshTime = millis();                     // Set refreshTime to current time
    }
}
 80a0328:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a032c:	f000 bbf2 	b.w	80a0b14 <HAL_Timer_Get_Milli_Seconds>
 80a0330:	bd08      	pop	{r3, pc}
 80a0332:	bf00      	nop
 80a0334:	0036ee80 	.word	0x0036ee80

080a0338 <_Z15printPumpStatusv>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PRINT PUMP STATUS FUNCTION:                //
// Prints the pump status to the LCD screen   //
// if a change in status is detected.         //
////////////////////////////////////////////////
void printPumpStatus() {
 80a0338:	b538      	push	{r3, r4, r5, lr}
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 80a033a:	4c0d      	ldr	r4, [pc, #52]	; (80a0370 <_Z15printPumpStatusv+0x38>)
 80a033c:	490d      	ldr	r1, [pc, #52]	; (80a0374 <_Z15printPumpStatusv+0x3c>)
 80a033e:	4620      	mov	r0, r4
 80a0340:	f000 ff9d 	bl	80a127e <_ZNK6String6equalsERKS_>
    if (localPumpStatus != lastLocalPumpStatus) {   // If the current status is different from the previous status...
 80a0344:	4601      	mov	r1, r0
 80a0346:	b990      	cbnz	r0, 80a036e <_Z15printPumpStatusv+0x36>
        lcd->setCursor(0,1);
 80a0348:	4d0b      	ldr	r5, [pc, #44]	; (80a0378 <_Z15printPumpStatusv+0x40>)
 80a034a:	2201      	movs	r2, #1
 80a034c:	6828      	ldr	r0, [r5, #0]
 80a034e:	f000 fb07 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
        lcd->print("Pump Status: ");
 80a0352:	490a      	ldr	r1, [pc, #40]	; (80a037c <_Z15printPumpStatusv+0x44>)
 80a0354:	6828      	ldr	r0, [r5, #0]
 80a0356:	f000 ffd7 	bl	80a1308 <_ZN5Print5printEPKc>
        lcd->print(localPumpStatus);
 80a035a:	6821      	ldr	r1, [r4, #0]
 80a035c:	6828      	ldr	r0, [r5, #0]
 80a035e:	f000 ffd3 	bl	80a1308 <_ZN5Print5printEPKc>
        lastLocalPumpStatus = localPumpStatus;
 80a0362:	4621      	mov	r1, r4
    }
}
 80a0364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void printPumpStatus() {
    if (localPumpStatus != lastLocalPumpStatus) {   // If the current status is different from the previous status...
        lcd->setCursor(0,1);
        lcd->print("Pump Status: ");
        lcd->print(localPumpStatus);
        lastLocalPumpStatus = localPumpStatus;
 80a0368:	4802      	ldr	r0, [pc, #8]	; (80a0374 <_Z15printPumpStatusv+0x3c>)
 80a036a:	f000 bf16 	b.w	80a119a <_ZN6StringaSERKS_>
 80a036e:	bd38      	pop	{r3, r4, r5, pc}
 80a0370:	200000b8 	.word	0x200000b8
 80a0374:	20000098 	.word	0x20000098
 80a0378:	200001f0 	.word	0x200001f0
 80a037c:	080a3748 	.word	0x080a3748

080a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0380:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0382:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0384:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0386:	b17c      	cbz	r4, 80a03a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0388:	6863      	ldr	r3, [r4, #4]
 80a038a:	3b01      	subs	r3, #1
 80a038c:	6063      	str	r3, [r4, #4]
 80a038e:	b95b      	cbnz	r3, 80a03a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0390:	6823      	ldr	r3, [r4, #0]
 80a0392:	4620      	mov	r0, r4
 80a0394:	689b      	ldr	r3, [r3, #8]
 80a0396:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0398:	68a3      	ldr	r3, [r4, #8]
 80a039a:	3b01      	subs	r3, #1
 80a039c:	60a3      	str	r3, [r4, #8]
 80a039e:	b91b      	cbnz	r3, 80a03a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a03a0:	6823      	ldr	r3, [r4, #0]
 80a03a2:	4620      	mov	r0, r4
 80a03a4:	68db      	ldr	r3, [r3, #12]
 80a03a6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a03a8:	4628      	mov	r0, r5
 80a03aa:	bd38      	pop	{r3, r4, r5, pc}

080a03ac <_Z17sendCommandToPumpd>:
// Toggles the pump status based on mean  //
// and publishes the new pump status to   //
// the Particle cloud for communication   //
// with the pump Photon.                  //
////////////////////////////////////////////
void sendCommandToPump (double mean) {
 80a03ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a03b0:	4606      	mov	r6, r0
 80a03b2:	460f      	mov	r7, r1
    bool lastPumpCommand = pumpCommand;                                    // Keep track of previous pump command
    if (mean <= tankEmpty) {                                               // If the tank is empty (lower than our "tankEmpty" value)...
 80a03b4:	4b25      	ldr	r3, [pc, #148]	; (80a044c <_Z17sendCommandToPumpd+0xa0>)
// and publishes the new pump status to   //
// the Particle cloud for communication   //
// with the pump Photon.                  //
////////////////////////////////////////////
void sendCommandToPump (double mean) {
    bool lastPumpCommand = pumpCommand;                                    // Keep track of previous pump command
 80a03b6:	4c26      	ldr	r4, [pc, #152]	; (80a0450 <_Z17sendCommandToPumpd+0xa4>)
    if (mean <= tankEmpty) {                                               // If the tank is empty (lower than our "tankEmpty" value)...
 80a03b8:	6818      	ldr	r0, [r3, #0]
 80a03ba:	f002 fbf3 	bl	80a2ba4 <__aeabi_i2d>
 80a03be:	4632      	mov	r2, r6
 80a03c0:	463b      	mov	r3, r7
 80a03c2:	f002 fedb 	bl	80a317c <__aeabi_dcmpge>
// and publishes the new pump status to   //
// the Particle cloud for communication   //
// with the pump Photon.                  //
////////////////////////////////////////////
void sendCommandToPump (double mean) {
    bool lastPumpCommand = pumpCommand;                                    // Keep track of previous pump command
 80a03c6:	f894 8000 	ldrb.w	r8, [r4]
 80a03ca:	4d22      	ldr	r5, [pc, #136]	; (80a0454 <_Z17sendCommandToPumpd+0xa8>)
    if (mean <= tankEmpty) {                                               // If the tank is empty (lower than our "tankEmpty" value)...
 80a03cc:	b128      	cbz	r0, 80a03da <_Z17sendCommandToPumpd+0x2e>
        pumpCommand = TRUE;                                                // Set pump to ON
 80a03ce:	2301      	movs	r3, #1
 80a03d0:	7023      	strb	r3, [r4, #0]
 80a03d2:	f000 fb9f 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
        pumpTimer = millis();                                              // Start a timer
 80a03d6:	6028      	str	r0, [r5, #0]
 80a03d8:	e012      	b.n	80a0400 <_Z17sendCommandToPumpd+0x54>
 80a03da:	f000 fb9b 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
    } else if (millis() - pumpTimer >= maxTimeOn || mean >= tankFull) {    // If the pump has been on past the max time, OR  the tanks are full...
 80a03de:	682b      	ldr	r3, [r5, #0]
 80a03e0:	1ac0      	subs	r0, r0, r3
 80a03e2:	4b1d      	ldr	r3, [pc, #116]	; (80a0458 <_Z17sendCommandToPumpd+0xac>)
 80a03e4:	681b      	ldr	r3, [r3, #0]
 80a03e6:	4298      	cmp	r0, r3
 80a03e8:	d229      	bcs.n	80a043e <_Z17sendCommandToPumpd+0x92>
 80a03ea:	4b1c      	ldr	r3, [pc, #112]	; (80a045c <_Z17sendCommandToPumpd+0xb0>)
 80a03ec:	6818      	ldr	r0, [r3, #0]
 80a03ee:	f002 fbd9 	bl	80a2ba4 <__aeabi_i2d>
 80a03f2:	4602      	mov	r2, r0
 80a03f4:	460b      	mov	r3, r1
 80a03f6:	4630      	mov	r0, r6
 80a03f8:	4639      	mov	r1, r7
 80a03fa:	f002 febf 	bl	80a317c <__aeabi_dcmpge>
 80a03fe:	b9f0      	cbnz	r0, 80a043e <_Z17sendCommandToPumpd+0x92>
        pumpCommand = FALSE;                                               // Set pump to OFF
        pumpTimer = 0;                                                     // Turn off timer and reset to 0
    }

    if (pumpCommand != lastPumpCommand) {                                  // If new pump command is different from the previous pump command...
 80a0400:	7822      	ldrb	r2, [r4, #0]
 80a0402:	4590      	cmp	r8, r2
 80a0404:	d01f      	beq.n	80a0446 <_Z17sendCommandToPumpd+0x9a>
 80a0406:	4b16      	ldr	r3, [pc, #88]	; (80a0460 <_Z17sendCommandToPumpd+0xb4>)
 80a0408:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a040a:	f88d 3000 	strb.w	r3, [sp]
 80a040e:	233c      	movs	r3, #60	; 0x3c
        if(pumpCommand == TRUE) {                                              // If command is to turn ON
 80a0410:	b14a      	cbz	r2, 80a0426 <_Z17sendCommandToPumpd+0x7a>
 80a0412:	4914      	ldr	r1, [pc, #80]	; (80a0464 <_Z17sendCommandToPumpd+0xb8>)
 80a0414:	2200      	movs	r2, #0
 80a0416:	a802      	add	r0, sp, #8
 80a0418:	f001 fab4 	bl	80a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a041c:	a803      	add	r0, sp, #12
 80a041e:	f7ff ffaf 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("turnPumpOn", PRIVATE);                           // Send command to turn the pump on
            localPumpStatus = "ON ";                                           // Set pump status to "ON" for printing to LCD
 80a0422:	4911      	ldr	r1, [pc, #68]	; (80a0468 <_Z17sendCommandToPumpd+0xbc>)
 80a0424:	e007      	b.n	80a0436 <_Z17sendCommandToPumpd+0x8a>
 80a0426:	4911      	ldr	r1, [pc, #68]	; (80a046c <_Z17sendCommandToPumpd+0xc0>)
 80a0428:	a802      	add	r0, sp, #8
 80a042a:	f001 faab 	bl	80a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a042e:	a803      	add	r0, sp, #12
 80a0430:	f7ff ffa6 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        } else {                                                               // Otherwise
            Particle.publish("turnPumpOff", PRIVATE);                          // Send command to turn the pump off
            localPumpStatus = "OFF";                                           // Set pump status to "OFF" for printing to LCD
 80a0434:	490e      	ldr	r1, [pc, #56]	; (80a0470 <_Z17sendCommandToPumpd+0xc4>)
 80a0436:	480f      	ldr	r0, [pc, #60]	; (80a0474 <_Z17sendCommandToPumpd+0xc8>)
 80a0438:	f000 fed1 	bl	80a11de <_ZN6StringaSEPKc>
        }
    }

}
 80a043c:	e003      	b.n	80a0446 <_Z17sendCommandToPumpd+0x9a>
    bool lastPumpCommand = pumpCommand;                                    // Keep track of previous pump command
    if (mean <= tankEmpty) {                                               // If the tank is empty (lower than our "tankEmpty" value)...
        pumpCommand = TRUE;                                                // Set pump to ON
        pumpTimer = millis();                                              // Start a timer
    } else if (millis() - pumpTimer >= maxTimeOn || mean >= tankFull) {    // If the pump has been on past the max time, OR  the tanks are full...
        pumpCommand = FALSE;                                               // Set pump to OFF
 80a043e:	2300      	movs	r3, #0
 80a0440:	7023      	strb	r3, [r4, #0]
        pumpTimer = 0;                                                     // Turn off timer and reset to 0
 80a0442:	602b      	str	r3, [r5, #0]
 80a0444:	e7dc      	b.n	80a0400 <_Z17sendCommandToPumpd+0x54>
            Particle.publish("turnPumpOff", PRIVATE);                          // Send command to turn the pump off
            localPumpStatus = "OFF";                                           // Set pump status to "OFF" for printing to LCD
        }
    }

}
 80a0446:	b004      	add	sp, #16
 80a0448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a044c:	20000008 	.word	0x20000008
 80a0450:	200000c9 	.word	0x200000c9
 80a0454:	2000008c 	.word	0x2000008c
 80a0458:	20000004 	.word	0x20000004
 80a045c:	20000000 	.word	0x20000000
 80a0460:	200000c8 	.word	0x200000c8
 80a0464:	080a3756 	.word	0x080a3756
 80a0468:	080a3761 	.word	0x080a3761
 80a046c:	080a3765 	.word	0x080a3765
 80a0470:	080a3771 	.word	0x080a3771
 80a0474:	200000b8 	.word	0x200000b8

080a0478 <_Z10overrideOn6String>:
// OVERRIDE ON FUCNTION:                 //                    ***NOTE: Particle.fucntions require the input to be a string and the output to be an int.***
// Sends command to particle cloud to    //                                                (see documentation for more info)
// turn the pump on, but only for a      //
// set time or until the tanks are full. //
///////////////////////////////////////////
int overrideOn(String command) {
 80a0478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if (mean < tankFull) {                                               // If tank is less than full...
 80a047a:	4b0f      	ldr	r3, [pc, #60]	; (80a04b8 <_Z10overrideOn6String+0x40>)
 80a047c:	6818      	ldr	r0, [r3, #0]
 80a047e:	f002 fb91 	bl	80a2ba4 <__aeabi_i2d>
 80a0482:	4b0e      	ldr	r3, [pc, #56]	; (80a04bc <_Z10overrideOn6String+0x44>)
 80a0484:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0488:	f002 fe82 	bl	80a3190 <__aeabi_dcmpgt>
 80a048c:	b180      	cbz	r0, 80a04b0 <_Z10overrideOn6String+0x38>
 80a048e:	4b0c      	ldr	r3, [pc, #48]	; (80a04c0 <_Z10overrideOn6String+0x48>)
 80a0490:	490c      	ldr	r1, [pc, #48]	; (80a04c4 <_Z10overrideOn6String+0x4c>)
 80a0492:	781b      	ldrb	r3, [r3, #0]
 80a0494:	2200      	movs	r2, #0
 80a0496:	f88d 3000 	strb.w	r3, [sp]
 80a049a:	a802      	add	r0, sp, #8
 80a049c:	233c      	movs	r3, #60	; 0x3c
 80a049e:	f001 fa71 	bl	80a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a04a2:	a803      	add	r0, sp, #12
 80a04a4:	f7ff ff6c 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("turnPumpOn", PRIVATE);                         // Send command to turn the pump on
        localPumpStatus = "ON ";                                         // Set pump status to "ON" for printing to LCD
 80a04a8:	4907      	ldr	r1, [pc, #28]	; (80a04c8 <_Z10overrideOn6String+0x50>)
 80a04aa:	4808      	ldr	r0, [pc, #32]	; (80a04cc <_Z10overrideOn6String+0x54>)
 80a04ac:	f000 fe97 	bl	80a11de <_ZN6StringaSEPKc>
    }
    return 1;
}
 80a04b0:	2001      	movs	r0, #1
 80a04b2:	b005      	add	sp, #20
 80a04b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a04b8:	20000000 	.word	0x20000000
 80a04bc:	20000090 	.word	0x20000090
 80a04c0:	200000c8 	.word	0x200000c8
 80a04c4:	080a3756 	.word	0x080a3756
 80a04c8:	080a3761 	.word	0x080a3761
 80a04cc:	200000b8 	.word	0x200000b8

080a04d0 <_Z11overrideOff6String>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// OVERRIDE OFF FUCNTION:              //
// Sends command to particle cloud to  //
// turn the pump off.                  //
/////////////////////////////////////////
int overrideOff(String command) {
 80a04d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80a04d2:	4b0b      	ldr	r3, [pc, #44]	; (80a0500 <_Z11overrideOff6String+0x30>)
 80a04d4:	2200      	movs	r2, #0
 80a04d6:	781b      	ldrb	r3, [r3, #0]
 80a04d8:	490a      	ldr	r1, [pc, #40]	; (80a0504 <_Z11overrideOff6String+0x34>)
 80a04da:	f88d 3000 	strb.w	r3, [sp]
 80a04de:	a802      	add	r0, sp, #8
 80a04e0:	233c      	movs	r3, #60	; 0x3c
 80a04e2:	f001 fa4f 	bl	80a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a04e6:	a803      	add	r0, sp, #12
 80a04e8:	f7ff ff4a 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("turnPumpOff", PRIVATE);       // Send command to turn the pump off
    localPumpStatus = "OFF";                        // Set pump status to "OFF" for printing to LCD
 80a04ec:	4906      	ldr	r1, [pc, #24]	; (80a0508 <_Z11overrideOff6String+0x38>)
 80a04ee:	4807      	ldr	r0, [pc, #28]	; (80a050c <_Z11overrideOff6String+0x3c>)
 80a04f0:	f000 fe75 	bl	80a11de <_ZN6StringaSEPKc>
    checkTimeAndPressureVar = FALSE;                // Make sure we can go through checkTimeAndPressure if statement again
 80a04f4:	4b06      	ldr	r3, [pc, #24]	; (80a0510 <_Z11overrideOff6String+0x40>)
 80a04f6:	2000      	movs	r0, #0
 80a04f8:	7018      	strb	r0, [r3, #0]
    return 0;
}
 80a04fa:	b005      	add	sp, #20
 80a04fc:	f85d fb04 	ldr.w	pc, [sp], #4
 80a0500:	200000c8 	.word	0x200000c8
 80a0504:	080a3765 	.word	0x080a3765
 80a0508:	080a3771 	.word	0x080a3771
 80a050c:	200000b8 	.word	0x200000b8
 80a0510:	200001d0 	.word	0x200001d0

080a0514 <_Z20checkTimeAndPressurev>:
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Error here: else if statement not running

void checkTimeAndPressure() {
 80a0514:	b530      	push	{r4, r5, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80a0516:	491b      	ldr	r1, [pc, #108]	; (80a0584 <_Z20checkTimeAndPressurev+0x70>)
 80a0518:	b085      	sub	sp, #20
 80a051a:	481b      	ldr	r0, [pc, #108]	; (80a0588 <_Z20checkTimeAndPressurev+0x74>)
 80a051c:	f000 febc 	bl	80a1298 <_ZNK6String6equalsEPKc>
 80a0520:	4d1a      	ldr	r5, [pc, #104]	; (80a058c <_Z20checkTimeAndPressurev+0x78>)
    if (lastLocalPumpStatus == "OFF" && lastLocalPumpStatus != localPumpStatus && checkTimeAndPressureVar == FALSE) {       // If the pump just turned on & first time calling function...
 80a0522:	b138      	cbz	r0, 80a0534 <_Z20checkTimeAndPressurev+0x20>
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
 80a0524:	491a      	ldr	r1, [pc, #104]	; (80a0590 <_Z20checkTimeAndPressurev+0x7c>)
 80a0526:	4818      	ldr	r0, [pc, #96]	; (80a0588 <_Z20checkTimeAndPressurev+0x74>)
 80a0528:	f000 fea9 	bl	80a127e <_ZNK6String6equalsERKS_>
 80a052c:	b910      	cbnz	r0, 80a0534 <_Z20checkTimeAndPressurev+0x20>
 80a052e:	4c19      	ldr	r4, [pc, #100]	; (80a0594 <_Z20checkTimeAndPressurev+0x80>)
 80a0530:	7823      	ldrb	r3, [r4, #0]
 80a0532:	b1e3      	cbz	r3, 80a056e <_Z20checkTimeAndPressurev+0x5a>
 80a0534:	f000 faee 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
        overrideUntil = millis() + overrideTime;                                                                            // Sets time in the future for when pump should turn off
        checkTimeAndPressureVar = TRUE;                                                                                     // Makes sure we cannot go through this if statement again
    }
    if ((millis() > overrideUntil || mean >= tankFull) && checkTimeAndPressureVar == TRUE) {                         // If current time exceeds max-pump-on time, or tank is full & and we have gone through the first if statement...
 80a0538:	682b      	ldr	r3, [r5, #0]
 80a053a:	4298      	cmp	r0, r3
 80a053c:	d809      	bhi.n	80a0552 <_Z20checkTimeAndPressurev+0x3e>
 80a053e:	4b16      	ldr	r3, [pc, #88]	; (80a0598 <_Z20checkTimeAndPressurev+0x84>)
 80a0540:	6818      	ldr	r0, [r3, #0]
 80a0542:	f002 fb2f 	bl	80a2ba4 <__aeabi_i2d>
 80a0546:	4b15      	ldr	r3, [pc, #84]	; (80a059c <_Z20checkTimeAndPressurev+0x88>)
 80a0548:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a054c:	f002 fe0c 	bl	80a3168 <__aeabi_dcmple>
 80a0550:	b1b0      	cbz	r0, 80a0580 <_Z20checkTimeAndPressurev+0x6c>
 80a0552:	4b10      	ldr	r3, [pc, #64]	; (80a0594 <_Z20checkTimeAndPressurev+0x80>)
 80a0554:	781b      	ldrb	r3, [r3, #0]
 80a0556:	b19b      	cbz	r3, 80a0580 <_Z20checkTimeAndPressurev+0x6c>
        overrideOff("");                                                                                                    // Call override off function (which turns off the pump)
 80a0558:	4911      	ldr	r1, [pc, #68]	; (80a05a0 <_Z20checkTimeAndPressurev+0x8c>)
 80a055a:	4668      	mov	r0, sp
 80a055c:	f000 fded 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0560:	4668      	mov	r0, sp
 80a0562:	f7ff ffb5 	bl	80a04d0 <_Z11overrideOff6String>
 80a0566:	4668      	mov	r0, sp
 80a0568:	f000 fda0 	bl	80a10ac <_ZN6StringD1Ev>
 80a056c:	e008      	b.n	80a0580 <_Z20checkTimeAndPressurev+0x6c>
 80a056e:	f000 fad1 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Error here: else if statement not running

void checkTimeAndPressure() {
    if (lastLocalPumpStatus == "OFF" && lastLocalPumpStatus != localPumpStatus && checkTimeAndPressureVar == FALSE) {       // If the pump just turned on & first time calling function...
        overrideUntil = millis() + overrideTime;                                                                            // Sets time in the future for when pump should turn off
 80a0572:	4b0c      	ldr	r3, [pc, #48]	; (80a05a4 <_Z20checkTimeAndPressurev+0x90>)
 80a0574:	681b      	ldr	r3, [r3, #0]
 80a0576:	4418      	add	r0, r3
        checkTimeAndPressureVar = TRUE;                                                                                     // Makes sure we cannot go through this if statement again
 80a0578:	2301      	movs	r3, #1
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Error here: else if statement not running

void checkTimeAndPressure() {
    if (lastLocalPumpStatus == "OFF" && lastLocalPumpStatus != localPumpStatus && checkTimeAndPressureVar == FALSE) {       // If the pump just turned on & first time calling function...
        overrideUntil = millis() + overrideTime;                                                                            // Sets time in the future for when pump should turn off
 80a057a:	6028      	str	r0, [r5, #0]
        checkTimeAndPressureVar = TRUE;                                                                                     // Makes sure we cannot go through this if statement again
 80a057c:	7023      	strb	r3, [r4, #0]
 80a057e:	e7d9      	b.n	80a0534 <_Z20checkTimeAndPressurev+0x20>
    }
    if ((millis() > overrideUntil || mean >= tankFull) && checkTimeAndPressureVar == TRUE) {                         // If current time exceeds max-pump-on time, or tank is full & and we have gone through the first if statement...
        overrideOff("");                                                                                                    // Call override off function (which turns off the pump)
    }
}
 80a0580:	b005      	add	sp, #20
 80a0582:	bd30      	pop	{r4, r5, pc}
 80a0584:	080a3771 	.word	0x080a3771
 80a0588:	20000098 	.word	0x20000098
 80a058c:	20000084 	.word	0x20000084
 80a0590:	200000b8 	.word	0x200000b8
 80a0594:	200001d0 	.word	0x200001d0
 80a0598:	20000000 	.word	0x20000000
 80a059c:	20000090 	.word	0x20000090
 80a05a0:	080a3868 	.word	0x080a3868
 80a05a4:	20000010 	.word	0x20000010

080a05a8 <loop>:
// of the array and create and publish the new //
// mean and standard deviation. Otherwise,     //
// quickly tske some more data and test again. //
/////////////////////////////////////////////////

void loop() {
 80a05a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    analogVal = analogRead(SENSORPIN);  // Define variable to store analog sensor data
 80a05ac:	200f      	movs	r0, #15
// of the array and create and publish the new //
// mean and standard deviation. Otherwise,     //
// quickly tske some more data and test again. //
/////////////////////////////////////////////////

void loop() {
 80a05ae:	b087      	sub	sp, #28

    analogVal = analogRead(SENSORPIN);  // Define variable to store analog sensor data
 80a05b0:	f001 fea9 	bl	80a2306 <analogRead>
 80a05b4:	4c6a      	ldr	r4, [pc, #424]	; (80a0760 <loop+0x1b8>)
    sAnalogVal = String(analogVal);     // Convert analog data to string for publishing
 80a05b6:	220a      	movs	r2, #10
// quickly tske some more data and test again. //
/////////////////////////////////////////////////

void loop() {

    analogVal = analogRead(SENSORPIN);  // Define variable to store analog sensor data
 80a05b8:	4601      	mov	r1, r0
 80a05ba:	6020      	str	r0, [r4, #0]
    sAnalogVal = String(analogVal);     // Convert analog data to string for publishing
 80a05bc:	a802      	add	r0, sp, #8
 80a05be:	f000 fe1f 	bl	80a1200 <_ZN6StringC1Eih>
 80a05c2:	a902      	add	r1, sp, #8
 80a05c4:	4867      	ldr	r0, [pc, #412]	; (80a0764 <loop+0x1bc>)
 80a05c6:	f000 fe02 	bl	80a11ce <_ZN6StringaSEOS_>
 80a05ca:	a802      	add	r0, sp, #8
 80a05cc:	f000 fd6e 	bl	80a10ac <_ZN6StringD1Ev>
 80a05d0:	f000 faa0 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>

    unsigned long takeDataDelayTime;    // Stores time of previous data taking

    // If current time minus previous time of data taken is greater then our data taking interval...
    if (millis() - takeDataDelayTime >= interval || millis() < (1 * 1000)) {
 80a05d4:	4b64      	ldr	r3, [pc, #400]	; (80a0768 <loop+0x1c0>)
 80a05d6:	681b      	ldr	r3, [r3, #0]
 80a05d8:	4298      	cmp	r0, r3
 80a05da:	d205      	bcs.n	80a05e8 <loop+0x40>
 80a05dc:	f000 fa9a 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
 80a05e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80a05e4:	f080 8092 	bcs.w	80a070c <loop+0x164>
        // If new data taken is w/in X standard deviations of the mean...
        if (mean- 1*stdev < analogVal && analogVal < mean + 2.5*stdev) {
 80a05e8:	6820      	ldr	r0, [r4, #0]
 80a05ea:	f002 fadb 	bl	80a2ba4 <__aeabi_i2d>
 80a05ee:	4604      	mov	r4, r0
 80a05f0:	460d      	mov	r5, r1
 80a05f2:	f8df a1b0 	ldr.w	sl, [pc, #432]	; 80a07a4 <loop+0x1fc>
 80a05f6:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80a07a8 <loop+0x200>
 80a05fa:	e9da 6700 	ldrd	r6, r7, [sl]
 80a05fe:	e9db 8900 	ldrd	r8, r9, [fp]
 80a0602:	4630      	mov	r0, r6
 80a0604:	4642      	mov	r2, r8
 80a0606:	464b      	mov	r3, r9
 80a0608:	4639      	mov	r1, r7
 80a060a:	f002 f97d 	bl	80a2908 <__aeabi_dsub>
 80a060e:	4622      	mov	r2, r4
 80a0610:	462b      	mov	r3, r5
 80a0612:	f002 fd9f 	bl	80a3154 <__aeabi_dcmplt>
 80a0616:	2800      	cmp	r0, #0
 80a0618:	f000 8081 	beq.w	80a071e <loop+0x176>
 80a061c:	2200      	movs	r2, #0
 80a061e:	4b53      	ldr	r3, [pc, #332]	; (80a076c <loop+0x1c4>)
 80a0620:	4640      	mov	r0, r8
 80a0622:	4649      	mov	r1, r9
 80a0624:	f002 fb24 	bl	80a2c70 <__aeabi_dmul>
 80a0628:	4632      	mov	r2, r6
 80a062a:	463b      	mov	r3, r7
 80a062c:	f002 f96e 	bl	80a290c <__adddf3>
 80a0630:	4602      	mov	r2, r0
 80a0632:	460b      	mov	r3, r1
 80a0634:	4620      	mov	r0, r4
 80a0636:	4629      	mov	r1, r5
 80a0638:	f002 fd8c 	bl	80a3154 <__aeabi_dcmplt>
 80a063c:	2800      	cmp	r0, #0
 80a063e:	d06e      	beq.n	80a071e <loop+0x176>
 80a0640:	4b4b      	ldr	r3, [pc, #300]	; (80a0770 <loop+0x1c8>)
 80a0642:	261e      	movs	r6, #30
            // Shifts entire array to the right, and enter enw value in the
            for (int i= numData; i> 0; i--) {
 80a0644:	3e01      	subs	r6, #1
                recentData[i]= recentData[i-1];
 80a0646:	e973 0102 	ldrd	r0, r1, [r3, #-8]!
 80a064a:	e9c3 0102 	strd	r0, r1, [r3, #8]
    // If current time minus previous time of data taken is greater then our data taking interval...
    if (millis() - takeDataDelayTime >= interval || millis() < (1 * 1000)) {
        // If new data taken is w/in X standard deviations of the mean...
        if (mean- 1*stdev < analogVal && analogVal < mean + 2.5*stdev) {
            // Shifts entire array to the right, and enter enw value in the
            for (int i= numData; i> 0; i--) {
 80a064e:	d1f9      	bne.n	80a0644 <loop+0x9c>
                recentData[i]= recentData[i-1];
                }
            recentData[0]= analogVal;
 80a0650:	4f48      	ldr	r7, [pc, #288]	; (80a0774 <loop+0x1cc>)
            // Get new mean and standard deviation
            mean = getMean(recentData, numData);
 80a0652:	211e      	movs	r1, #30
 80a0654:	4638      	mov	r0, r7
        if (mean- 1*stdev < analogVal && analogVal < mean + 2.5*stdev) {
            // Shifts entire array to the right, and enter enw value in the
            for (int i= numData; i> 0; i--) {
                recentData[i]= recentData[i-1];
                }
            recentData[0]= analogVal;
 80a0656:	e9c7 4500 	strd	r4, r5, [r7]
            // Get new mean and standard deviation
            mean = getMean(recentData, numData);
 80a065a:	f7ff fd9d 	bl	80a0198 <_Z7getMeanPdi>
 80a065e:	4602      	mov	r2, r0
 80a0660:	460b      	mov	r3, r1
            stdev = getStdev(recentData, numData, mean);
 80a0662:	4638      	mov	r0, r7
 80a0664:	211e      	movs	r1, #30
            for (int i= numData; i> 0; i--) {
                recentData[i]= recentData[i-1];
                }
            recentData[0]= analogVal;
            // Get new mean and standard deviation
            mean = getMean(recentData, numData);
 80a0666:	e9ca 2300 	strd	r2, r3, [sl]
            stdev = getStdev(recentData, numData, mean);
 80a066a:	f7ff fdb3 	bl	80a01d4 <_Z8getStdevPdid>
            // Convert new mean and standard deviation to string for publishing
            sMean = String(mean);
 80a066e:	e9da 2300 	ldrd	r2, r3, [sl]
 80a0672:	2406      	movs	r4, #6
 80a0674:	4d40      	ldr	r5, [pc, #256]	; (80a0778 <loop+0x1d0>)
                recentData[i]= recentData[i-1];
                }
            recentData[0]= analogVal;
            // Get new mean and standard deviation
            mean = getMean(recentData, numData);
            stdev = getStdev(recentData, numData, mean);
 80a0676:	e9cb 0100 	strd	r0, r1, [fp]
            // Convert new mean and standard deviation to string for publishing
            sMean = String(mean);
 80a067a:	9400      	str	r4, [sp, #0]
 80a067c:	a802      	add	r0, sp, #8
 80a067e:	f000 fdd2 	bl	80a1226 <_ZN6StringC1Edi>
 80a0682:	a902      	add	r1, sp, #8
 80a0684:	4628      	mov	r0, r5
 80a0686:	f000 fda2 	bl	80a11ce <_ZN6StringaSEOS_>
 80a068a:	a802      	add	r0, sp, #8
 80a068c:	f000 fd0e 	bl	80a10ac <_ZN6StringD1Ev>
            sStdev = String(stdev);
 80a0690:	e9db 2300 	ldrd	r2, r3, [fp]
 80a0694:	9400      	str	r4, [sp, #0]
 80a0696:	a802      	add	r0, sp, #8
 80a0698:	f000 fdc5 	bl	80a1226 <_ZN6StringC1Edi>

            // Print new PSI value to LCD screen
            lcd->clear();
 80a069c:	4c37      	ldr	r4, [pc, #220]	; (80a077c <loop+0x1d4>)
            // Get new mean and standard deviation
            mean = getMean(recentData, numData);
            stdev = getStdev(recentData, numData, mean);
            // Convert new mean and standard deviation to string for publishing
            sMean = String(mean);
            sStdev = String(stdev);
 80a069e:	a902      	add	r1, sp, #8
 80a06a0:	4837      	ldr	r0, [pc, #220]	; (80a0780 <loop+0x1d8>)
 80a06a2:	f000 fd94 	bl	80a11ce <_ZN6StringaSEOS_>
 80a06a6:	a802      	add	r0, sp, #8
 80a06a8:	f000 fd00 	bl	80a10ac <_ZN6StringD1Ev>

            // Print new PSI value to LCD screen
            lcd->clear();
 80a06ac:	6820      	ldr	r0, [r4, #0]
 80a06ae:	f000 f943 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>
            lcd->setCursor(0,0);
 80a06b2:	4632      	mov	r2, r6
 80a06b4:	4631      	mov	r1, r6
 80a06b6:	6820      	ldr	r0, [r4, #0]
 80a06b8:	f000 f952 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
            lcd->print((mean/4096)*15);
 80a06bc:	e9da 0100 	ldrd	r0, r1, [sl]
 80a06c0:	2200      	movs	r2, #0
 80a06c2:	4b30      	ldr	r3, [pc, #192]	; (80a0784 <loop+0x1dc>)
 80a06c4:	f002 fad4 	bl	80a2c70 <__aeabi_dmul>
 80a06c8:	2200      	movs	r2, #0
 80a06ca:	4b2f      	ldr	r3, [pc, #188]	; (80a0788 <loop+0x1e0>)
 80a06cc:	f002 fad0 	bl	80a2c70 <__aeabi_dmul>
 80a06d0:	2302      	movs	r3, #2
 80a06d2:	9300      	str	r3, [sp, #0]
 80a06d4:	4602      	mov	r2, r0
 80a06d6:	460b      	mov	r3, r1
 80a06d8:	6820      	ldr	r0, [r4, #0]
 80a06da:	f000 fef5 	bl	80a14c8 <_ZN5Print5printEdi>
            lcd->print(" PSI");
 80a06de:	492b      	ldr	r1, [pc, #172]	; (80a078c <loop+0x1e4>)
 80a06e0:	6820      	ldr	r0, [r4, #0]
 80a06e2:	f000 fe11 	bl	80a1308 <_ZN5Print5printEPKc>
 80a06e6:	4b2a      	ldr	r3, [pc, #168]	; (80a0790 <loop+0x1e8>)
 80a06e8:	682a      	ldr	r2, [r5, #0]
 80a06ea:	781b      	ldrb	r3, [r3, #0]
 80a06ec:	4929      	ldr	r1, [pc, #164]	; (80a0794 <loop+0x1ec>)
 80a06ee:	f88d 3000 	strb.w	r3, [sp]
 80a06f2:	a802      	add	r0, sp, #8
 80a06f4:	233c      	movs	r3, #60	; 0x3c
 80a06f6:	f001 f945 	bl	80a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a06fa:	a803      	add	r0, sp, #12
 80a06fc:	f7ff fe40 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

            // Publish new mean to the Particle Cloud
            Particle.publish("mean", sMean, PUBLIC);

            // Determine if new mean requires turning the pump ON/OFF and send new command to pump.
            sendCommandToPump(mean);
 80a0700:	e9da 0100 	ldrd	r0, r1, [sl]
 80a0704:	f7ff fe52 	bl	80a03ac <_Z17sendCommandToPumpd>
 80a0708:	f000 fa04 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
            delay(5 * 1000);
        }

    }
    //Execute functions that do stuff intermittently and independently of the above if statement
    printPumpStatus();      // Prints the pump status if a change in status is detected
 80a070c:	f7ff fe14 	bl	80a0338 <_Z15printPumpStatusv>
    checkTimeAndPressure(); // Makes sure if the pump is on, it does not overflow or stay on for more than the max set time limit
 80a0710:	f7ff ff00 	bl	80a0514 <_Z20checkTimeAndPressurev>
    syncTime();             // Refreshes onboard clock with Particle.io Cloud time
 80a0714:	f7ff fdfc 	bl	80a0310 <_Z8syncTimev>
}
 80a0718:	b007      	add	sp, #28
 80a071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

            // Set previous data time to current time
            takeDataDelayTime = millis();
        } else {
            // In 5 seconds, take a new reading.
            lcd->clear();
 80a071e:	4c17      	ldr	r4, [pc, #92]	; (80a077c <loop+0x1d4>)
 80a0720:	6820      	ldr	r0, [r4, #0]
 80a0722:	f000 f909 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>
            lcd->setCursor(0,0);
 80a0726:	2200      	movs	r2, #0
 80a0728:	4611      	mov	r1, r2
 80a072a:	6820      	ldr	r0, [r4, #0]
 80a072c:	f000 f918 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
            lcd->print("Out of Range");
 80a0730:	4919      	ldr	r1, [pc, #100]	; (80a0798 <loop+0x1f0>)
 80a0732:	6820      	ldr	r0, [r4, #0]
 80a0734:	f000 fde8 	bl	80a1308 <_ZN5Print5printEPKc>
            lcd->setCursor(0,1);                // Print pump status b/c delay (@ end of else statement) stops the status from updating the LCD.
 80a0738:	2201      	movs	r2, #1
 80a073a:	6820      	ldr	r0, [r4, #0]
 80a073c:	2100      	movs	r1, #0
 80a073e:	f000 f90f 	bl	80a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>
            lcd->print("Pump Status: ");
 80a0742:	4916      	ldr	r1, [pc, #88]	; (80a079c <loop+0x1f4>)
 80a0744:	6820      	ldr	r0, [r4, #0]
 80a0746:	f000 fddf 	bl	80a1308 <_ZN5Print5printEPKc>
 80a074a:	4b15      	ldr	r3, [pc, #84]	; (80a07a0 <loop+0x1f8>)
            lcd->print(localPumpStatus);
 80a074c:	6820      	ldr	r0, [r4, #0]
 80a074e:	6819      	ldr	r1, [r3, #0]
 80a0750:	f000 fdda 	bl	80a1308 <_ZN5Print5printEPKc>
            delay(5 * 1000);
 80a0754:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0758:	f000 feda 	bl	80a1510 <delay>
 80a075c:	e7d6      	b.n	80a070c <loop+0x164>
 80a075e:	bf00      	nop
 80a0760:	200001f4 	.word	0x200001f4
 80a0764:	200001d4 	.word	0x200001d4
 80a0768:	2000000c 	.word	0x2000000c
 80a076c:	40040000 	.word	0x40040000
 80a0770:	200001d0 	.word	0x200001d0
 80a0774:	200000e0 	.word	0x200000e0
 80a0778:	200000a8 	.word	0x200000a8
 80a077c:	200001f0 	.word	0x200001f0
 80a0780:	200000cc 	.word	0x200000cc
 80a0784:	3f300000 	.word	0x3f300000
 80a0788:	402e0000 	.word	0x402e0000
 80a078c:	080a36fd 	.word	0x080a36fd
 80a0790:	20000088 	.word	0x20000088
 80a0794:	080a3775 	.word	0x080a3775
 80a0798:	080a377a 	.word	0x080a377a
 80a079c:	080a3748 	.word	0x080a3748
 80a07a0:	200000b8 	.word	0x200000b8
 80a07a4:	20000090 	.word	0x20000090
 80a07a8:	200001e8 	.word	0x200001e8

080a07ac <_GLOBAL__sub_I_lcd>:
        lcd->setCursor(0,1);
        lcd->print("Pump Status: ");
        lcd->print(localPumpStatus);
        lastLocalPumpStatus = localPumpStatus;
    }
}
 80a07ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a07ae:	4b1f      	ldr	r3, [pc, #124]	; (80a082c <_GLOBAL__sub_I_lcd+0x80>)
 80a07b0:	2200      	movs	r2, #0
 int tankFull = 2100;                     // Analog value when tank is at maximum acceptable capacity (aka, turn off pump)

 // For data publishing & communication
 int analogVal = 0;                       // Stores analog values to be turned into a string for publishing
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 80a07b2:	4e1f      	ldr	r6, [pc, #124]	; (80a0830 <_GLOBAL__sub_I_lcd+0x84>)
 80a07b4:	701a      	strb	r2, [r3, #0]
 80a07b6:	4f1f      	ldr	r7, [pc, #124]	; (80a0834 <_GLOBAL__sub_I_lcd+0x88>)
 80a07b8:	4b1f      	ldr	r3, [pc, #124]	; (80a0838 <_GLOBAL__sub_I_lcd+0x8c>)
 80a07ba:	2201      	movs	r2, #1
 80a07bc:	701a      	strb	r2, [r3, #0]
 80a07be:	4d1f      	ldr	r5, [pc, #124]	; (80a083c <_GLOBAL__sub_I_lcd+0x90>)
 80a07c0:	4c1f      	ldr	r4, [pc, #124]	; (80a0840 <_GLOBAL__sub_I_lcd+0x94>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a07c2:	f000 f967 	bl	80a0a94 <HAL_Pin_Map>
 80a07c6:	4631      	mov	r1, r6
 80a07c8:	4638      	mov	r0, r7
 80a07ca:	f000 fcb6 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a07ce:	4638      	mov	r0, r7
 String sMean;                            // Stores mean values as a string for publishing
 80a07d0:	4f1c      	ldr	r7, [pc, #112]	; (80a0844 <_GLOBAL__sub_I_lcd+0x98>)
 int tankFull = 2100;                     // Analog value when tank is at maximum acceptable capacity (aka, turn off pump)

 // For data publishing & communication
 int analogVal = 0;                       // Stores analog values to be turned into a string for publishing
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 80a07d2:	462a      	mov	r2, r5
 80a07d4:	4621      	mov	r1, r4
 80a07d6:	f001 fe05 	bl	80a23e4 <__aeabi_atexit>
 String sMean;                            // Stores mean values as a string for publishing
 80a07da:	4631      	mov	r1, r6
 80a07dc:	4638      	mov	r0, r7
 80a07de:	f000 fcac 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a07e2:	4638      	mov	r0, r7
 String sStdev;                           // Stores standard deviation values as a string for publishing
 80a07e4:	4f18      	ldr	r7, [pc, #96]	; (80a0848 <_GLOBAL__sub_I_lcd+0x9c>)

 // For data publishing & communication
 int analogVal = 0;                       // Stores analog values to be turned into a string for publishing
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 String sMean;                            // Stores mean values as a string for publishing
 80a07e6:	462a      	mov	r2, r5
 80a07e8:	4621      	mov	r1, r4
 80a07ea:	f001 fdfb 	bl	80a23e4 <__aeabi_atexit>
 String sStdev;                           // Stores standard deviation values as a string for publishing
 80a07ee:	4631      	mov	r1, r6
 80a07f0:	4638      	mov	r0, r7
 80a07f2:	f000 fca2 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a07f6:	4638      	mov	r0, r7
 String localPumpStatus = "OFF";          // Stores "ON" or "OFF" based the pump staus for printing to LCD
 80a07f8:	4f14      	ldr	r7, [pc, #80]	; (80a084c <_GLOBAL__sub_I_lcd+0xa0>)
 // For data publishing & communication
 int analogVal = 0;                       // Stores analog values to be turned into a string for publishing
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 String sMean;                            // Stores mean values as a string for publishing
 String sStdev;                           // Stores standard deviation values as a string for publishing
 80a07fa:	462a      	mov	r2, r5
 80a07fc:	4621      	mov	r1, r4
 80a07fe:	f001 fdf1 	bl	80a23e4 <__aeabi_atexit>
 String localPumpStatus = "OFF";          // Stores "ON" or "OFF" based the pump staus for printing to LCD
 80a0802:	4913      	ldr	r1, [pc, #76]	; (80a0850 <_GLOBAL__sub_I_lcd+0xa4>)
 80a0804:	4638      	mov	r0, r7
 80a0806:	f000 fc98 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a080a:	4638      	mov	r0, r7
 String lastLocalPumpStatus;              // Stores the previous pump status for printing to LCD only when a change in status is detected
 80a080c:	4f11      	ldr	r7, [pc, #68]	; (80a0854 <_GLOBAL__sub_I_lcd+0xa8>)
 int analogVal = 0;                       // Stores analog values to be turned into a string for publishing
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 String sMean;                            // Stores mean values as a string for publishing
 String sStdev;                           // Stores standard deviation values as a string for publishing
 String localPumpStatus = "OFF";          // Stores "ON" or "OFF" based the pump staus for printing to LCD
 80a080e:	462a      	mov	r2, r5
 80a0810:	4621      	mov	r1, r4
 80a0812:	f001 fde7 	bl	80a23e4 <__aeabi_atexit>
 String lastLocalPumpStatus;              // Stores the previous pump status for printing to LCD only when a change in status is detected
 80a0816:	4631      	mov	r1, r6
 80a0818:	4638      	mov	r0, r7
 80a081a:	f000 fc8e 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
 80a081e:	462a      	mov	r2, r5
 80a0820:	4621      	mov	r1, r4
 80a0822:	4638      	mov	r0, r7
        lcd->setCursor(0,1);
        lcd->print("Pump Status: ");
        lcd->print(localPumpStatus);
        lastLocalPumpStatus = localPumpStatus;
    }
}
 80a0824:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 bool pumpCommand = FALSE;                // Tracks pump status to be turned into a string for publishing (initialized to off)
 String sAnalogVal;                       // Stores analog values as a string for publishing
 String sMean;                            // Stores mean values as a string for publishing
 String sStdev;                           // Stores standard deviation values as a string for publishing
 String localPumpStatus = "OFF";          // Stores "ON" or "OFF" based the pump staus for printing to LCD
 String lastLocalPumpStatus;              // Stores the previous pump status for printing to LCD only when a change in status is detected
 80a0828:	f001 bddc 	b.w	80a23e4 <__aeabi_atexit>
 80a082c:	20000088 	.word	0x20000088
 80a0830:	080a3868 	.word	0x080a3868
 80a0834:	200001d4 	.word	0x200001d4
 80a0838:	200000c8 	.word	0x200000c8
 80a083c:	20000080 	.word	0x20000080
 80a0840:	080a10ad 	.word	0x080a10ad
 80a0844:	200000a8 	.word	0x200000a8
 80a0848:	200000cc 	.word	0x200000cc
 80a084c:	200000b8 	.word	0x200000b8
 80a0850:	080a3771 	.word	0x080a3771
 80a0854:	20000098 	.word	0x20000098

080a0858 <_ZN17LiquidCrystal_I2CD1Ev>:

//#define En B00000100  // Enable bit
//#define Rw B00000010  // Read/Write bit
//#define Rs B00000001  // Register select bit

class LiquidCrystal_I2C : public Print {
 80a0858:	4770      	bx	lr

080a085a <_ZN17LiquidCrystal_I2CD0Ev>:
 80a085a:	b510      	push	{r4, lr}
 80a085c:	4604      	mov	r4, r0
 80a085e:	2110      	movs	r1, #16
 80a0860:	f001 fdce 	bl	80a2400 <_ZdlPvj>
 80a0864:	4620      	mov	r0, r4
 80a0866:	bd10      	pop	{r4, pc}

080a0868 <_ZN17LiquidCrystal_I2CC1Ehhh>:
#include "application.h"

#include "LiquidCrystal_I2C_Spark.h"


LiquidCrystal_I2C::LiquidCrystal_I2C(uint8_t lcd_Addr,uint8_t lcd_cols,uint8_t lcd_rows)
 80a0868:	b570      	push	{r4, r5, r6, lr}
 80a086a:	4e04      	ldr	r6, [pc, #16]	; (80a087c <_ZN17LiquidCrystal_I2CC1Ehhh+0x14>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a086c:	2500      	movs	r5, #0
 80a086e:	6045      	str	r5, [r0, #4]
 80a0870:	6006      	str	r6, [r0, #0]
{
  _Addr = lcd_Addr;
 80a0872:	7201      	strb	r1, [r0, #8]
  _cols = lcd_cols;
 80a0874:	7342      	strb	r2, [r0, #13]
  _rows = lcd_rows;
 80a0876:	7383      	strb	r3, [r0, #14]
  _backlightval = LCD_NOBACKLIGHT;
 80a0878:	73c5      	strb	r5, [r0, #15]
}
 80a087a:	bd70      	pop	{r4, r5, r6, pc}
 80a087c:	080a3790 	.word	0x080a3790

080a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>:
void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
}

void LiquidCrystal_I2C::expanderWrite(uint8_t _data){
 80a0880:	b538      	push	{r3, r4, r5, lr}
 80a0882:	4604      	mov	r4, r0
 80a0884:	460d      	mov	r5, r1
        Wire.beginTransmission(_Addr);
 80a0886:	f001 fd87 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a088a:	7a21      	ldrb	r1, [r4, #8]
 80a088c:	f001 fc14 	bl	80a20b8 <_ZN7TwoWire17beginTransmissionEh>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0890:	2002      	movs	r0, #2
 80a0892:	f000 f937 	bl	80a0b04 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.write((int)(_data) | _backlightval);
 80a0896:	f001 fd7f 	bl	80a2398 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a089a:	7be1      	ldrb	r1, [r4, #15]
 80a089c:	6803      	ldr	r3, [r0, #0]
 80a089e:	4329      	orrs	r1, r5
 80a08a0:	689b      	ldr	r3, [r3, #8]
 80a08a2:	4798      	blx	r3
 80a08a4:	2002      	movs	r0, #2
 80a08a6:	f000 f92d 	bl	80a0b04 <HAL_Delay_Microseconds>
        delayMicroseconds(2);
        Wire.endTransmission();
 80a08aa:	f001 fd75 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a08ae:	f001 fc0b 	bl	80a20c8 <_ZN7TwoWire15endTransmissionEv>
        delayMicroseconds(2);
        }
 80a08b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a08b6:	2002      	movs	r0, #2
 80a08b8:	f000 b924 	b.w	80a0b04 <HAL_Delay_Microseconds>

080a08bc <_ZN17LiquidCrystal_I2C9backlightEv>:
        _backlightval=LCD_NOBACKLIGHT;
        expanderWrite(0);
}

void LiquidCrystal_I2C::backlight(void) {
        _backlightval=LCD_BACKLIGHT;
 80a08bc:	2308      	movs	r3, #8
 80a08be:	73c3      	strb	r3, [r0, #15]
        expanderWrite(0);
 80a08c0:	2100      	movs	r1, #0
 80a08c2:	f7ff bfdd 	b.w	80a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>

080a08c6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>:
        delayMicroseconds(2);
        Wire.endTransmission();
        delayMicroseconds(2);
        }

void LiquidCrystal_I2C::pulseEnable(uint8_t _data){
 80a08c6:	b538      	push	{r3, r4, r5, lr}
 80a08c8:	4605      	mov	r5, r0
 80a08ca:	460c      	mov	r4, r1
        expanderWrite(_data | (1<<2));  // En high
 80a08cc:	f041 0104 	orr.w	r1, r1, #4
 80a08d0:	f7ff ffd6 	bl	80a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
 80a08d4:	2001      	movs	r0, #1
 80a08d6:	f000 f915 	bl	80a0b04 <HAL_Delay_Microseconds>
        delayMicroseconds(1);           // enable pulse must be >450ns

        expanderWrite(_data & ~(1<<2)); // En low
 80a08da:	4628      	mov	r0, r5
 80a08dc:	f004 01fb 	and.w	r1, r4, #251	; 0xfb
 80a08e0:	f7ff ffce 	bl	80a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delayMicroseconds(50);          // commands need > 37us to settle
}
 80a08e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a08e8:	2032      	movs	r0, #50	; 0x32
 80a08ea:	f000 b90b 	b.w	80a0b04 <HAL_Delay_Microseconds>

080a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>:
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
 80a08ee:	b538      	push	{r3, r4, r5, lr}
 80a08f0:	4604      	mov	r4, r0
 80a08f2:	460d      	mov	r5, r1
        expanderWrite(value);
 80a08f4:	f7ff ffc4 	bl	80a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        pulseEnable(value);
 80a08f8:	4629      	mov	r1, r5
 80a08fa:	4620      	mov	r0, r4
}
 80a08fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        write4bits((lownib)|mode);
}

void LiquidCrystal_I2C::write4bits(uint8_t value) {
        expanderWrite(value);
        pulseEnable(value);
 80a0900:	f7ff bfe1 	b.w	80a08c6 <_ZN17LiquidCrystal_I2C11pulseEnableEh>

080a0904 <_ZN17LiquidCrystal_I2C4sendEhh>:


/************ low level data pushing commands **********/

// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
 80a0904:	b570      	push	{r4, r5, r6, lr}
 80a0906:	460d      	mov	r5, r1
 80a0908:	4614      	mov	r4, r2
 80a090a:	4606      	mov	r6, r0
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
 80a090c:	f021 010f 	bic.w	r1, r1, #15
 80a0910:	4311      	orrs	r1, r2
 80a0912:	f7ff ffec 	bl	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
        write4bits((lownib)|mode);
 80a0916:	ea44 1105 	orr.w	r1, r4, r5, lsl #4
 80a091a:	4630      	mov	r0, r6
}
 80a091c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// write either command or data
void LiquidCrystal_I2C::send(uint8_t value, uint8_t mode) {
        uint8_t highnib=value&0xf0;
        uint8_t lownib=(value<<4)&0xf0;
       write4bits((highnib)|mode);
        write4bits((lownib)|mode);
 80a0920:	b2c9      	uxtb	r1, r1
 80a0922:	f7ff bfe4 	b.w	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>

080a0926 <_ZN17LiquidCrystal_I2C5writeEh>:

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
}

inline size_t LiquidCrystal_I2C::write(uint8_t value) {
 80a0926:	b508      	push	{r3, lr}
        send(value, 1);
 80a0928:	2201      	movs	r2, #1
 80a092a:	f7ff ffeb 	bl	80a0904 <_ZN17LiquidCrystal_I2C4sendEhh>
        return 0;
}
 80a092e:	2000      	movs	r0, #0
 80a0930:	bd08      	pop	{r3, pc}

080a0932 <_ZN17LiquidCrystal_I2C7commandEh>:


/*********** mid level commands, for sending data/cmds */

inline void LiquidCrystal_I2C::command(uint8_t value) {
        send(value, 0);
 80a0932:	2200      	movs	r2, #0
 80a0934:	f7ff bfe6 	b.w	80a0904 <_ZN17LiquidCrystal_I2C4sendEhh>

080a0938 <_ZN17LiquidCrystal_I2C5clearEv>:
}



/********** high level commands, for the user! */
void LiquidCrystal_I2C::clear(){
 80a0938:	b508      	push	{r3, lr}
        command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 80a093a:	2101      	movs	r1, #1
 80a093c:	f7ff fff9 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0940:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0944:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0948:	f000 b8dc 	b.w	80a0b04 <HAL_Delay_Microseconds>

080a094c <_ZN17LiquidCrystal_I2C4homeEv>:

void LiquidCrystal_I2C::home(){
 80a094c:	b508      	push	{r3, lr}
        command(LCD_RETURNHOME);  // set cursor position to zero
 80a094e:	2102      	movs	r1, #2
 80a0950:	f7ff ffef 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>
        delayMicroseconds(2000);  // this command takes a long time!
}
 80a0954:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80a0958:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a095c:	f000 b8d2 	b.w	80a0b04 <HAL_Delay_Microseconds>

080a0960 <_ZN17LiquidCrystal_I2C9setCursorEhh>:

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
 80a0960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80a0962:	4605      	mov	r5, r0
 80a0964:	4614      	mov	r4, r2
 80a0966:	460e      	mov	r6, r1
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 80a0968:	4b0c      	ldr	r3, [pc, #48]	; (80a099c <_ZN17LiquidCrystal_I2C9setCursorEhh+0x3c>)
 80a096a:	f10d 0e10 	add.w	lr, sp, #16
 80a096e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80a0970:	e90e 000f 	stmdb	lr, {r0, r1, r2, r3}
        if ( row > _numlines ) {
 80a0974:	7b2b      	ldrb	r3, [r5, #12]
                row = _numlines-1;    // we count rows starting w/0
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0976:	4628      	mov	r0, r5
        delayMicroseconds(2000);  // this command takes a long time!
}

void LiquidCrystal_I2C::setCursor(uint8_t col, uint8_t row){
        int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
        if ( row > _numlines ) {
 80a0978:	42a3      	cmp	r3, r4
                row = _numlines-1;    // we count rows starting w/0
 80a097a:	bf3c      	itt	cc
 80a097c:	f103 34ff 	addcc.w	r4, r3, #4294967295
 80a0980:	b2e4      	uxtbcc	r4, r4
        }
        command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80a0982:	ab04      	add	r3, sp, #16
 80a0984:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80a0988:	f854 1c10 	ldr.w	r1, [r4, #-16]
 80a098c:	4431      	add	r1, r6
 80a098e:	f061 017f 	orn	r1, r1, #127	; 0x7f
 80a0992:	b2c9      	uxtb	r1, r1
 80a0994:	f7ff ffcd 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>
}
 80a0998:	b004      	add	sp, #16
 80a099a:	bd70      	pop	{r4, r5, r6, pc}
 80a099c:	080a37a0 	.word	0x080a37a0

080a09a0 <_ZN17LiquidCrystal_I2C7displayEv>:
// Turn the display on/off (quickly)
void LiquidCrystal_I2C::noDisplay() {
        _displaycontrol &= ~LCD_DISPLAYON;
        command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void LiquidCrystal_I2C::display() {
 80a09a0:	b508      	push	{r3, lr}
        _displaycontrol |= LCD_DISPLAYON;
 80a09a2:	7a81      	ldrb	r1, [r0, #10]
 80a09a4:	f041 0204 	orr.w	r2, r1, #4
 80a09a8:	7282      	strb	r2, [r0, #10]
        command(LCD_DISPLAYCONTROL | _displaycontrol);
 80a09aa:	f041 010c 	orr.w	r1, r1, #12
 80a09ae:	f7ff ffc0 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>
 80a09b2:	bd08      	pop	{r3, pc}

080a09b4 <_ZN17LiquidCrystal_I2C5beginEhhh>:
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a09b4:	b510      	push	{r4, lr}
        if (lines > 1) {
 80a09b6:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_2LINE;
 80a09b8:	bf88      	it	hi
 80a09ba:	7a41      	ldrbhi	r1, [r0, #9]
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
}

void LiquidCrystal_I2C::begin(uint8_t cols, uint8_t lines, uint8_t dotsize) {
 80a09bc:	4604      	mov	r4, r0
        if (lines > 1) {
                _displayfunction |= LCD_2LINE;
 80a09be:	bf84      	itt	hi
 80a09c0:	f041 0108 	orrhi.w	r1, r1, #8
 80a09c4:	7241      	strbhi	r1, [r0, #9]
        }
        _numlines = lines;
 80a09c6:	7302      	strb	r2, [r0, #12]

        // for some 1 line displays you can select a 10 pixel high font
        if ((dotsize != 0) && (lines == 1)) {
 80a09c8:	b12b      	cbz	r3, 80a09d6 <_ZN17LiquidCrystal_I2C5beginEhhh+0x22>
 80a09ca:	2a01      	cmp	r2, #1
                _displayfunction |= LCD_5x10DOTS;
 80a09cc:	bf02      	ittt	eq
 80a09ce:	7a43      	ldrbeq	r3, [r0, #9]
 80a09d0:	f043 0304 	orreq.w	r3, r3, #4
 80a09d4:	7243      	strbeq	r3, [r0, #9]
        }

        // SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
        // according to datasheet, we need at least 40ms after power rises above 2.7V
        // before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
        delay(50);
 80a09d6:	2032      	movs	r0, #50	; 0x32
 80a09d8:	f000 fd9a 	bl	80a1510 <delay>

        // Now we pull both RS and R/W low to begin commands
        expanderWrite(_backlightval);   // reset expanderand turn backlight off (Bit 8 =1)
 80a09dc:	7be1      	ldrb	r1, [r4, #15]
 80a09de:	4620      	mov	r0, r4
 80a09e0:	f7ff ff4e 	bl	80a0880 <_ZN17LiquidCrystal_I2C13expanderWriteEh>
        delay(1000);
 80a09e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a09e8:	f000 fd92 	bl	80a1510 <delay>
        //put the LCD into 4 bit mode
        // this is according to the hitachi HD44780 datasheet
        // figure 24, pg 46

          // we start in 8bit mode, try to set 4 bit mode
   write4bits(0x03 << 4);
 80a09ec:	2130      	movs	r1, #48	; 0x30
 80a09ee:	4620      	mov	r0, r4
 80a09f0:	f7ff ff7d 	bl	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a09f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80a09f8:	f000 f884 	bl	80a0b04 <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // second try
   write4bits(0x03 << 4);
 80a09fc:	2130      	movs	r1, #48	; 0x30
 80a09fe:	4620      	mov	r0, r4
 80a0a00:	f7ff ff75 	bl	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0a04:	f241 1094 	movw	r0, #4500	; 0x1194
 80a0a08:	f000 f87c 	bl	80a0b04 <HAL_Delay_Microseconds>
   delayMicroseconds(4500); // wait min 4.1ms

   // third go!
   write4bits(0x03 << 4);
 80a0a0c:	2130      	movs	r1, #48	; 0x30
 80a0a0e:	4620      	mov	r0, r4
 80a0a10:	f7ff ff6d 	bl	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>
 80a0a14:	2096      	movs	r0, #150	; 0x96
 80a0a16:	f000 f875 	bl	80a0b04 <HAL_Delay_Microseconds>
   delayMicroseconds(150);

   // finally, set to 4-bit interface
   write4bits(0x02 << 4);
 80a0a1a:	4620      	mov	r0, r4
 80a0a1c:	2120      	movs	r1, #32
 80a0a1e:	f7ff ff66 	bl	80a08ee <_ZN17LiquidCrystal_I2C10write4bitsEh>



        // set # lines, font size, etc.
        command(LCD_FUNCTIONSET | _displayfunction);
 80a0a22:	7a61      	ldrb	r1, [r4, #9]
 80a0a24:	4620      	mov	r0, r4
 80a0a26:	f041 0120 	orr.w	r1, r1, #32
 80a0a2a:	f7ff ff82 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>

        // turn the display on with no cursor or blinking default
        _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80a0a2e:	2304      	movs	r3, #4
 80a0a30:	72a3      	strb	r3, [r4, #10]
        display();
 80a0a32:	4620      	mov	r0, r4
 80a0a34:	f7ff ffb4 	bl	80a09a0 <_ZN17LiquidCrystal_I2C7displayEv>

        // clear it off
        clear();
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	f7ff ff7d 	bl	80a0938 <_ZN17LiquidCrystal_I2C5clearEv>

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0a3e:	2302      	movs	r3, #2

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0a40:	4620      	mov	r0, r4

        // clear it off
        clear();

        // Initialize to default text direction (for roman languages)
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80a0a42:	72e3      	strb	r3, [r4, #11]

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);
 80a0a44:	2106      	movs	r1, #6
 80a0a46:	f7ff ff74 	bl	80a0932 <_ZN17LiquidCrystal_I2C7commandEh>

        home();
 80a0a4a:	4620      	mov	r0, r4

}
 80a0a4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;

        // set the entry mode
        command(LCD_ENTRYMODESET | _displaymode);

        home();
 80a0a50:	f7ff bf7c 	b.w	80a094c <_ZN17LiquidCrystal_I2C4homeEv>

080a0a54 <_ZN17LiquidCrystal_I2C9init_privEv>:
void LiquidCrystal_I2C::init(){
        init_priv();
}

void LiquidCrystal_I2C::init_priv()
{
 80a0a54:	b510      	push	{r4, lr}
 80a0a56:	4604      	mov	r4, r0
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
 80a0a58:	f001 fc9e 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a0a5c:	490a      	ldr	r1, [pc, #40]	; (80a0a88 <_ZN17LiquidCrystal_I2C9init_privEv+0x34>)
 80a0a5e:	f001 fb1d 	bl	80a209c <_ZN7TwoWire8setSpeedEm>
        Wire.stretchClock(true);
 80a0a62:	f001 fc99 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a0a66:	2101      	movs	r1, #1
 80a0a68:	f001 fb1c 	bl	80a20a4 <_ZN7TwoWire12stretchClockEb>
        Wire.begin();
 80a0a6c:	f001 fc94 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a0a70:	f001 fb1c 	bl	80a20ac <_ZN7TwoWire5beginEv>
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 80a0a74:	2300      	movs	r3, #0
 80a0a76:	7263      	strb	r3, [r4, #9]
        begin(_cols, _rows);
 80a0a78:	7ba2      	ldrb	r2, [r4, #14]
 80a0a7a:	7b61      	ldrb	r1, [r4, #13]
 80a0a7c:	4620      	mov	r0, r4
}
 80a0a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
        Wire.setSpeed(CLOCK_SPEED_100KHZ);
        Wire.stretchClock(true);
        Wire.begin();
        _displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
        begin(_cols, _rows);
 80a0a82:	f7ff bf97 	b.w	80a09b4 <_ZN17LiquidCrystal_I2C5beginEhhh>
 80a0a86:	bf00      	nop
 80a0a88:	000186a0 	.word	0x000186a0

080a0a8c <_ZN17LiquidCrystal_I2C4initEv>:
  _rows = lcd_rows;
  _backlightval = LCD_NOBACKLIGHT;
}

void LiquidCrystal_I2C::init(){
        init_priv();
 80a0a8c:	f7ff bfe2 	b.w	80a0a54 <_ZN17LiquidCrystal_I2C9init_privEv>

080a0a90 <_GLOBAL__sub_I__ZN17LiquidCrystal_I2CC2Ehhh>:
 80a0a90:	f000 b800 	b.w	80a0a94 <HAL_Pin_Map>

080a0a94 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a0a94:	b508      	push	{r3, lr}
 80a0a96:	4b02      	ldr	r3, [pc, #8]	; (80a0aa0 <HAL_Pin_Map+0xc>)
 80a0a98:	681b      	ldr	r3, [r3, #0]
 80a0a9a:	681b      	ldr	r3, [r3, #0]
 80a0a9c:	9301      	str	r3, [sp, #4]
 80a0a9e:	bd08      	pop	{r3, pc}
 80a0aa0:	080601b0 	.word	0x080601b0

080a0aa4 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a0aa4:	b508      	push	{r3, lr}
 80a0aa6:	4b02      	ldr	r3, [pc, #8]	; (80a0ab0 <HAL_Validate_Pin_Function+0xc>)
 80a0aa8:	681b      	ldr	r3, [r3, #0]
 80a0aaa:	685b      	ldr	r3, [r3, #4]
 80a0aac:	9301      	str	r3, [sp, #4]
 80a0aae:	bd08      	pop	{r3, pc}
 80a0ab0:	080601b0 	.word	0x080601b0

080a0ab4 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a0ab4:	b508      	push	{r3, lr}
 80a0ab6:	4b02      	ldr	r3, [pc, #8]	; (80a0ac0 <HAL_Pin_Mode+0xc>)
 80a0ab8:	681b      	ldr	r3, [r3, #0]
 80a0aba:	689b      	ldr	r3, [r3, #8]
 80a0abc:	9301      	str	r3, [sp, #4]
 80a0abe:	bd08      	pop	{r3, pc}
 80a0ac0:	080601b0 	.word	0x080601b0

080a0ac4 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a0ac4:	b508      	push	{r3, lr}
 80a0ac6:	4b02      	ldr	r3, [pc, #8]	; (80a0ad0 <HAL_ADC_Read+0xc>)
 80a0ac8:	681b      	ldr	r3, [r3, #0]
 80a0aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0acc:	9301      	str	r3, [sp, #4]
 80a0ace:	bd08      	pop	{r3, pc}
 80a0ad0:	080601b0 	.word	0x080601b0

080a0ad4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0ad4:	b508      	push	{r3, lr}
 80a0ad6:	4b02      	ldr	r3, [pc, #8]	; (80a0ae0 <HAL_SPI_Init+0xc>)
 80a0ad8:	681b      	ldr	r3, [r3, #0]
 80a0ada:	69db      	ldr	r3, [r3, #28]
 80a0adc:	9301      	str	r3, [sp, #4]
 80a0ade:	bd08      	pop	{r3, pc}
 80a0ae0:	080601b4 	.word	0x080601b4

080a0ae4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0ae4:	b508      	push	{r3, lr}
 80a0ae6:	4b02      	ldr	r3, [pc, #8]	; (80a0af0 <HAL_SPI_Is_Enabled+0xc>)
 80a0ae8:	681b      	ldr	r3, [r3, #0]
 80a0aea:	6a1b      	ldr	r3, [r3, #32]
 80a0aec:	9301      	str	r3, [sp, #4]
 80a0aee:	bd08      	pop	{r3, pc}
 80a0af0:	080601b4 	.word	0x080601b4

080a0af4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b02      	ldr	r3, [pc, #8]	; (80a0b00 <HAL_RNG_GetRandomNumber+0xc>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	685b      	ldr	r3, [r3, #4]
 80a0afc:	9301      	str	r3, [sp, #4]
 80a0afe:	bd08      	pop	{r3, pc}
 80a0b00:	0806019c 	.word	0x0806019c

080a0b04 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a0b04:	b508      	push	{r3, lr}
 80a0b06:	4b02      	ldr	r3, [pc, #8]	; (80a0b10 <HAL_Delay_Microseconds+0xc>)
 80a0b08:	681b      	ldr	r3, [r3, #0]
 80a0b0a:	68db      	ldr	r3, [r3, #12]
 80a0b0c:	9301      	str	r3, [sp, #4]
 80a0b0e:	bd08      	pop	{r3, pc}
 80a0b10:	0806019c 	.word	0x0806019c

080a0b14 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a0b14:	b508      	push	{r3, lr}
 80a0b16:	4b02      	ldr	r3, [pc, #8]	; (80a0b20 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	695b      	ldr	r3, [r3, #20]
 80a0b1c:	9301      	str	r3, [sp, #4]
 80a0b1e:	bd08      	pop	{r3, pc}
 80a0b20:	0806019c 	.word	0x0806019c

080a0b24 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 80a0b24:	b508      	push	{r3, lr}
 80a0b26:	4b02      	ldr	r3, [pc, #8]	; (80a0b30 <os_mutex_recursive_create+0xc>)
 80a0b28:	681b      	ldr	r3, [r3, #0]
 80a0b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a0b2c:	9301      	str	r3, [sp, #4]
 80a0b2e:	bd08      	pop	{r3, pc}
 80a0b30:	080601d0 	.word	0x080601d0

080a0b34 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
 80a0b34:	b508      	push	{r3, lr}
 80a0b36:	4b02      	ldr	r3, [pc, #8]	; (80a0b40 <os_mutex_recursive_destroy+0xc>)
 80a0b38:	681b      	ldr	r3, [r3, #0]
 80a0b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0b3c:	9301      	str	r3, [sp, #4]
 80a0b3e:	bd08      	pop	{r3, pc}
 80a0b40:	080601d0 	.word	0x080601d0

080a0b44 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0b44:	b508      	push	{r3, lr}
 80a0b46:	4b02      	ldr	r3, [pc, #8]	; (80a0b50 <HAL_USART_Init+0xc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	699b      	ldr	r3, [r3, #24]
 80a0b4c:	9301      	str	r3, [sp, #4]
 80a0b4e:	bd08      	pop	{r3, pc}
 80a0b50:	080601c4 	.word	0x080601c4

080a0b54 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0b54:	b508      	push	{r3, lr}
 80a0b56:	4b02      	ldr	r3, [pc, #8]	; (80a0b60 <HAL_USART_Write_Data+0xc>)
 80a0b58:	681b      	ldr	r3, [r3, #0]
 80a0b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0b5c:	9301      	str	r3, [sp, #4]
 80a0b5e:	bd08      	pop	{r3, pc}
 80a0b60:	080601c4 	.word	0x080601c4

080a0b64 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a0b64:	b508      	push	{r3, lr}
 80a0b66:	4b02      	ldr	r3, [pc, #8]	; (80a0b70 <HAL_USART_Available_Data+0xc>)
 80a0b68:	681b      	ldr	r3, [r3, #0]
 80a0b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0b6c:	9301      	str	r3, [sp, #4]
 80a0b6e:	bd08      	pop	{r3, pc}
 80a0b70:	080601c4 	.word	0x080601c4

080a0b74 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a0b74:	b508      	push	{r3, lr}
 80a0b76:	4b02      	ldr	r3, [pc, #8]	; (80a0b80 <HAL_USART_Read_Data+0xc>)
 80a0b78:	681b      	ldr	r3, [r3, #0]
 80a0b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0b7c:	9301      	str	r3, [sp, #4]
 80a0b7e:	bd08      	pop	{r3, pc}
 80a0b80:	080601c4 	.word	0x080601c4

080a0b84 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a0b84:	b508      	push	{r3, lr}
 80a0b86:	4b02      	ldr	r3, [pc, #8]	; (80a0b90 <HAL_USART_Peek_Data+0xc>)
 80a0b88:	681b      	ldr	r3, [r3, #0]
 80a0b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0b8c:	9301      	str	r3, [sp, #4]
 80a0b8e:	bd08      	pop	{r3, pc}
 80a0b90:	080601c4 	.word	0x080601c4

080a0b94 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a0b94:	b508      	push	{r3, lr}
 80a0b96:	4b02      	ldr	r3, [pc, #8]	; (80a0ba0 <HAL_USART_Flush_Data+0xc>)
 80a0b98:	681b      	ldr	r3, [r3, #0]
 80a0b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0b9c:	9301      	str	r3, [sp, #4]
 80a0b9e:	bd08      	pop	{r3, pc}
 80a0ba0:	080601c4 	.word	0x080601c4

080a0ba4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a0ba4:	b508      	push	{r3, lr}
 80a0ba6:	4b02      	ldr	r3, [pc, #8]	; (80a0bb0 <HAL_USART_Is_Enabled+0xc>)
 80a0ba8:	681b      	ldr	r3, [r3, #0]
 80a0baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a0bac:	9301      	str	r3, [sp, #4]
 80a0bae:	bd08      	pop	{r3, pc}
 80a0bb0:	080601c4 	.word	0x080601c4

080a0bb4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a0bb4:	b508      	push	{r3, lr}
 80a0bb6:	4b02      	ldr	r3, [pc, #8]	; (80a0bc0 <HAL_USART_Available_Data_For_Write+0xc>)
 80a0bb8:	681b      	ldr	r3, [r3, #0]
 80a0bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bbc:	9301      	str	r3, [sp, #4]
 80a0bbe:	bd08      	pop	{r3, pc}
 80a0bc0:	080601c4 	.word	0x080601c4

080a0bc4 <HAL_I2C_Set_Speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
 80a0bc4:	b508      	push	{r3, lr}
 80a0bc6:	4b02      	ldr	r3, [pc, #8]	; (80a0bd0 <HAL_I2C_Set_Speed+0xc>)
 80a0bc8:	681b      	ldr	r3, [r3, #0]
 80a0bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a0bcc:	9301      	str	r3, [sp, #4]
 80a0bce:	bd08      	pop	{r3, pc}
 80a0bd0:	080601ac 	.word	0x080601ac

080a0bd4 <HAL_I2C_Stretch_Clock>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
 80a0bd4:	b508      	push	{r3, lr}
 80a0bd6:	4b02      	ldr	r3, [pc, #8]	; (80a0be0 <HAL_I2C_Stretch_Clock+0xc>)
 80a0bd8:	681b      	ldr	r3, [r3, #0]
 80a0bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0bdc:	9301      	str	r3, [sp, #4]
 80a0bde:	bd08      	pop	{r3, pc}
 80a0be0:	080601ac 	.word	0x080601ac

080a0be4 <HAL_I2C_Begin>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a0be4:	b508      	push	{r3, lr}
 80a0be6:	4b02      	ldr	r3, [pc, #8]	; (80a0bf0 <HAL_I2C_Begin+0xc>)
 80a0be8:	681b      	ldr	r3, [r3, #0]
 80a0bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0bec:	9301      	str	r3, [sp, #4]
 80a0bee:	bd08      	pop	{r3, pc}
 80a0bf0:	080601ac 	.word	0x080601ac

080a0bf4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
 80a0bf4:	b508      	push	{r3, lr}
 80a0bf6:	4b02      	ldr	r3, [pc, #8]	; (80a0c00 <HAL_I2C_Begin_Transmission+0xc>)
 80a0bf8:	681b      	ldr	r3, [r3, #0]
 80a0bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a0bfc:	9301      	str	r3, [sp, #4]
 80a0bfe:	bd08      	pop	{r3, pc}
 80a0c00:	080601ac 	.word	0x080601ac

080a0c04 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a0c04:	b508      	push	{r3, lr}
 80a0c06:	4b02      	ldr	r3, [pc, #8]	; (80a0c10 <HAL_I2C_End_Transmission+0xc>)
 80a0c08:	681b      	ldr	r3, [r3, #0]
 80a0c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a0c0c:	9301      	str	r3, [sp, #4]
 80a0c0e:	bd08      	pop	{r3, pc}
 80a0c10:	080601ac 	.word	0x080601ac

080a0c14 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a0c14:	b508      	push	{r3, lr}
 80a0c16:	4b02      	ldr	r3, [pc, #8]	; (80a0c20 <HAL_I2C_Write_Data+0xc>)
 80a0c18:	681b      	ldr	r3, [r3, #0]
 80a0c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a0c1c:	9301      	str	r3, [sp, #4]
 80a0c1e:	bd08      	pop	{r3, pc}
 80a0c20:	080601ac 	.word	0x080601ac

080a0c24 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c24:	b508      	push	{r3, lr}
 80a0c26:	4b02      	ldr	r3, [pc, #8]	; (80a0c30 <HAL_I2C_Available_Data+0xc>)
 80a0c28:	681b      	ldr	r3, [r3, #0]
 80a0c2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0c2c:	9301      	str	r3, [sp, #4]
 80a0c2e:	bd08      	pop	{r3, pc}
 80a0c30:	080601ac 	.word	0x080601ac

080a0c34 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c34:	b508      	push	{r3, lr}
 80a0c36:	4b02      	ldr	r3, [pc, #8]	; (80a0c40 <HAL_I2C_Read_Data+0xc>)
 80a0c38:	681b      	ldr	r3, [r3, #0]
 80a0c3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0c3c:	9301      	str	r3, [sp, #4]
 80a0c3e:	bd08      	pop	{r3, pc}
 80a0c40:	080601ac 	.word	0x080601ac

080a0c44 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a0c44:	b508      	push	{r3, lr}
 80a0c46:	4b02      	ldr	r3, [pc, #8]	; (80a0c50 <HAL_I2C_Peek_Data+0xc>)
 80a0c48:	681b      	ldr	r3, [r3, #0]
 80a0c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0c4c:	9301      	str	r3, [sp, #4]
 80a0c4e:	bd08      	pop	{r3, pc}
 80a0c50:	080601ac 	.word	0x080601ac

080a0c54 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a0c54:	b508      	push	{r3, lr}
 80a0c56:	4b02      	ldr	r3, [pc, #8]	; (80a0c60 <HAL_I2C_Flush_Data+0xc>)
 80a0c58:	681b      	ldr	r3, [r3, #0]
 80a0c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0c5c:	9301      	str	r3, [sp, #4]
 80a0c5e:	bd08      	pop	{r3, pc}
 80a0c60:	080601ac 	.word	0x080601ac

080a0c64 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a0c64:	b508      	push	{r3, lr}
 80a0c66:	4b02      	ldr	r3, [pc, #8]	; (80a0c70 <HAL_I2C_Is_Enabled+0xc>)
 80a0c68:	681b      	ldr	r3, [r3, #0]
 80a0c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0c6c:	9301      	str	r3, [sp, #4]
 80a0c6e:	bd08      	pop	{r3, pc}
 80a0c70:	080601ac 	.word	0x080601ac

080a0c74 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
 80a0c74:	b508      	push	{r3, lr}
 80a0c76:	4b03      	ldr	r3, [pc, #12]	; (80a0c84 <HAL_I2C_Init+0x10>)
 80a0c78:	681b      	ldr	r3, [r3, #0]
 80a0c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0c7e:	9301      	str	r3, [sp, #4]
 80a0c80:	bd08      	pop	{r3, pc}
 80a0c82:	0000      	.short	0x0000
 80a0c84:	080601ac 	.word	0x080601ac

080a0c88 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0c88:	b508      	push	{r3, lr}
 80a0c8a:	4b02      	ldr	r3, [pc, #8]	; (80a0c94 <HAL_USB_USART_Init+0xc>)
 80a0c8c:	681b      	ldr	r3, [r3, #0]
 80a0c8e:	681b      	ldr	r3, [r3, #0]
 80a0c90:	9301      	str	r3, [sp, #4]
 80a0c92:	bd08      	pop	{r3, pc}
 80a0c94:	080601d8 	.word	0x080601d8

080a0c98 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0c98:	b508      	push	{r3, lr}
 80a0c9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ca4 <HAL_USB_USART_Begin+0xc>)
 80a0c9c:	681b      	ldr	r3, [r3, #0]
 80a0c9e:	685b      	ldr	r3, [r3, #4]
 80a0ca0:	9301      	str	r3, [sp, #4]
 80a0ca2:	bd08      	pop	{r3, pc}
 80a0ca4:	080601d8 	.word	0x080601d8

080a0ca8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0ca8:	b508      	push	{r3, lr}
 80a0caa:	4b02      	ldr	r3, [pc, #8]	; (80a0cb4 <HAL_USB_USART_Available_Data+0xc>)
 80a0cac:	681b      	ldr	r3, [r3, #0]
 80a0cae:	691b      	ldr	r3, [r3, #16]
 80a0cb0:	9301      	str	r3, [sp, #4]
 80a0cb2:	bd08      	pop	{r3, pc}
 80a0cb4:	080601d8 	.word	0x080601d8

080a0cb8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0cb8:	b508      	push	{r3, lr}
 80a0cba:	4b02      	ldr	r3, [pc, #8]	; (80a0cc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0cbc:	681b      	ldr	r3, [r3, #0]
 80a0cbe:	695b      	ldr	r3, [r3, #20]
 80a0cc0:	9301      	str	r3, [sp, #4]
 80a0cc2:	bd08      	pop	{r3, pc}
 80a0cc4:	080601d8 	.word	0x080601d8

080a0cc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cc8:	b508      	push	{r3, lr}
 80a0cca:	4b02      	ldr	r3, [pc, #8]	; (80a0cd4 <HAL_USB_USART_Receive_Data+0xc>)
 80a0ccc:	681b      	ldr	r3, [r3, #0]
 80a0cce:	699b      	ldr	r3, [r3, #24]
 80a0cd0:	9301      	str	r3, [sp, #4]
 80a0cd2:	bd08      	pop	{r3, pc}
 80a0cd4:	080601d8 	.word	0x080601d8

080a0cd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0cd8:	b508      	push	{r3, lr}
 80a0cda:	4b02      	ldr	r3, [pc, #8]	; (80a0ce4 <HAL_USB_USART_Send_Data+0xc>)
 80a0cdc:	681b      	ldr	r3, [r3, #0]
 80a0cde:	69db      	ldr	r3, [r3, #28]
 80a0ce0:	9301      	str	r3, [sp, #4]
 80a0ce2:	bd08      	pop	{r3, pc}
 80a0ce4:	080601d8 	.word	0x080601d8

080a0ce8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0ce8:	b508      	push	{r3, lr}
 80a0cea:	4b02      	ldr	r3, [pc, #8]	; (80a0cf4 <HAL_USB_USART_Flush_Data+0xc>)
 80a0cec:	681b      	ldr	r3, [r3, #0]
 80a0cee:	6a1b      	ldr	r3, [r3, #32]
 80a0cf0:	9301      	str	r3, [sp, #4]
 80a0cf2:	bd08      	pop	{r3, pc}
 80a0cf4:	080601d8 	.word	0x080601d8

080a0cf8 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a0cf8:	b508      	push	{r3, lr}
 80a0cfa:	4b02      	ldr	r3, [pc, #8]	; (80a0d04 <inet_gethostbyname+0xc>)
 80a0cfc:	681b      	ldr	r3, [r3, #0]
 80a0cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a0d00:	9301      	str	r3, [sp, #4]
 80a0d02:	bd08      	pop	{r3, pc}
 80a0d04:	080601c0 	.word	0x080601c0

080a0d08 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0d08:	b508      	push	{r3, lr}
 80a0d0a:	4b02      	ldr	r3, [pc, #8]	; (80a0d14 <set_system_mode+0xc>)
 80a0d0c:	681b      	ldr	r3, [r3, #0]
 80a0d0e:	685b      	ldr	r3, [r3, #4]
 80a0d10:	9301      	str	r3, [sp, #4]
 80a0d12:	bd08      	pop	{r3, pc}
 80a0d14:	080601a4 	.word	0x080601a4

080a0d18 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0d18:	b508      	push	{r3, lr}
 80a0d1a:	4b02      	ldr	r3, [pc, #8]	; (80a0d24 <system_delay_ms+0xc>)
 80a0d1c:	681b      	ldr	r3, [r3, #0]
 80a0d1e:	695b      	ldr	r3, [r3, #20]
 80a0d20:	9301      	str	r3, [sp, #4]
 80a0d22:	bd08      	pop	{r3, pc}
 80a0d24:	080601a4 	.word	0x080601a4

080a0d28 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0d28:	b508      	push	{r3, lr}
 80a0d2a:	4b02      	ldr	r3, [pc, #8]	; (80a0d34 <application_thread_current+0xc>)
 80a0d2c:	681b      	ldr	r3, [r3, #0]
 80a0d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0d30:	9301      	str	r3, [sp, #4]
 80a0d32:	bd08      	pop	{r3, pc}
 80a0d34:	080601a4 	.word	0x080601a4

080a0d38 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0d38:	b508      	push	{r3, lr}
 80a0d3a:	4b02      	ldr	r3, [pc, #8]	; (80a0d44 <application_thread_invoke+0xc>)
 80a0d3c:	681b      	ldr	r3, [r3, #0]
 80a0d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0d40:	9301      	str	r3, [sp, #4]
 80a0d42:	bd08      	pop	{r3, pc}
 80a0d44:	080601a4 	.word	0x080601a4

080a0d48 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0d48:	b508      	push	{r3, lr}
 80a0d4a:	4b03      	ldr	r3, [pc, #12]	; (80a0d58 <system_ctrl_set_app_request_handler+0x10>)
 80a0d4c:	681b      	ldr	r3, [r3, #0]
 80a0d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0d52:	9301      	str	r3, [sp, #4]
 80a0d54:	bd08      	pop	{r3, pc}
 80a0d56:	0000      	.short	0x0000
 80a0d58:	080601a4 	.word	0x080601a4

080a0d5c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0d5c:	b508      	push	{r3, lr}
 80a0d5e:	4b03      	ldr	r3, [pc, #12]	; (80a0d6c <system_ctrl_set_result+0x10>)
 80a0d60:	681b      	ldr	r3, [r3, #0]
 80a0d62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0d66:	9301      	str	r3, [sp, #4]
 80a0d68:	bd08      	pop	{r3, pc}
 80a0d6a:	0000      	.short	0x0000
 80a0d6c:	080601a4 	.word	0x080601a4

080a0d70 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0d70:	b508      	push	{r3, lr}
 80a0d72:	4b02      	ldr	r3, [pc, #8]	; (80a0d7c <network_connect+0xc>)
 80a0d74:	681b      	ldr	r3, [r3, #0]
 80a0d76:	685b      	ldr	r3, [r3, #4]
 80a0d78:	9301      	str	r3, [sp, #4]
 80a0d7a:	bd08      	pop	{r3, pc}
 80a0d7c:	080601c8 	.word	0x080601c8

080a0d80 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0d80:	b508      	push	{r3, lr}
 80a0d82:	4b02      	ldr	r3, [pc, #8]	; (80a0d8c <network_connecting+0xc>)
 80a0d84:	681b      	ldr	r3, [r3, #0]
 80a0d86:	689b      	ldr	r3, [r3, #8]
 80a0d88:	9301      	str	r3, [sp, #4]
 80a0d8a:	bd08      	pop	{r3, pc}
 80a0d8c:	080601c8 	.word	0x080601c8

080a0d90 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a0d90:	b508      	push	{r3, lr}
 80a0d92:	4b02      	ldr	r3, [pc, #8]	; (80a0d9c <network_disconnect+0xc>)
 80a0d94:	681b      	ldr	r3, [r3, #0]
 80a0d96:	68db      	ldr	r3, [r3, #12]
 80a0d98:	9301      	str	r3, [sp, #4]
 80a0d9a:	bd08      	pop	{r3, pc}
 80a0d9c:	080601c8 	.word	0x080601c8

080a0da0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0da0:	b508      	push	{r3, lr}
 80a0da2:	4b02      	ldr	r3, [pc, #8]	; (80a0dac <network_ready+0xc>)
 80a0da4:	681b      	ldr	r3, [r3, #0]
 80a0da6:	691b      	ldr	r3, [r3, #16]
 80a0da8:	9301      	str	r3, [sp, #4]
 80a0daa:	bd08      	pop	{r3, pc}
 80a0dac:	080601c8 	.word	0x080601c8

080a0db0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0db0:	b508      	push	{r3, lr}
 80a0db2:	4b02      	ldr	r3, [pc, #8]	; (80a0dbc <network_on+0xc>)
 80a0db4:	681b      	ldr	r3, [r3, #0]
 80a0db6:	695b      	ldr	r3, [r3, #20]
 80a0db8:	9301      	str	r3, [sp, #4]
 80a0dba:	bd08      	pop	{r3, pc}
 80a0dbc:	080601c8 	.word	0x080601c8

080a0dc0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0dc0:	b508      	push	{r3, lr}
 80a0dc2:	4b02      	ldr	r3, [pc, #8]	; (80a0dcc <network_off+0xc>)
 80a0dc4:	681b      	ldr	r3, [r3, #0]
 80a0dc6:	699b      	ldr	r3, [r3, #24]
 80a0dc8:	9301      	str	r3, [sp, #4]
 80a0dca:	bd08      	pop	{r3, pc}
 80a0dcc:	080601c8 	.word	0x080601c8

080a0dd0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a0dd0:	b508      	push	{r3, lr}
 80a0dd2:	4b02      	ldr	r3, [pc, #8]	; (80a0ddc <network_listen+0xc>)
 80a0dd4:	681b      	ldr	r3, [r3, #0]
 80a0dd6:	69db      	ldr	r3, [r3, #28]
 80a0dd8:	9301      	str	r3, [sp, #4]
 80a0dda:	bd08      	pop	{r3, pc}
 80a0ddc:	080601c8 	.word	0x080601c8

080a0de0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a0de0:	b508      	push	{r3, lr}
 80a0de2:	4b02      	ldr	r3, [pc, #8]	; (80a0dec <network_listening+0xc>)
 80a0de4:	681b      	ldr	r3, [r3, #0]
 80a0de6:	6a1b      	ldr	r3, [r3, #32]
 80a0de8:	9301      	str	r3, [sp, #4]
 80a0dea:	bd08      	pop	{r3, pc}
 80a0dec:	080601c8 	.word	0x080601c8

080a0df0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a0df0:	b508      	push	{r3, lr}
 80a0df2:	4b02      	ldr	r3, [pc, #8]	; (80a0dfc <network_set_listen_timeout+0xc>)
 80a0df4:	681b      	ldr	r3, [r3, #0]
 80a0df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0df8:	9301      	str	r3, [sp, #4]
 80a0dfa:	bd08      	pop	{r3, pc}
 80a0dfc:	080601c8 	.word	0x080601c8

080a0e00 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a0e00:	b508      	push	{r3, lr}
 80a0e02:	4b02      	ldr	r3, [pc, #8]	; (80a0e0c <network_get_listen_timeout+0xc>)
 80a0e04:	681b      	ldr	r3, [r3, #0]
 80a0e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a0e08:	9301      	str	r3, [sp, #4]
 80a0e0a:	bd08      	pop	{r3, pc}
 80a0e0c:	080601c8 	.word	0x080601c8

080a0e10 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a0e10:	b508      	push	{r3, lr}
 80a0e12:	4b02      	ldr	r3, [pc, #8]	; (80a0e1c <spark_variable+0xc>)
 80a0e14:	681b      	ldr	r3, [r3, #0]
 80a0e16:	681b      	ldr	r3, [r3, #0]
 80a0e18:	9301      	str	r3, [sp, #4]
 80a0e1a:	bd08      	pop	{r3, pc}
 80a0e1c:	080601cc 	.word	0x080601cc

080a0e20 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a0e20:	b508      	push	{r3, lr}
 80a0e22:	4b02      	ldr	r3, [pc, #8]	; (80a0e2c <spark_function+0xc>)
 80a0e24:	681b      	ldr	r3, [r3, #0]
 80a0e26:	685b      	ldr	r3, [r3, #4]
 80a0e28:	9301      	str	r3, [sp, #4]
 80a0e2a:	bd08      	pop	{r3, pc}
 80a0e2c:	080601cc 	.word	0x080601cc

080a0e30 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0e30:	b508      	push	{r3, lr}
 80a0e32:	4b02      	ldr	r3, [pc, #8]	; (80a0e3c <spark_cloud_flag_connected+0xc>)
 80a0e34:	681b      	ldr	r3, [r3, #0]
 80a0e36:	695b      	ldr	r3, [r3, #20]
 80a0e38:	9301      	str	r3, [sp, #4]
 80a0e3a:	bd08      	pop	{r3, pc}
 80a0e3c:	080601cc 	.word	0x080601cc

080a0e40 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0e40:	b508      	push	{r3, lr}
 80a0e42:	4b02      	ldr	r3, [pc, #8]	; (80a0e4c <spark_send_event+0xc>)
 80a0e44:	681b      	ldr	r3, [r3, #0]
 80a0e46:	6a1b      	ldr	r3, [r3, #32]
 80a0e48:	9301      	str	r3, [sp, #4]
 80a0e4a:	bd08      	pop	{r3, pc}
 80a0e4c:	080601cc 	.word	0x080601cc

080a0e50 <spark_sync_time>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 80a0e50:	b508      	push	{r3, lr}
 80a0e52:	4b02      	ldr	r3, [pc, #8]	; (80a0e5c <spark_sync_time+0xc>)
 80a0e54:	681b      	ldr	r3, [r3, #0]
 80a0e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0e58:	9301      	str	r3, [sp, #4]
 80a0e5a:	bd08      	pop	{r3, pc}
 80a0e5c:	080601cc 	.word	0x080601cc

080a0e60 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0e60:	b508      	push	{r3, lr}
 80a0e62:	4b02      	ldr	r3, [pc, #8]	; (80a0e6c <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0e64:	681b      	ldr	r3, [r3, #0]
 80a0e66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0e68:	9301      	str	r3, [sp, #4]
 80a0e6a:	bd08      	pop	{r3, pc}
 80a0e6c:	080601cc 	.word	0x080601cc

080a0e70 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0e70:	b508      	push	{r3, lr}
 80a0e72:	4b02      	ldr	r3, [pc, #8]	; (80a0e7c <malloc+0xc>)
 80a0e74:	681b      	ldr	r3, [r3, #0]
 80a0e76:	681b      	ldr	r3, [r3, #0]
 80a0e78:	9301      	str	r3, [sp, #4]
 80a0e7a:	bd08      	pop	{r3, pc}
 80a0e7c:	080601a0 	.word	0x080601a0

080a0e80 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0e80:	b508      	push	{r3, lr}
 80a0e82:	4b02      	ldr	r3, [pc, #8]	; (80a0e8c <free+0xc>)
 80a0e84:	681b      	ldr	r3, [r3, #0]
 80a0e86:	685b      	ldr	r3, [r3, #4]
 80a0e88:	9301      	str	r3, [sp, #4]
 80a0e8a:	bd08      	pop	{r3, pc}
 80a0e8c:	080601a0 	.word	0x080601a0

080a0e90 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0e90:	b508      	push	{r3, lr}
 80a0e92:	4b02      	ldr	r3, [pc, #8]	; (80a0e9c <realloc+0xc>)
 80a0e94:	681b      	ldr	r3, [r3, #0]
 80a0e96:	689b      	ldr	r3, [r3, #8]
 80a0e98:	9301      	str	r3, [sp, #4]
 80a0e9a:	bd08      	pop	{r3, pc}
 80a0e9c:	080601a0 	.word	0x080601a0

080a0ea0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0ea0:	b508      	push	{r3, lr}
 80a0ea2:	4b02      	ldr	r3, [pc, #8]	; (80a0eac <abort+0xc>)
 80a0ea4:	681b      	ldr	r3, [r3, #0]
 80a0ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0ea8:	9301      	str	r3, [sp, #4]
 80a0eaa:	bd08      	pop	{r3, pc}
 80a0eac:	080601a0 	.word	0x080601a0

080a0eb0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0eb0:	b508      	push	{r3, lr}
 80a0eb2:	4b02      	ldr	r3, [pc, #8]	; (80a0ebc <_malloc_r+0xc>)
 80a0eb4:	681b      	ldr	r3, [r3, #0]
 80a0eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0eb8:	9301      	str	r3, [sp, #4]
 80a0eba:	bd08      	pop	{r3, pc}
 80a0ebc:	080601a0 	.word	0x080601a0

080a0ec0 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a0ec0:	b508      	push	{r3, lr}
 80a0ec2:	4b02      	ldr	r3, [pc, #8]	; (80a0ecc <__errno+0xc>)
 80a0ec4:	681b      	ldr	r3, [r3, #0]
 80a0ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0ec8:	9301      	str	r3, [sp, #4]
 80a0eca:	bd08      	pop	{r3, pc}
 80a0ecc:	080601a0 	.word	0x080601a0

080a0ed0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a0ed0:	b570      	push	{r4, r5, r6, lr}
 80a0ed2:	4604      	mov	r4, r0
 80a0ed4:	460e      	mov	r6, r1
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 80a0ed6:	2500      	movs	r5, #0
 80a0ed8:	f840 5f08 	str.w	r5, [r0, #8]!
    {
        os_mutex_recursive_create(&handle_);
 80a0edc:	f7ff fe22 	bl	80a0b24 <os_mutex_recursive_create>
{
    _spi = spi;
    HAL_SPI_Init(_spi);
 80a0ee0:	4630      	mov	r0, r6
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
    _spi = spi;
 80a0ee2:	7026      	strb	r6, [r4, #0]
    HAL_SPI_Init(_spi);
 80a0ee4:	f7ff fdf6 	bl	80a0ad4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 80a0ee8:	6065      	str	r5, [r4, #4]
}
 80a0eea:	4620      	mov	r0, r4
 80a0eec:	bd70      	pop	{r4, r5, r6, pc}

080a0eee <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
 80a0eee:	7800      	ldrb	r0, [r0, #0]
 80a0ef0:	f7ff bdf8 	b.w	80a0ae4 <HAL_SPI_Is_Enabled>

080a0ef4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 80a0ef4:	b510      	push	{r4, lr}
 80a0ef6:	4604      	mov	r4, r0
        if (wakeupSource_) {
 80a0ef8:	6800      	ldr	r0, [r0, #0]
 80a0efa:	b118      	cbz	r0, 80a0f04 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
 80a0efc:	f7ff ffc0 	bl	80a0e80 <free>
            wakeupSource_ = nullptr;
 80a0f00:	2300      	movs	r3, #0
 80a0f02:	6023      	str	r3, [r4, #0]
 80a0f04:	bd10      	pop	{r4, pc}

080a0f06 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0f06:	b510      	push	{r4, lr}
 80a0f08:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
 80a0f0a:	f7ff fff3 	bl	80a0ef4 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
 80a0f0e:	4620      	mov	r0, r4
 80a0f10:	bd10      	pop	{r4, pc}
	...

080a0f14 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0f14:	f64f 73ff 	movw	r3, #65535	; 0xffff
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0f18:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 80a0f1a:	4c08      	ldr	r4, [pc, #32]	; (80a0f3c <_GLOBAL__sub_I_System+0x28>)
 80a0f1c:	2000      	movs	r0, #0
 80a0f1e:	6020      	str	r0, [r4, #0]
 80a0f20:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
 80a0f22:	71a0      	strb	r0, [r4, #6]
 80a0f24:	8120      	strh	r0, [r4, #8]
 80a0f26:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0f28:	f7ff feee 	bl	80a0d08 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0f2c:	4620      	mov	r0, r4
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
 80a0f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
 80a0f32:	4a03      	ldr	r2, [pc, #12]	; (80a0f40 <_GLOBAL__sub_I_System+0x2c>)
 80a0f34:	4903      	ldr	r1, [pc, #12]	; (80a0f44 <_GLOBAL__sub_I_System+0x30>)
 80a0f36:	f001 ba55 	b.w	80a23e4 <__aeabi_atexit>
 80a0f3a:	bf00      	nop
 80a0f3c:	200001f8 	.word	0x200001f8
 80a0f40:	20000080 	.word	0x20000080
 80a0f44:	080a0f07 	.word	0x080a0f07

080a0f48 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a0f48:	b510      	push	{r4, lr}
 80a0f4a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a0f4c:	f002 fbb3 	bl	80a36b6 <strlen>
 80a0f50:	3801      	subs	r0, #1
 80a0f52:	1823      	adds	r3, r4, r0
 80a0f54:	4620      	mov	r0, r4
	while(i<j){
 80a0f56:	4298      	cmp	r0, r3
 80a0f58:	d206      	bcs.n	80a0f68 <_Z11str_reversePc+0x20>
		c = *i;
 80a0f5a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a0f5c:	7819      	ldrb	r1, [r3, #0]
 80a0f5e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a0f62:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a0f66:	e7f6      	b.n	80a0f56 <_Z11str_reversePc+0xe>
 80a0f68:	bd10      	pop	{r4, pc}

080a0f6a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a0f6a:	b570      	push	{r4, r5, r6, lr}
 80a0f6c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a0f6e:	1e91      	subs	r1, r2, #2
 80a0f70:	2922      	cmp	r1, #34	; 0x22
 80a0f72:	d820      	bhi.n	80a0fb6 <ultoa+0x4c>
 80a0f74:	4625      	mov	r5, r4
 80a0f76:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0f78:	b910      	cbnz	r0, 80a0f80 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0f7a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a0f7c:	2230      	movs	r2, #48	; 0x30
 80a0f7e:	e00e      	b.n	80a0f9e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a0f80:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a0f84:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a0f88:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a0f8a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a0f8c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a0f90:	bf94      	ite	ls
 80a0f92:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a0f94:	3157      	addhi	r1, #87	; 0x57
 80a0f96:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a0f9a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a0f9c:	e7eb      	b.n	80a0f76 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0f9e:	4299      	cmp	r1, r3
 80a0fa0:	d202      	bcs.n	80a0fa8 <ultoa+0x3e>
            *ptr++ = '0';
 80a0fa2:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a0fa6:	e7fa      	b.n	80a0f9e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a0fa8:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a0faa:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a0fac:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a0fae:	f7ff ffcb 	bl	80a0f48 <_Z11str_reversePc>
	return buffer;
 80a0fb2:	4620      	mov	r0, r4
 80a0fb4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a0fb6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a0fb8:	bd70      	pop	{r4, r5, r6, pc}

080a0fba <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a0fba:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a0fbc:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a0fbe:	460c      	mov	r4, r1
 80a0fc0:	4615      	mov	r5, r2
	if(a<0){
 80a0fc2:	da0b      	bge.n	80a0fdc <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a0fc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a0fc8:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a0fcc:	bf14      	ite	ne
 80a0fce:	4258      	negne	r0, r3
 80a0fd0:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a0fd2:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a0fd4:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a0fd6:	462a      	mov	r2, r5
 80a0fd8:	4419      	add	r1, r3
 80a0fda:	e000      	b.n	80a0fde <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a0fdc:	2301      	movs	r3, #1
 80a0fde:	f7ff ffc4 	bl	80a0f6a <ultoa>
	}
	return buffer;
}
 80a0fe2:	4620      	mov	r0, r4
 80a0fe4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a0fe8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a0fe8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0fec:	4680      	mov	r8, r0
 80a0fee:	460d      	mov	r5, r1
 80a0ff0:	4617      	mov	r7, r2
 80a0ff2:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a0ff4:	2200      	movs	r2, #0
 80a0ff6:	2300      	movs	r3, #0
 80a0ff8:	4640      	mov	r0, r8
 80a0ffa:	4629      	mov	r1, r5
 80a0ffc:	f002 f8aa 	bl	80a3154 <__aeabi_dcmplt>
 80a1000:	b120      	cbz	r0, 80a100c <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a1002:	232d      	movs	r3, #45	; 0x2d
 80a1004:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a1006:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a100a:	3601      	adds	r6, #1
 80a100c:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a100e:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a1010:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a1012:	b2d9      	uxtb	r1, r3
 80a1014:	428f      	cmp	r7, r1
 80a1016:	d902      	bls.n	80a101e <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a1018:	4354      	muls	r4, r2
 80a101a:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a101c:	e7f9      	b.n	80a1012 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a101e:	4620      	mov	r0, r4
 80a1020:	f001 fdc0 	bl	80a2ba4 <__aeabi_i2d>
 80a1024:	4642      	mov	r2, r8
 80a1026:	462b      	mov	r3, r5
 80a1028:	f001 fe22 	bl	80a2c70 <__aeabi_dmul>
 80a102c:	4682      	mov	sl, r0
 80a102e:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a1030:	f002 f92e 	bl	80a3290 <__aeabi_d2ulz>
 80a1034:	4680      	mov	r8, r0
 80a1036:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a1038:	f001 fde4 	bl	80a2c04 <__aeabi_ul2d>
 80a103c:	4602      	mov	r2, r0
 80a103e:	460b      	mov	r3, r1
 80a1040:	4650      	mov	r0, sl
 80a1042:	4659      	mov	r1, fp
 80a1044:	f001 fc60 	bl	80a2908 <__aeabi_dsub>
 80a1048:	2200      	movs	r2, #0
 80a104a:	4b17      	ldr	r3, [pc, #92]	; (80a10a8 <_Z4dtoadhPc+0xc0>)
 80a104c:	f002 f896 	bl	80a317c <__aeabi_dcmpge>
 80a1050:	b118      	cbz	r0, 80a105a <_Z4dtoadhPc+0x72>
        fixed++;
 80a1052:	f118 0801 	adds.w	r8, r8, #1
 80a1056:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a105a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a105c:	4622      	mov	r2, r4
 80a105e:	462b      	mov	r3, r5
 80a1060:	4640      	mov	r0, r8
 80a1062:	4649      	mov	r1, r9
 80a1064:	f002 f8fc 	bl	80a3260 <__aeabi_uldivmod>
 80a1068:	2301      	movs	r3, #1
 80a106a:	220a      	movs	r2, #10
 80a106c:	4631      	mov	r1, r6
 80a106e:	f7ff ff7c 	bl	80a0f6a <ultoa>
    if (prec) {
 80a1072:	b1af      	cbz	r7, 80a10a0 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a1074:	4630      	mov	r0, r6
 80a1076:	f002 fb1e 	bl	80a36b6 <strlen>
        *sout++ = '.';
 80a107a:	232e      	movs	r3, #46	; 0x2e
 80a107c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a107e:	3001      	adds	r0, #1
 80a1080:	4406      	add	r6, r0
 80a1082:	4622      	mov	r2, r4
 80a1084:	462b      	mov	r3, r5
 80a1086:	4640      	mov	r0, r8
 80a1088:	4649      	mov	r1, r9
 80a108a:	f002 f8e9 	bl	80a3260 <__aeabi_uldivmod>
 80a108e:	463b      	mov	r3, r7
 80a1090:	4610      	mov	r0, r2
 80a1092:	4631      	mov	r1, r6
 80a1094:	220a      	movs	r2, #10
    }
}
 80a1096:	b001      	add	sp, #4
 80a1098:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a109c:	f7ff bf65 	b.w	80a0f6a <ultoa>
    }
}
 80a10a0:	b001      	add	sp, #4
 80a10a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a10a6:	bf00      	nop
 80a10a8:	3fe00000 	.word	0x3fe00000

080a10ac <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a10ac:	b510      	push	{r4, lr}
 80a10ae:	4604      	mov	r4, r0
{
	free(buffer);
 80a10b0:	6800      	ldr	r0, [r0, #0]
 80a10b2:	f7ff fee5 	bl	80a0e80 <free>
}
 80a10b6:	4620      	mov	r0, r4
 80a10b8:	bd10      	pop	{r4, pc}

080a10ba <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a10ba:	b510      	push	{r4, lr}
 80a10bc:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a10be:	6800      	ldr	r0, [r0, #0]
 80a10c0:	b108      	cbz	r0, 80a10c6 <_ZN6String10invalidateEv+0xc>
 80a10c2:	f7ff fedd 	bl	80a0e80 <free>
	buffer = NULL;
 80a10c6:	2300      	movs	r3, #0
 80a10c8:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a10ca:	60a3      	str	r3, [r4, #8]
 80a10cc:	6063      	str	r3, [r4, #4]
 80a10ce:	bd10      	pop	{r4, pc}

080a10d0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a10d0:	b538      	push	{r3, r4, r5, lr}
 80a10d2:	4604      	mov	r4, r0
 80a10d4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a10d6:	6800      	ldr	r0, [r0, #0]
 80a10d8:	3101      	adds	r1, #1
 80a10da:	f7ff fed9 	bl	80a0e90 <realloc>
	if (newbuffer) {
 80a10de:	b110      	cbz	r0, 80a10e6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a10e0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a10e4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a10e6:	bd38      	pop	{r3, r4, r5, pc}

080a10e8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a10e8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a10ea:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a10ec:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a10ee:	b113      	cbz	r3, 80a10f6 <_ZN6String7reserveEj+0xe>
 80a10f0:	6843      	ldr	r3, [r0, #4]
 80a10f2:	428b      	cmp	r3, r1
 80a10f4:	d207      	bcs.n	80a1106 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a10f6:	4620      	mov	r0, r4
 80a10f8:	f7ff ffea 	bl	80a10d0 <_ZN6String12changeBufferEj>
 80a10fc:	b120      	cbz	r0, 80a1108 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a10fe:	68a3      	ldr	r3, [r4, #8]
 80a1100:	b90b      	cbnz	r3, 80a1106 <_ZN6String7reserveEj+0x1e>
 80a1102:	6822      	ldr	r2, [r4, #0]
 80a1104:	7013      	strb	r3, [r2, #0]
 80a1106:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1108:	bd10      	pop	{r4, pc}

080a110a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a110a:	b570      	push	{r4, r5, r6, lr}
 80a110c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a110e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1110:	4604      	mov	r4, r0
 80a1112:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1114:	f7ff ffe8 	bl	80a10e8 <_ZN6String7reserveEj>
 80a1118:	b918      	cbnz	r0, 80a1122 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a111a:	4620      	mov	r0, r4
 80a111c:	f7ff ffcd 	bl	80a10ba <_ZN6String10invalidateEv>
		return *this;
 80a1120:	e009      	b.n	80a1136 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1122:	462a      	mov	r2, r5
 80a1124:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1126:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1128:	6820      	ldr	r0, [r4, #0]
 80a112a:	f002 fa5b 	bl	80a35e4 <memcpy>
	buffer[len] = 0;
 80a112e:	6822      	ldr	r2, [r4, #0]
 80a1130:	68a3      	ldr	r3, [r4, #8]
 80a1132:	2100      	movs	r1, #0
 80a1134:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1136:	4620      	mov	r0, r4
 80a1138:	bd70      	pop	{r4, r5, r6, pc}

080a113a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a113a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a113c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a113e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1140:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1142:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1144:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1146:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1148:	460d      	mov	r5, r1
 80a114a:	b139      	cbz	r1, 80a115c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a114c:	4608      	mov	r0, r1
 80a114e:	f002 fab2 	bl	80a36b6 <strlen>
 80a1152:	4629      	mov	r1, r5
 80a1154:	4602      	mov	r2, r0
 80a1156:	4620      	mov	r0, r4
 80a1158:	f7ff ffd7 	bl	80a110a <_ZN6String4copyEPKcj>
}
 80a115c:	4620      	mov	r0, r4
 80a115e:	bd38      	pop	{r3, r4, r5, pc}

080a1160 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1160:	b538      	push	{r3, r4, r5, lr}
 80a1162:	4605      	mov	r5, r0
	if (buffer) {
 80a1164:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1166:	460c      	mov	r4, r1
	if (buffer) {
 80a1168:	b160      	cbz	r0, 80a1184 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a116a:	686a      	ldr	r2, [r5, #4]
 80a116c:	688b      	ldr	r3, [r1, #8]
 80a116e:	429a      	cmp	r2, r3
 80a1170:	d306      	bcc.n	80a1180 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1172:	6809      	ldr	r1, [r1, #0]
 80a1174:	f002 fa7c 	bl	80a3670 <strcpy>
			len = rhs.len;
 80a1178:	68a3      	ldr	r3, [r4, #8]
 80a117a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a117c:	2300      	movs	r3, #0
 80a117e:	e00a      	b.n	80a1196 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a1180:	f7ff fe7e 	bl	80a0e80 <free>
		}
	}
	buffer = rhs.buffer;
 80a1184:	6823      	ldr	r3, [r4, #0]
 80a1186:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1188:	6863      	ldr	r3, [r4, #4]
 80a118a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a118c:	68a3      	ldr	r3, [r4, #8]
 80a118e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1190:	2300      	movs	r3, #0
 80a1192:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1194:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1196:	60a3      	str	r3, [r4, #8]
 80a1198:	bd38      	pop	{r3, r4, r5, pc}

080a119a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a119a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a119c:	b510      	push	{r4, lr}
 80a119e:	460b      	mov	r3, r1
 80a11a0:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a11a2:	d007      	beq.n	80a11b4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a11a4:	6809      	ldr	r1, [r1, #0]
 80a11a6:	b119      	cbz	r1, 80a11b0 <_ZN6StringaSERKS_+0x16>
 80a11a8:	689a      	ldr	r2, [r3, #8]
 80a11aa:	f7ff ffae 	bl	80a110a <_ZN6String4copyEPKcj>
 80a11ae:	e001      	b.n	80a11b4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a11b0:	f7ff ff83 	bl	80a10ba <_ZN6String10invalidateEv>

	return *this;
}
 80a11b4:	4620      	mov	r0, r4
 80a11b6:	bd10      	pop	{r4, pc}

080a11b8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a11b8:	b510      	push	{r4, lr}
 80a11ba:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a11bc:	2300      	movs	r3, #0
 80a11be:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a11c0:	6043      	str	r3, [r0, #4]
	len = 0;
 80a11c2:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a11c4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a11c6:	f7ff ffe8 	bl	80a119a <_ZN6StringaSERKS_>
}
 80a11ca:	4620      	mov	r0, r4
 80a11cc:	bd10      	pop	{r4, pc}

080a11ce <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a11ce:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a11d0:	b510      	push	{r4, lr}
 80a11d2:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a11d4:	d001      	beq.n	80a11da <_ZN6StringaSEOS_+0xc>
 80a11d6:	f7ff ffc3 	bl	80a1160 <_ZN6String4moveERS_>
	return *this;
}
 80a11da:	4620      	mov	r0, r4
 80a11dc:	bd10      	pop	{r4, pc}

080a11de <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a11de:	b538      	push	{r3, r4, r5, lr}
 80a11e0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a11e2:	460c      	mov	r4, r1
 80a11e4:	b141      	cbz	r1, 80a11f8 <_ZN6StringaSEPKc+0x1a>
 80a11e6:	4608      	mov	r0, r1
 80a11e8:	f002 fa65 	bl	80a36b6 <strlen>
 80a11ec:	4621      	mov	r1, r4
 80a11ee:	4602      	mov	r2, r0
 80a11f0:	4628      	mov	r0, r5
 80a11f2:	f7ff ff8a 	bl	80a110a <_ZN6String4copyEPKcj>
 80a11f6:	e001      	b.n	80a11fc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a11f8:	f7ff ff5f 	bl	80a10ba <_ZN6String10invalidateEv>

	return *this;
}
 80a11fc:	4628      	mov	r0, r5
 80a11fe:	bd38      	pop	{r3, r4, r5, pc}

080a1200 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1200:	b510      	push	{r4, lr}
 80a1202:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1204:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1206:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1208:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a120a:	6063      	str	r3, [r4, #4]
	len = 0;
 80a120c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a120e:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a1210:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a1212:	a901      	add	r1, sp, #4
 80a1214:	f7ff fed1 	bl	80a0fba <itoa>
	*this = buf;
 80a1218:	a901      	add	r1, sp, #4
 80a121a:	4620      	mov	r0, r4
 80a121c:	f7ff ffdf 	bl	80a11de <_ZN6StringaSEPKc>
}
 80a1220:	4620      	mov	r0, r4
 80a1222:	b00a      	add	sp, #40	; 0x28
 80a1224:	bd10      	pop	{r4, pc}

080a1226 <_ZN6StringC1Edi>:
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a1226:	b510      	push	{r4, lr}
 80a1228:	4604      	mov	r4, r0
 80a122a:	b08a      	sub	sp, #40	; 0x28
 80a122c:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a122e:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a1230:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1232:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a1234:	6063      	str	r3, [r4, #4]
	len = 0;
 80a1236:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a1238:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a123a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a123e:	ab01      	add	r3, sp, #4
 80a1240:	f7ff fed2 	bl	80a0fe8 <_Z4dtoadhPc>
        *this = buf;
 80a1244:	a901      	add	r1, sp, #4
 80a1246:	4620      	mov	r0, r4
 80a1248:	f7ff ffc9 	bl	80a11de <_ZN6StringaSEPKc>
}
 80a124c:	4620      	mov	r0, r4
 80a124e:	b00a      	add	sp, #40	; 0x28
 80a1250:	bd10      	pop	{r4, pc}

080a1252 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
 80a1252:	4602      	mov	r2, r0
	if (!buffer || !s.buffer) {
 80a1254:	6800      	ldr	r0, [r0, #0]
 80a1256:	680b      	ldr	r3, [r1, #0]
 80a1258:	b108      	cbz	r0, 80a125e <_ZNK6String9compareToERKS_+0xc>
 80a125a:	b95b      	cbnz	r3, 80a1274 <_ZNK6String9compareToERKS_+0x22>
 80a125c:	e005      	b.n	80a126a <_ZNK6String9compareToERKS_+0x18>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
 80a125e:	b123      	cbz	r3, 80a126a <_ZNK6String9compareToERKS_+0x18>
 80a1260:	6889      	ldr	r1, [r1, #8]
 80a1262:	b111      	cbz	r1, 80a126a <_ZNK6String9compareToERKS_+0x18>
 80a1264:	7818      	ldrb	r0, [r3, #0]
 80a1266:	4240      	negs	r0, r0
 80a1268:	4770      	bx	lr
		if (buffer && len > 0) return *(unsigned char *)buffer;
 80a126a:	b138      	cbz	r0, 80a127c <_ZNK6String9compareToERKS_+0x2a>
 80a126c:	6893      	ldr	r3, [r2, #8]
 80a126e:	b123      	cbz	r3, 80a127a <_ZNK6String9compareToERKS_+0x28>
 80a1270:	7800      	ldrb	r0, [r0, #0]
 80a1272:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
 80a1274:	4619      	mov	r1, r3
 80a1276:	f002 b9f1 	b.w	80a365c <strcmp>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
 80a127a:	4618      	mov	r0, r3
	}
	return strcmp(buffer, s.buffer);
}
 80a127c:	4770      	bx	lr

080a127e <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
 80a127e:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
 80a1280:	6882      	ldr	r2, [r0, #8]
 80a1282:	688b      	ldr	r3, [r1, #8]
 80a1284:	429a      	cmp	r2, r3
 80a1286:	d105      	bne.n	80a1294 <_ZNK6String6equalsERKS_+0x16>
 80a1288:	f7ff ffe3 	bl	80a1252 <_ZNK6String9compareToERKS_>
 80a128c:	fab0 f080 	clz	r0, r0
 80a1290:	0940      	lsrs	r0, r0, #5
 80a1292:	bd08      	pop	{r3, pc}
 80a1294:	2000      	movs	r0, #0
}
 80a1296:	bd08      	pop	{r3, pc}

080a1298 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
 80a1298:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a129a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 80a129c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 80a129e:	b912      	cbnz	r2, 80a12a6 <_ZNK6String6equalsEPKc+0xe>
 80a12a0:	b919      	cbnz	r1, 80a12aa <_ZNK6String6equalsEPKc+0x12>
 80a12a2:	2001      	movs	r0, #1
 80a12a4:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 80a12a6:	b911      	cbnz	r1, 80a12ae <_ZNK6String6equalsEPKc+0x16>
 80a12a8:	6803      	ldr	r3, [r0, #0]
 80a12aa:	7818      	ldrb	r0, [r3, #0]
 80a12ac:	e002      	b.n	80a12b4 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 80a12ae:	6800      	ldr	r0, [r0, #0]
 80a12b0:	f002 f9d4 	bl	80a365c <strcmp>
 80a12b4:	fab0 f080 	clz	r0, r0
 80a12b8:	0940      	lsrs	r0, r0, #5
}
 80a12ba:	bd08      	pop	{r3, pc}

080a12bc <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a12bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12be:	4606      	mov	r6, r0
 80a12c0:	460d      	mov	r5, r1
 80a12c2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a12c4:	2400      	movs	r4, #0
  while (size--) {
 80a12c6:	42bd      	cmp	r5, r7
 80a12c8:	d00c      	beq.n	80a12e4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a12ca:	6833      	ldr	r3, [r6, #0]
 80a12cc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a12d0:	689b      	ldr	r3, [r3, #8]
 80a12d2:	4630      	mov	r0, r6
 80a12d4:	4798      	blx	r3
     if (chunk>=0)
 80a12d6:	2800      	cmp	r0, #0
 80a12d8:	db01      	blt.n	80a12de <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a12da:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a12dc:	e7f3      	b.n	80a12c6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a12de:	2c00      	cmp	r4, #0
 80a12e0:	bf08      	it	eq
 80a12e2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a12e4:	4620      	mov	r0, r4
 80a12e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a12e8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a12e8:	b570      	push	{r4, r5, r6, lr}
 80a12ea:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a12ec:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a12ee:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a12f0:	b149      	cbz	r1, 80a1306 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a12f2:	f002 f9e0 	bl	80a36b6 <strlen>
 80a12f6:	682b      	ldr	r3, [r5, #0]
 80a12f8:	4602      	mov	r2, r0
 80a12fa:	4621      	mov	r1, r4
 80a12fc:	4628      	mov	r0, r5
    }
 80a12fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1302:	68db      	ldr	r3, [r3, #12]
 80a1304:	4718      	bx	r3
    }
 80a1306:	bd70      	pop	{r4, r5, r6, pc}

080a1308 <_ZN5Print5printEPKc>:
 80a1308:	b508      	push	{r3, lr}
 80a130a:	f7ff ffed 	bl	80a12e8 <_ZN5Print5writeEPKc>
 80a130e:	bd08      	pop	{r3, pc}

080a1310 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1310:	6803      	ldr	r3, [r0, #0]
 80a1312:	689b      	ldr	r3, [r3, #8]
 80a1314:	4718      	bx	r3

080a1316 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1316:	2a01      	cmp	r2, #1
 80a1318:	bf98      	it	ls
 80a131a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a131c:	b530      	push	{r4, r5, lr}
 80a131e:	460b      	mov	r3, r1
 80a1320:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1322:	2100      	movs	r1, #0
 80a1324:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1328:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   decltype(n) m = n;
   n /= base;
 80a132c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
 80a1330:	fb05 3312 	mls	r3, r5, r2, r3
 80a1334:	b2db      	uxtb	r3, r3
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1336:	2b09      	cmp	r3, #9
 80a1338:	bf94      	ite	ls
 80a133a:	3330      	addls	r3, #48	; 0x30
 80a133c:	3337      	addhi	r3, #55	; 0x37
 80a133e:	b2db      	uxtb	r3, r3
 80a1340:	4621      	mov	r1, r4
 80a1342:	f804 3901 	strb.w	r3, [r4], #-1
 80a1346:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1348:	2d00      	cmp	r5, #0
 80a134a:	d1ef      	bne.n	80a132c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a134c:	f7ff ffcc 	bl	80a12e8 <_ZN5Print5writeEPKc>
}
 80a1350:	b00b      	add	sp, #44	; 0x2c
 80a1352:	bd30      	pop	{r4, r5, pc}

080a1354 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1358:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a135a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a135c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a135e:	4617      	mov	r7, r2
 80a1360:	461e      	mov	r6, r3
 80a1362:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1366:	f001 ff1d 	bl	80a31a4 <__aeabi_dcmpun>
 80a136a:	b108      	cbz	r0, 80a1370 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a136c:	494d      	ldr	r1, [pc, #308]	; (80a14a4 <_ZN5Print10printFloatEdh+0x150>)
 80a136e:	e012      	b.n	80a1396 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1370:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1374:	f04f 32ff 	mov.w	r2, #4294967295
 80a1378:	4b4b      	ldr	r3, [pc, #300]	; (80a14a8 <_ZN5Print10printFloatEdh+0x154>)
 80a137a:	4638      	mov	r0, r7
 80a137c:	4621      	mov	r1, r4
 80a137e:	f001 ff11 	bl	80a31a4 <__aeabi_dcmpun>
 80a1382:	b968      	cbnz	r0, 80a13a0 <_ZN5Print10printFloatEdh+0x4c>
 80a1384:	f04f 32ff 	mov.w	r2, #4294967295
 80a1388:	4b47      	ldr	r3, [pc, #284]	; (80a14a8 <_ZN5Print10printFloatEdh+0x154>)
 80a138a:	4638      	mov	r0, r7
 80a138c:	4621      	mov	r1, r4
 80a138e:	f001 feeb 	bl	80a3168 <__aeabi_dcmple>
 80a1392:	b928      	cbnz	r0, 80a13a0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1394:	4945      	ldr	r1, [pc, #276]	; (80a14ac <_ZN5Print10printFloatEdh+0x158>)
 80a1396:	4640      	mov	r0, r8
 80a1398:	f7ff ffa6 	bl	80a12e8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a139c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a13a0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a13a4:	4b42      	ldr	r3, [pc, #264]	; (80a14b0 <_ZN5Print10printFloatEdh+0x15c>)
 80a13a6:	4638      	mov	r0, r7
 80a13a8:	4631      	mov	r1, r6
 80a13aa:	f001 fef1 	bl	80a3190 <__aeabi_dcmpgt>
 80a13ae:	b108      	cbz	r0, 80a13b4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a13b0:	4940      	ldr	r1, [pc, #256]	; (80a14b4 <_ZN5Print10printFloatEdh+0x160>)
 80a13b2:	e7f0      	b.n	80a1396 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a13b4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a13b8:	4b3f      	ldr	r3, [pc, #252]	; (80a14b8 <_ZN5Print10printFloatEdh+0x164>)
 80a13ba:	4638      	mov	r0, r7
 80a13bc:	4631      	mov	r1, r6
 80a13be:	f001 fec9 	bl	80a3154 <__aeabi_dcmplt>
 80a13c2:	2800      	cmp	r0, #0
 80a13c4:	d1f4      	bne.n	80a13b0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a13c6:	2200      	movs	r2, #0
 80a13c8:	2300      	movs	r3, #0
 80a13ca:	4638      	mov	r0, r7
 80a13cc:	4631      	mov	r1, r6
 80a13ce:	f001 fec1 	bl	80a3154 <__aeabi_dcmplt>
 80a13d2:	b138      	cbz	r0, 80a13e4 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a13d4:	212d      	movs	r1, #45	; 0x2d
 80a13d6:	4640      	mov	r0, r8
 80a13d8:	f7ff ff9a 	bl	80a1310 <_ZN5Print5printEc>
     number = -number;
 80a13dc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a13e0:	4604      	mov	r4, r0
 80a13e2:	e000      	b.n	80a13e6 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a13e4:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a13e6:	4935      	ldr	r1, [pc, #212]	; (80a14bc <_ZN5Print10printFloatEdh+0x168>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a13e8:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a13ec:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a13ee:	fa5f f389 	uxtb.w	r3, r9
 80a13f2:	429d      	cmp	r5, r3
 80a13f4:	d906      	bls.n	80a1404 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a13f6:	2200      	movs	r2, #0
 80a13f8:	4b31      	ldr	r3, [pc, #196]	; (80a14c0 <_ZN5Print10printFloatEdh+0x16c>)
 80a13fa:	f001 fd63 	bl	80a2ec4 <__aeabi_ddiv>
 80a13fe:	f109 0901 	add.w	r9, r9, #1
 80a1402:	e7f4      	b.n	80a13ee <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1404:	463a      	mov	r2, r7
 80a1406:	4633      	mov	r3, r6
 80a1408:	f001 fa80 	bl	80a290c <__adddf3>
 80a140c:	460f      	mov	r7, r1
 80a140e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1410:	f001 ff06 	bl	80a3220 <__aeabi_d2uiz>
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1414:	220a      	movs	r2, #10
 80a1416:	4601      	mov	r1, r0
 80a1418:	4681      	mov	r9, r0
 80a141a:	4640      	mov	r0, r8
 80a141c:	f7ff ff7b 	bl	80a1316 <_ZN5Print11printNumberEmh>
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1420:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1422:	b3e5      	cbz	r5, 80a149e <_ZN5Print10printFloatEdh+0x14a>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1424:	4648      	mov	r0, r9
 80a1426:	f001 fbad 	bl	80a2b84 <__aeabi_ui2d>
 80a142a:	4602      	mov	r2, r0
 80a142c:	460b      	mov	r3, r1
 80a142e:	4630      	mov	r0, r6
 80a1430:	4639      	mov	r1, r7
 80a1432:	f001 fa69 	bl	80a2908 <__aeabi_dsub>
 80a1436:	4606      	mov	r6, r0
 80a1438:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a143a:	4640      	mov	r0, r8
 80a143c:	4921      	ldr	r1, [pc, #132]	; (80a14c4 <_ZN5Print10printFloatEdh+0x170>)
 80a143e:	f7ff ff53 	bl	80a12e8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1442:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1444:	2200      	movs	r2, #0
 80a1446:	4b1e      	ldr	r3, [pc, #120]	; (80a14c0 <_ZN5Print10printFloatEdh+0x16c>)
 80a1448:	4630      	mov	r0, r6
 80a144a:	4639      	mov	r1, r7
 80a144c:	f001 fc10 	bl	80a2c70 <__aeabi_dmul>
 80a1450:	4606      	mov	r6, r0
 80a1452:	460f      	mov	r7, r1
    int toPrint = int(remainder);
 80a1454:	f001 febc 	bl	80a31d0 <__aeabi_d2iz>
        return write(n);
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
 80a1458:	f1b0 0a00 	subs.w	sl, r0, #0
 80a145c:	da07      	bge.n	80a146e <_ZN5Print10printFloatEdh+0x11a>
            t = print('-');
 80a145e:	212d      	movs	r1, #45	; 0x2d
 80a1460:	4640      	mov	r0, r8
 80a1462:	f7ff ff55 	bl	80a1310 <_ZN5Print5printEc>
            val = -n;
 80a1466:	f1ca 0100 	rsb	r1, sl, #0
    } else {
        size_t t = 0;
        using PrintNumberType = typename PrintNumberTypeSelector<T>::type;
        PrintNumberType val;
        if (n < 0 && base == 10) {
            t = print('-');
 80a146a:	4681      	mov	r9, r0
 80a146c:	e002      	b.n	80a1474 <_ZN5Print10printFloatEdh+0x120>
            val = -n;
        } else {
            val = n;
 80a146e:	4651      	mov	r1, sl
size_t Print::print(T n, int base)
{
    if (base == 0) {
        return write(n);
    } else {
        size_t t = 0;
 80a1470:	f04f 0900 	mov.w	r9, #0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
 80a1474:	220a      	movs	r2, #10
 80a1476:	4640      	mov	r0, r8
 80a1478:	f7ff ff4d 	bl	80a1316 <_ZN5Print11printNumberEmh>
    n += print(toPrint);
 80a147c:	4448      	add	r0, r9
 80a147e:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1480:	4650      	mov	r0, sl
 80a1482:	f001 fb8f 	bl	80a2ba4 <__aeabi_i2d>
 80a1486:	4602      	mov	r2, r0
 80a1488:	460b      	mov	r3, r1
 80a148a:	4630      	mov	r0, r6
 80a148c:	4639      	mov	r1, r7
 80a148e:	f001 fa3b 	bl	80a2908 <__aeabi_dsub>
 80a1492:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1494:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1498:	4606      	mov	r6, r0
 80a149a:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a149c:	d1d2      	bne.n	80a1444 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a149e:	4620      	mov	r0, r4
 80a14a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a14a4:	080a37b0 	.word	0x080a37b0
 80a14a8:	7fefffff 	.word	0x7fefffff
 80a14ac:	080a37ba 	.word	0x080a37ba
 80a14b0:	41efffff 	.word	0x41efffff
 80a14b4:	080a37b4 	.word	0x080a37b4
 80a14b8:	c1efffff 	.word	0xc1efffff
 80a14bc:	3fe00000 	.word	0x3fe00000
 80a14c0:	40240000 	.word	0x40240000
 80a14c4:	080a37b8 	.word	0x080a37b8

080a14c8 <_ZN5Print5printEdi>:
  return printFloat((double)n, digits);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a14c8:	f89d 1000 	ldrb.w	r1, [sp]
 80a14cc:	9100      	str	r1, [sp, #0]
 80a14ce:	f7ff bf41 	b.w	80a1354 <_ZN5Print10printFloatEdh>

080a14d2 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a14d2:	2300      	movs	r3, #0
 80a14d4:	461a      	mov	r2, r3
 80a14d6:	4619      	mov	r1, r3
 80a14d8:	6840      	ldr	r0, [r0, #4]
 80a14da:	f7ff bc69 	b.w	80a0db0 <network_on>

080a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a14de:	680b      	ldr	r3, [r1, #0]
 80a14e0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a14e2:	b113      	cbz	r3, 80a14ea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a14e4:	685a      	ldr	r2, [r3, #4]
 80a14e6:	3201      	adds	r2, #1
 80a14e8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a14ea:	4770      	bx	lr

080a14ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a14ec:	4a01      	ldr	r2, [pc, #4]	; (80a14f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a14ee:	4b02      	ldr	r3, [pc, #8]	; (80a14f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a14f0:	601a      	str	r2, [r3, #0]
 80a14f2:	4770      	bx	lr
 80a14f4:	080a3834 	.word	0x080a3834
 80a14f8:	20000204 	.word	0x20000204

080a14fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a14fc:	4b02      	ldr	r3, [pc, #8]	; (80a1508 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a14fe:	681a      	ldr	r2, [r3, #0]
 80a1500:	4b02      	ldr	r3, [pc, #8]	; (80a150c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1502:	601a      	str	r2, [r3, #0]
 80a1504:	4770      	bx	lr
 80a1506:	bf00      	nop
 80a1508:	20000014 	.word	0x20000014
 80a150c:	20000208 	.word	0x20000208

080a1510 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1510:	2100      	movs	r1, #0
 80a1512:	f7ff bc01 	b.w	80a0d18 <system_delay_ms>

080a1516 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a1516:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a1518:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a151a:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a151c:	b113      	cbz	r3, 80a1524 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a151e:	2203      	movs	r2, #3
 80a1520:	4601      	mov	r1, r0
 80a1522:	4798      	blx	r3
    }
 80a1524:	4620      	mov	r0, r4
 80a1526:	bd10      	pop	{r4, pc}

080a1528 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1528:	b510      	push	{r4, lr}
 80a152a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a152c:	f7ff fff3 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
 80a1530:	4620      	mov	r0, r4
 80a1532:	bd10      	pop	{r4, pc}

080a1534 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1534:	b513      	push	{r0, r1, r4, lr}
 80a1536:	460b      	mov	r3, r1
 80a1538:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a153a:	c803      	ldmia	r0, {r0, r1}
 80a153c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1540:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1544:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1548:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a154c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1550:	b002      	add	sp, #8
 80a1552:	bd10      	pop	{r4, pc}

080a1554 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1554:	4803      	ldr	r0, [pc, #12]	; (80a1564 <_GLOBAL__sub_I_RGB+0x10>)
 80a1556:	2300      	movs	r3, #0
 80a1558:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a155a:	4a03      	ldr	r2, [pc, #12]	; (80a1568 <_GLOBAL__sub_I_RGB+0x14>)
 80a155c:	4903      	ldr	r1, [pc, #12]	; (80a156c <_GLOBAL__sub_I_RGB+0x18>)
 80a155e:	f000 bf41 	b.w	80a23e4 <__aeabi_atexit>
 80a1562:	bf00      	nop
 80a1564:	2000020c 	.word	0x2000020c
 80a1568:	20000080 	.word	0x20000080
 80a156c:	080a1529 	.word	0x080a1529

080a1570 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1570:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1572:	4b14      	ldr	r3, [pc, #80]	; (80a15c4 <serialEventRun+0x54>)
 80a1574:	b133      	cbz	r3, 80a1584 <serialEventRun+0x14>
 80a1576:	f000 fc5b 	bl	80a1e30 <_Z16_fetch_usbserialv>
 80a157a:	6803      	ldr	r3, [r0, #0]
 80a157c:	691b      	ldr	r3, [r3, #16]
 80a157e:	4798      	blx	r3
 80a1580:	2800      	cmp	r0, #0
 80a1582:	dc16      	bgt.n	80a15b2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1584:	4b10      	ldr	r3, [pc, #64]	; (80a15c8 <serialEventRun+0x58>)
 80a1586:	b133      	cbz	r3, 80a1596 <serialEventRun+0x26>
 80a1588:	f000 fd10 	bl	80a1fac <_Z22__fetch_global_Serial1v>
 80a158c:	6803      	ldr	r3, [r0, #0]
 80a158e:	691b      	ldr	r3, [r3, #16]
 80a1590:	4798      	blx	r3
 80a1592:	2800      	cmp	r0, #0
 80a1594:	dc10      	bgt.n	80a15b8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1596:	4b0d      	ldr	r3, [pc, #52]	; (80a15cc <serialEventRun+0x5c>)
 80a1598:	b10b      	cbz	r3, 80a159e <serialEventRun+0x2e>
 80a159a:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a159e:	4b0c      	ldr	r3, [pc, #48]	; (80a15d0 <serialEventRun+0x60>)
 80a15a0:	b17b      	cbz	r3, 80a15c2 <serialEventRun+0x52>
 80a15a2:	f000 fc81 	bl	80a1ea8 <_Z17_fetch_usbserial1v>
 80a15a6:	6803      	ldr	r3, [r0, #0]
 80a15a8:	691b      	ldr	r3, [r3, #16]
 80a15aa:	4798      	blx	r3
 80a15ac:	2800      	cmp	r0, #0
 80a15ae:	dc06      	bgt.n	80a15be <serialEventRun+0x4e>
 80a15b0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a15b2:	f3af 8000 	nop.w
 80a15b6:	e7e5      	b.n	80a1584 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a15b8:	f3af 8000 	nop.w
 80a15bc:	e7eb      	b.n	80a1596 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a15be:	f3af 8000 	nop.w
 80a15c2:	bd08      	pop	{r3, pc}
	...

080a15d4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a15d4:	b508      	push	{r3, lr}
	serialEventRun();
 80a15d6:	f7ff ffcb 	bl	80a1570 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a15da:	f7ff fa9b 	bl	80a0b14 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a15de:	4b01      	ldr	r3, [pc, #4]	; (80a15e4 <_post_loop+0x10>)
 80a15e0:	6018      	str	r0, [r3, #0]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	200006a0 	.word	0x200006a0

080a15e8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a15e8:	4802      	ldr	r0, [pc, #8]	; (80a15f4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a15ea:	4a03      	ldr	r2, [pc, #12]	; (80a15f8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a15ec:	4903      	ldr	r1, [pc, #12]	; (80a15fc <_Z33system_initialize_user_backup_ramv+0x14>)
 80a15ee:	1a12      	subs	r2, r2, r0
 80a15f0:	f001 bff8 	b.w	80a35e4 <memcpy>
 80a15f4:	40024000 	.word	0x40024000
 80a15f8:	40024004 	.word	0x40024004
 80a15fc:	080a3a98 	.word	0x080a3a98

080a1600 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1600:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1602:	2300      	movs	r3, #0
 80a1604:	9300      	str	r3, [sp, #0]
 80a1606:	461a      	mov	r2, r3
 80a1608:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a160c:	f7ff fba6 	bl	80a0d5c <system_ctrl_set_result>
}
 80a1610:	b003      	add	sp, #12
 80a1612:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1618 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1618:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a161a:	8843      	ldrh	r3, [r0, #2]
 80a161c:	2b0a      	cmp	r3, #10
 80a161e:	d008      	beq.n	80a1632 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1620:	2b50      	cmp	r3, #80	; 0x50
 80a1622:	d109      	bne.n	80a1638 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1624:	4b09      	ldr	r3, [pc, #36]	; (80a164c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1626:	681b      	ldr	r3, [r3, #0]
 80a1628:	b13b      	cbz	r3, 80a163a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a162a:	b003      	add	sp, #12
 80a162c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1630:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1632:	f7ff ffe5 	bl	80a1600 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1636:	e006      	b.n	80a1646 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1638:	2300      	movs	r3, #0
 80a163a:	9300      	str	r3, [sp, #0]
 80a163c:	461a      	mov	r2, r3
 80a163e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1642:	f7ff fb8b 	bl	80a0d5c <system_ctrl_set_result>
        break;
    }
}
 80a1646:	b003      	add	sp, #12
 80a1648:	f85d fb04 	ldr.w	pc, [sp], #4
 80a164c:	2000021c 	.word	0x2000021c

080a1650 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1650:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1652:	4c10      	ldr	r4, [pc, #64]	; (80a1694 <module_user_init_hook+0x44>)
 80a1654:	4d10      	ldr	r5, [pc, #64]	; (80a1698 <module_user_init_hook+0x48>)
 80a1656:	6823      	ldr	r3, [r4, #0]
 80a1658:	42ab      	cmp	r3, r5
 80a165a:	4b10      	ldr	r3, [pc, #64]	; (80a169c <module_user_init_hook+0x4c>)
 80a165c:	bf0c      	ite	eq
 80a165e:	2201      	moveq	r2, #1
 80a1660:	2200      	movne	r2, #0
 80a1662:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1664:	d002      	beq.n	80a166c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1666:	f7ff ffbf 	bl	80a15e8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a166a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a166c:	f7ff fa42 	bl	80a0af4 <HAL_RNG_GetRandomNumber>
 80a1670:	4604      	mov	r4, r0
    srand(seed);
 80a1672:	f001 ffcb 	bl	80a360c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1676:	4b0a      	ldr	r3, [pc, #40]	; (80a16a0 <module_user_init_hook+0x50>)
 80a1678:	b113      	cbz	r3, 80a1680 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a167a:	4620      	mov	r0, r4
 80a167c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1680:	2100      	movs	r1, #0
 80a1682:	4807      	ldr	r0, [pc, #28]	; (80a16a0 <module_user_init_hook+0x50>)
 80a1684:	f7ff fbec 	bl	80a0e60 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1688:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a168c:	2100      	movs	r1, #0
 80a168e:	4805      	ldr	r0, [pc, #20]	; (80a16a4 <module_user_init_hook+0x54>)
 80a1690:	f7ff bb5a 	b.w	80a0d48 <system_ctrl_set_app_request_handler>
 80a1694:	40024000 	.word	0x40024000
 80a1698:	9a271c1e 	.word	0x9a271c1e
 80a169c:	20000220 	.word	0x20000220
 80a16a0:	00000000 	.word	0x00000000
 80a16a4:	080a1619 	.word	0x080a1619

080a16a8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16a8:	4770      	bx	lr

080a16aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a16aa:	2000      	movs	r0, #0
 80a16ac:	4770      	bx	lr

080a16ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a16ae:	b510      	push	{r4, lr}
 80a16b0:	4604      	mov	r4, r0
 80a16b2:	2110      	movs	r1, #16
 80a16b4:	f000 fea4 	bl	80a2400 <_ZdlPvj>
 80a16b8:	4620      	mov	r0, r4
 80a16ba:	bd10      	pop	{r4, pc}

080a16bc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a16bc:	b508      	push	{r3, lr}
      { delete this; }
 80a16be:	b108      	cbz	r0, 80a16c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a16c0:	f7ff fff5 	bl	80a16ae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a16c4:	bd08      	pop	{r3, pc}

080a16c6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a16c6:	2200      	movs	r2, #0
 80a16c8:	6002      	str	r2, [r0, #0]
 80a16ca:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a16ce:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a16d0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a16d2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a16d6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a16d8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a16da:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a16dc:	680c      	ldr	r4, [r1, #0]
 80a16de:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a16e0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a16e2:	bd10      	pop	{r4, pc}

080a16e4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a16e4:	b510      	push	{r4, lr}
 80a16e6:	4604      	mov	r4, r0
    free((void*)msg_);
 80a16e8:	6800      	ldr	r0, [r0, #0]
 80a16ea:	f7ff fbc9 	bl	80a0e80 <free>
}
 80a16ee:	4620      	mov	r0, r4
 80a16f0:	bd10      	pop	{r4, pc}

080a16f2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a16f2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a16f4:	68c4      	ldr	r4, [r0, #12]
 80a16f6:	b1f4      	cbz	r4, 80a1736 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a16f8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a16fa:	2b02      	cmp	r3, #2
 80a16fc:	d103      	bne.n	80a1706 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a16fe:	f104 000c 	add.w	r0, r4, #12
 80a1702:	f7ff ffef 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1706:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1708:	b135      	cbz	r5, 80a1718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a170a:	4628      	mov	r0, r5
 80a170c:	f7ff ff03 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
 80a1710:	2110      	movs	r1, #16
 80a1712:	4628      	mov	r0, r5
 80a1714:	f000 fe74 	bl	80a2400 <_ZdlPvj>
 80a1718:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a171a:	b135      	cbz	r5, 80a172a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a171c:	4628      	mov	r0, r5
 80a171e:	f7ff fefa 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
 80a1722:	2110      	movs	r1, #16
 80a1724:	4628      	mov	r0, r5
 80a1726:	f000 fe6b 	bl	80a2400 <_ZdlPvj>
 80a172a:	4620      	mov	r0, r4
 80a172c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1730:	2114      	movs	r1, #20
 80a1732:	f000 be65 	b.w	80a2400 <_ZdlPvj>
 80a1736:	bd38      	pop	{r3, r4, r5, pc}

080a1738 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1738:	b510      	push	{r4, lr}
 80a173a:	b088      	sub	sp, #32
 80a173c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a173e:	4668      	mov	r0, sp
 80a1740:	f7ff fcfb 	bl	80a113a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1744:	4669      	mov	r1, sp
 80a1746:	a804      	add	r0, sp, #16
 80a1748:	f7ff fd36 	bl	80a11b8 <_ZN6StringC1ERKS_>
 80a174c:	a804      	add	r0, sp, #16
 80a174e:	47a0      	blx	r4
 80a1750:	4604      	mov	r4, r0
 80a1752:	a804      	add	r0, sp, #16
 80a1754:	f7ff fcaa 	bl	80a10ac <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1758:	4668      	mov	r0, sp
 80a175a:	f7ff fca7 	bl	80a10ac <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a175e:	4620      	mov	r0, r4
 80a1760:	b008      	add	sp, #32
 80a1762:	bd10      	pop	{r4, pc}

080a1764 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1764:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1766:	4607      	mov	r7, r0
 80a1768:	460e      	mov	r6, r1
 80a176a:	4615      	mov	r5, r2
 80a176c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a176e:	2410      	movs	r4, #16
 80a1770:	4622      	mov	r2, r4
 80a1772:	2100      	movs	r1, #0
 80a1774:	4668      	mov	r0, sp
 80a1776:	f001 ff40 	bl	80a35fa <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a177a:	2200      	movs	r2, #0
 80a177c:	4669      	mov	r1, sp
 80a177e:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1780:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a1784:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1786:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1788:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a178a:	f7ff fb49 	bl	80a0e20 <spark_function>
}
 80a178e:	b005      	add	sp, #20
 80a1790:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1792:	b513      	push	{r0, r1, r4, lr}
 80a1794:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1796:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a179a:	2300      	movs	r3, #0
 80a179c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a179e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a17a0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a17a2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17a4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a17a6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a17a8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17aa:	f7fe fde9 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17ae:	4620      	mov	r0, r4
 80a17b0:	b002      	add	sp, #8
 80a17b2:	bd10      	pop	{r4, pc}

080a17b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a17b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a17b6:	460c      	mov	r4, r1
 80a17b8:	4606      	mov	r6, r0
 80a17ba:	460f      	mov	r7, r1
 80a17bc:	f854 3b04 	ldr.w	r3, [r4], #4
 80a17c0:	ad02      	add	r5, sp, #8
 80a17c2:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a17c6:	4621      	mov	r1, r4
 80a17c8:	a801      	add	r0, sp, #4
 80a17ca:	f7ff fe88 	bl	80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a17ce:	4629      	mov	r1, r5
 80a17d0:	4630      	mov	r0, r6
 80a17d2:	f7ff ffde 	bl	80a1792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a17d6:	a801      	add	r0, sp, #4
 80a17d8:	f7fe fdd2 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a17dc:	4620      	mov	r0, r4
 80a17de:	f7fe fdcf 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a17e2:	4638      	mov	r0, r7
 80a17e4:	2108      	movs	r1, #8
 80a17e6:	f000 fe0b 	bl	80a2400 <_ZdlPvj>
        return p;
    }
 80a17ea:	4630      	mov	r0, r6
 80a17ec:	b003      	add	sp, #12
 80a17ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a17f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a17f0:	b538      	push	{r3, r4, r5, lr}
 80a17f2:	2300      	movs	r3, #0
 80a17f4:	4604      	mov	r4, r0
 80a17f6:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a17f8:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a17fa:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a17fc:	f7fe fc4d 	bl	80a009a <_Znwj>
 80a1800:	b128      	cbz	r0, 80a180e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a1802:	2301      	movs	r3, #1
 80a1804:	6043      	str	r3, [r0, #4]
 80a1806:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a1808:	4b02      	ldr	r3, [pc, #8]	; (80a1814 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a180a:	60c5      	str	r5, [r0, #12]
 80a180c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a180e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a1810:	4620      	mov	r0, r4
 80a1812:	bd38      	pop	{r3, r4, r5, pc}
 80a1814:	080a38d4 	.word	0x080a38d4

080a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1818:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a181a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a181c:	b90a      	cbnz	r2, 80a1822 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a181e:	f000 fe02 	bl	80a2426 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1822:	68c3      	ldr	r3, [r0, #12]
    }
 80a1824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1828:	4718      	bx	r3

080a182a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a182a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a182c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a182e:	f100 0110 	add.w	r1, r0, #16
 80a1832:	f7ff fff1 	bl	80a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a1836:	bd08      	pop	{r3, pc}

080a1838 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1838:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a183a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a183c:	b90a      	cbnz	r2, 80a1842 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a183e:	f000 fdf2 	bl	80a2426 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1842:	68c3      	ldr	r3, [r0, #12]
    }
 80a1844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1848:	4718      	bx	r3

080a184a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a184a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a184c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a184e:	f100 0110 	add.w	r1, r0, #16
 80a1852:	f7ff fff1 	bl	80a1838 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1856:	bd08      	pop	{r3, pc}

080a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1858:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a185a:	2300      	movs	r3, #0
 80a185c:	6083      	str	r3, [r0, #8]
 80a185e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1860:	4604      	mov	r4, r0
 80a1862:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1864:	b12b      	cbz	r3, 80a1872 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1866:	2202      	movs	r2, #2
 80a1868:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a186a:	68eb      	ldr	r3, [r5, #12]
 80a186c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a186e:	68ab      	ldr	r3, [r5, #8]
 80a1870:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1872:	4620      	mov	r0, r4
 80a1874:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a1878:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a187a:	b089      	sub	sp, #36	; 0x24
 80a187c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a187e:	4668      	mov	r0, sp
 80a1880:	f7ff ff21 	bl	80a16c6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1884:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1888:	2300      	movs	r3, #0
 80a188a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a188e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a1892:	2b00      	cmp	r3, #0
 80a1894:	d103      	bne.n	80a189e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a1896:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a189a:	2900      	cmp	r1, #0
 80a189c:	d1f7      	bne.n	80a188e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a189e:	d002      	beq.n	80a18a6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a18a0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a18a4:	e063      	b.n	80a196e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a18a6:	f114 050c 	adds.w	r5, r4, #12
 80a18aa:	d003      	beq.n	80a18b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a18ac:	4669      	mov	r1, sp
 80a18ae:	4628      	mov	r0, r5
 80a18b0:	f7ff ff09 	bl	80a16c6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a18b4:	f3bf 8f5f 	dmb	sy
 80a18b8:	2301      	movs	r3, #1
 80a18ba:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a18bc:	f3bf 8f5f 	dmb	sy
 80a18c0:	f104 0308 	add.w	r3, r4, #8
 80a18c4:	2000      	movs	r0, #0
 80a18c6:	e853 6f00 	ldrex	r6, [r3]
 80a18ca:	e843 0200 	strex	r2, r0, [r3]
 80a18ce:	2a00      	cmp	r2, #0
 80a18d0:	d1f9      	bne.n	80a18c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a18d2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a18d6:	2e00      	cmp	r6, #0
 80a18d8:	d049      	beq.n	80a196e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a18da:	f7ff fa25 	bl	80a0d28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a18de:	b120      	cbz	r0, 80a18ea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a18e0:	4629      	mov	r1, r5
 80a18e2:	4630      	mov	r0, r6
 80a18e4:	f7ff ff98 	bl	80a1818 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a18e8:	e03a      	b.n	80a1960 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a18ea:	4631      	mov	r1, r6
 80a18ec:	a802      	add	r0, sp, #8
 80a18ee:	f7ff ffb3 	bl	80a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a18f2:	68e0      	ldr	r0, [r4, #12]
 80a18f4:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a18f8:	b108      	cbz	r0, 80a18fe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a18fa:	f001 fec1 	bl	80a3680 <strdup>
 80a18fe:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1900:	2010      	movs	r0, #16
 80a1902:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a1906:	f7fe fbc8 	bl	80a009a <_Znwj>
 80a190a:	4605      	mov	r5, r0
 80a190c:	b1e8      	cbz	r0, 80a194a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a190e:	2700      	movs	r7, #0
 80a1910:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1912:	2018      	movs	r0, #24
 80a1914:	f7fe fbc1 	bl	80a009a <_Znwj>
 80a1918:	4604      	mov	r4, r0
 80a191a:	b188      	cbz	r0, 80a1940 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a191c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a191e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1920:	a802      	add	r0, sp, #8
 80a1922:	f7ff fe07 	bl	80a1534 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1926:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1928:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a192a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a192c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a192e:	9204      	str	r2, [sp, #16]
 80a1930:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1932:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a1934:	60e3      	str	r3, [r4, #12]
 80a1936:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a193a:	9205      	str	r2, [sp, #20]
 80a193c:	f7ff fec3 	bl	80a16c6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1940:	4b0d      	ldr	r3, [pc, #52]	; (80a1978 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1942:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1944:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1946:	4b0d      	ldr	r3, [pc, #52]	; (80a197c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a1948:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a194a:	a806      	add	r0, sp, #24
 80a194c:	f7ff feca 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1950:	a802      	add	r0, sp, #8
 80a1952:	f7ff fde0 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1956:	2200      	movs	r2, #0
 80a1958:	4629      	mov	r1, r5
 80a195a:	4809      	ldr	r0, [pc, #36]	; (80a1980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a195c:	f7ff f9ec 	bl	80a0d38 <application_thread_invoke>
 80a1960:	4630      	mov	r0, r6
 80a1962:	f7ff fdd8 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1966:	2110      	movs	r1, #16
 80a1968:	4630      	mov	r0, r6
 80a196a:	f000 fd49 	bl	80a2400 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a196e:	4668      	mov	r0, sp
 80a1970:	f7ff feb8 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
    }
 80a1974:	b009      	add	sp, #36	; 0x24
 80a1976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1978:	080a182b 	.word	0x080a182b
 80a197c:	080a1aa1 	.word	0x080a1aa1
 80a1980:	080a1ff9 	.word	0x080a1ff9

080a1984 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a1984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1988:	b08b      	sub	sp, #44	; 0x2c
 80a198a:	4606      	mov	r6, r0
 80a198c:	460f      	mov	r7, r1
 80a198e:	4690      	mov	r8, r2
 80a1990:	4699      	mov	r9, r3
 80a1992:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a1996:	f7ff fa4b 	bl	80a0e30 <spark_cloud_flag_connected>
 80a199a:	ad07      	add	r5, sp, #28
    if (!connected()) {
 80a199c:	4683      	mov	fp, r0
 80a199e:	bb30      	cbnz	r0, 80a19ee <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a19a0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a19a4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a19a6:	a905      	add	r1, sp, #20
 80a19a8:	4628      	mov	r0, r5
 80a19aa:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a19ae:	f7ff fe8a 	bl	80a16c6 <_ZN8particle5ErrorC1EOS0_>
 80a19b2:	2014      	movs	r0, #20
 80a19b4:	f7fe fb71 	bl	80a009a <_Znwj>
 80a19b8:	4604      	mov	r4, r0
 80a19ba:	b158      	cbz	r0, 80a19d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a19bc:	2302      	movs	r3, #2
 80a19be:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a19c0:	2301      	movs	r3, #1
 80a19c2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a19c4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a19c8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a19cc:	4629      	mov	r1, r5
 80a19ce:	300c      	adds	r0, #12
 80a19d0:	f7ff fe79 	bl	80a16c6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a19d4:	4630      	mov	r0, r6
 80a19d6:	4621      	mov	r1, r4
 80a19d8:	f840 4b04 	str.w	r4, [r0], #4
 80a19dc:	f7ff ff08 	bl	80a17f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a19e0:	4628      	mov	r0, r5
 80a19e2:	f7ff fe7f 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a19e6:	a805      	add	r0, sp, #20
 80a19e8:	f7ff fe7c 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
 80a19ec:	e052      	b.n	80a1a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a19ee:	2400      	movs	r4, #0
 80a19f0:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a19f2:	2014      	movs	r0, #20
 80a19f4:	606c      	str	r4, [r5, #4]
 80a19f6:	60ac      	str	r4, [r5, #8]
 80a19f8:	9307      	str	r3, [sp, #28]
 80a19fa:	f7fe fb4e 	bl	80a009a <_Znwj>
 80a19fe:	4601      	mov	r1, r0
 80a1a00:	b118      	cbz	r0, 80a1a0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a1a02:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a1a04:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a1a06:	6044      	str	r4, [r0, #4]
 80a1a08:	6084      	str	r4, [r0, #8]
 80a1a0a:	a804      	add	r0, sp, #16
 80a1a0c:	9103      	str	r1, [sp, #12]
 80a1a0e:	f7ff feef 	bl	80a17f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a1a12:	4b22      	ldr	r3, [pc, #136]	; (80a1a9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a1a14:	2008      	movs	r0, #8
 80a1a16:	9308      	str	r3, [sp, #32]
 80a1a18:	f7fe fb3f 	bl	80a009a <_Znwj>
 80a1a1c:	4604      	mov	r4, r0
 80a1a1e:	b128      	cbz	r0, 80a1a2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1a20:	9b03      	ldr	r3, [sp, #12]
 80a1a22:	a904      	add	r1, sp, #16
 80a1a24:	f840 3b04 	str.w	r3, [r0], #4
 80a1a28:	f7ff fd59 	bl	80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a2c:	9500      	str	r5, [sp, #0]
 80a1a2e:	fa5f f38a 	uxtb.w	r3, sl
 80a1a32:	464a      	mov	r2, r9
 80a1a34:	4641      	mov	r1, r8
 80a1a36:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a1a38:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a1a3a:	f7ff fa01 	bl	80a0e40 <spark_send_event>
 80a1a3e:	b920      	cbnz	r0, 80a1a4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a1a40:	9b03      	ldr	r3, [sp, #12]
 80a1a42:	785b      	ldrb	r3, [r3, #1]
 80a1a44:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a1a48:	b183      	cbz	r3, 80a1a6c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a1a4a:	9b03      	ldr	r3, [sp, #12]
 80a1a4c:	a904      	add	r1, sp, #16
 80a1a4e:	a806      	add	r0, sp, #24
 80a1a50:	9305      	str	r3, [sp, #20]
 80a1a52:	f7ff fd44 	bl	80a14de <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a1a56:	a905      	add	r1, sp, #20
 80a1a58:	4630      	mov	r0, r6
 80a1a5a:	f7ff fe9a 	bl	80a1792 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1a5e:	a806      	add	r0, sp, #24
 80a1a60:	f7fe fc8e 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a64:	a804      	add	r0, sp, #16
 80a1a66:	f7fe fc8b 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a6a:	e013      	b.n	80a1a94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a1a6c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a1a70:	a905      	add	r1, sp, #20
 80a1a72:	a803      	add	r0, sp, #12
 80a1a74:	9205      	str	r2, [sp, #20]
 80a1a76:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a1a7a:	f7ff fefd 	bl	80a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1a7e:	a805      	add	r0, sp, #20
 80a1a80:	f7ff fe30 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a1a84:	a805      	add	r0, sp, #20
 80a1a86:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a1a88:	f7ff fe94 	bl	80a17b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a1a8c:	a806      	add	r0, sp, #24
 80a1a8e:	f7fe fc77 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1a92:	e7da      	b.n	80a1a4a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
 80a1a94:	4630      	mov	r0, r6
 80a1a96:	b00b      	add	sp, #44	; 0x2c
 80a1a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a1a9c:	080a1c11 	.word	0x080a1c11

080a1aa0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1aa0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1aa2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1aa4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1aa6:	d006      	beq.n	80a1ab6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a1aa8:	2a03      	cmp	r2, #3
 80a1aaa:	d017      	beq.n	80a1adc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a1aac:	2a01      	cmp	r2, #1
 80a1aae:	d122      	bne.n	80a1af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1ab0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1ab2:	6003      	str	r3, [r0, #0]
	      break;
 80a1ab4:	e01f      	b.n	80a1af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ab6:	2018      	movs	r0, #24
 80a1ab8:	680e      	ldr	r6, [r1, #0]
 80a1aba:	f7fe faee 	bl	80a009a <_Znwj>
 80a1abe:	4605      	mov	r5, r0
 80a1ac0:	b150      	cbz	r0, 80a1ad8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1ac2:	4631      	mov	r1, r6
 80a1ac4:	f7ff fec8 	bl	80a1858 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a1ac8:	6930      	ldr	r0, [r6, #16]
 80a1aca:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1ace:	b108      	cbz	r0, 80a1ad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a1ad0:	f001 fdd6 	bl	80a3680 <strdup>
 80a1ad4:	6128      	str	r0, [r5, #16]
 80a1ad6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1ad8:	6025      	str	r5, [r4, #0]
 80a1ada:	e00c      	b.n	80a1af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1adc:	6804      	ldr	r4, [r0, #0]
 80a1ade:	b154      	cbz	r4, 80a1af6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a1ae0:	f104 0010 	add.w	r0, r4, #16
 80a1ae4:	f7ff fdfe 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1ae8:	4620      	mov	r0, r4
 80a1aea:	f7ff fd14 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1aee:	2118      	movs	r1, #24
 80a1af0:	4620      	mov	r0, r4
 80a1af2:	f000 fc85 	bl	80a2400 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1af6:	2000      	movs	r0, #0
 80a1af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1afa <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1afa:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1afc:	2300      	movs	r3, #0
 80a1afe:	6083      	str	r3, [r0, #8]
 80a1b00:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1b02:	4604      	mov	r4, r0
 80a1b04:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1b06:	b12b      	cbz	r3, 80a1b14 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1b08:	2202      	movs	r2, #2
 80a1b0a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a1b0c:	68eb      	ldr	r3, [r5, #12]
 80a1b0e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1b10:	68ab      	ldr	r3, [r5, #8]
 80a1b12:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1b14:	4620      	mov	r0, r4
 80a1b16:	bd38      	pop	{r3, r4, r5, pc}

080a1b18 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b18:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a1b1a:	b570      	push	{r4, r5, r6, lr}
 80a1b1c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1b1e:	d006      	beq.n	80a1b2e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1b20:	2a03      	cmp	r2, #3
 80a1b22:	d011      	beq.n	80a1b48 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1b24:	2a01      	cmp	r2, #1
 80a1b26:	d118      	bne.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1b28:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a1b2a:	6003      	str	r3, [r0, #0]
	      break;
 80a1b2c:	e015      	b.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b2e:	2014      	movs	r0, #20
 80a1b30:	680e      	ldr	r6, [r1, #0]
 80a1b32:	f7fe fab2 	bl	80a009a <_Znwj>
 80a1b36:	4605      	mov	r5, r0
 80a1b38:	b120      	cbz	r0, 80a1b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a1b3a:	4631      	mov	r1, r6
 80a1b3c:	f7ff ffdd 	bl	80a1afa <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1b40:	7c33      	ldrb	r3, [r6, #16]
 80a1b42:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1b44:	6025      	str	r5, [r4, #0]
 80a1b46:	e008      	b.n	80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b48:	6804      	ldr	r4, [r0, #0]
 80a1b4a:	b134      	cbz	r4, 80a1b5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1b4c:	4620      	mov	r0, r4
 80a1b4e:	f7ff fce2 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1b52:	2114      	movs	r1, #20
 80a1b54:	4620      	mov	r0, r4
 80a1b56:	f000 fc53 	bl	80a2400 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1b5a:	2000      	movs	r0, #0
 80a1b5c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a1b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1b62:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1b64:	f3bf 8f5f 	dmb	sy
 80a1b68:	b087      	sub	sp, #28
 80a1b6a:	2300      	movs	r3, #0
 80a1b6c:	e850 6f00 	ldrex	r6, [r0]
 80a1b70:	e840 3200 	strex	r2, r3, [r0]
 80a1b74:	2a00      	cmp	r2, #0
 80a1b76:	d1f9      	bne.n	80a1b6c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1b78:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1b7c:	2e00      	cmp	r6, #0
 80a1b7e:	d03f      	beq.n	80a1c00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a1b80:	4618      	mov	r0, r3
 80a1b82:	f7ff f8d1 	bl	80a0d28 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1b86:	4607      	mov	r7, r0
 80a1b88:	b120      	cbz	r0, 80a1b94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1b8a:	4621      	mov	r1, r4
 80a1b8c:	4630      	mov	r0, r6
 80a1b8e:	f7ff fe53 	bl	80a1838 <_ZNKSt8functionIFvRKbEEclES1_>
 80a1b92:	e02e      	b.n	80a1bf2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a1b94:	4631      	mov	r1, r6
 80a1b96:	a801      	add	r0, sp, #4
 80a1b98:	f7ff ffaf 	bl	80a1afa <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a1b9c:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a1b9e:	2010      	movs	r0, #16
 80a1ba0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a1ba4:	f7fe fa79 	bl	80a009a <_Znwj>
 80a1ba8:	4605      	mov	r5, r0
 80a1baa:	b1d0      	cbz	r0, 80a1be2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1bac:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1bae:	2014      	movs	r0, #20
 80a1bb0:	f7fe fa73 	bl	80a009a <_Znwj>
 80a1bb4:	4604      	mov	r4, r0
 80a1bb6:	b178      	cbz	r0, 80a1bd8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1bb8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a1bba:	4601      	mov	r1, r0
 80a1bbc:	a801      	add	r0, sp, #4
 80a1bbe:	f7ff fcb9 	bl	80a1534 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bc2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a1bc4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bc6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1bc8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a1bca:	9203      	str	r2, [sp, #12]
 80a1bcc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1bce:	60e3      	str	r3, [r4, #12]
 80a1bd0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1bd4:	9204      	str	r2, [sp, #16]
 80a1bd6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bd8:	4b0a      	ldr	r3, [pc, #40]	; (80a1c04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a1bda:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a1bdc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a1bde:	4b0a      	ldr	r3, [pc, #40]	; (80a1c08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a1be0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1be2:	a801      	add	r0, sp, #4
 80a1be4:	f7ff fc97 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a1be8:	2200      	movs	r2, #0
 80a1bea:	4629      	mov	r1, r5
 80a1bec:	4807      	ldr	r0, [pc, #28]	; (80a1c0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a1bee:	f7ff f8a3 	bl	80a0d38 <application_thread_invoke>
 80a1bf2:	4630      	mov	r0, r6
 80a1bf4:	f7ff fc8f 	bl	80a1516 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1bf8:	2110      	movs	r1, #16
 80a1bfa:	4630      	mov	r0, r6
 80a1bfc:	f000 fc00 	bl	80a2400 <_ZdlPvj>
        }
    }
 80a1c00:	b007      	add	sp, #28
 80a1c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a1c04:	080a184b 	.word	0x080a184b
 80a1c08:	080a1b19 	.word	0x080a1b19
 80a1c0c:	080a1ff9 	.word	0x080a1ff9

080a1c10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a1c10:	b530      	push	{r4, r5, lr}
 80a1c12:	4604      	mov	r4, r0
 80a1c14:	b085      	sub	sp, #20
 80a1c16:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1c18:	4668      	mov	r0, sp
 80a1c1a:	4611      	mov	r1, r2
 80a1c1c:	f7ff fdca 	bl	80a17b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a1c20:	b17c      	cbz	r4, 80a1c42 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a1c22:	b224      	sxth	r4, r4
 80a1c24:	4628      	mov	r0, r5
 80a1c26:	b10d      	cbz	r5, 80a1c2c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1c28:	f001 fd2a 	bl	80a3680 <strdup>
 80a1c2c:	9002      	str	r0, [sp, #8]
 80a1c2e:	a902      	add	r1, sp, #8
 80a1c30:	4668      	mov	r0, sp
 80a1c32:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1c36:	f7ff fe1f 	bl	80a1878 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a1c3a:	a802      	add	r0, sp, #8
 80a1c3c:	f7ff fd52 	bl	80a16e4 <_ZN8particle5ErrorD1Ev>
 80a1c40:	e01d      	b.n	80a1c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a1c42:	f04f 0201 	mov.w	r2, #1
 80a1c46:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1c48:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1c4c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a1c50:	42a3      	cmp	r3, r4
 80a1c52:	d103      	bne.n	80a1c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1c54:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1c58:	2900      	cmp	r1, #0
 80a1c5a:	d1f7      	bne.n	80a1c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1c5c:	d002      	beq.n	80a1c64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a1c5e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a1c62:	e00c      	b.n	80a1c7e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1c64:	f110 010c 	adds.w	r1, r0, #12
 80a1c68:	f04f 0301 	mov.w	r3, #1
 80a1c6c:	bf18      	it	ne
 80a1c6e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a1c70:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1c74:	3004      	adds	r0, #4
 80a1c76:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1c7a:	f7ff ff71 	bl	80a1b60 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a1c7e:	a801      	add	r0, sp, #4
 80a1c80:	f7fe fb7e 	bl	80a0380 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1c84:	b005      	add	sp, #20
 80a1c86:	bd30      	pop	{r4, r5, pc}

080a1c88 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a1c88:	4770      	bx	lr

080a1c8a <_ZN9IPAddressD0Ev>:
 80a1c8a:	b510      	push	{r4, lr}
 80a1c8c:	4604      	mov	r4, r0
 80a1c8e:	2118      	movs	r1, #24
 80a1c90:	f000 fbb6 	bl	80a2400 <_ZdlPvj>
 80a1c94:	4620      	mov	r0, r4
 80a1c96:	bd10      	pop	{r4, pc}

080a1c98 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a1c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1c9a:	460f      	mov	r7, r1
 80a1c9c:	f100 0608 	add.w	r6, r0, #8
 80a1ca0:	1d05      	adds	r5, r0, #4
 80a1ca2:	2400      	movs	r4, #0
 80a1ca4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a1ca8:	220a      	movs	r2, #10
 80a1caa:	4638      	mov	r0, r7
 80a1cac:	f7ff fb33 	bl	80a1316 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1cb0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1cb2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1cb4:	d007      	beq.n	80a1cc6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1cb6:	2c00      	cmp	r4, #0
 80a1cb8:	d0f4      	beq.n	80a1ca4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a1cba:	212e      	movs	r1, #46	; 0x2e
 80a1cbc:	4638      	mov	r0, r7
 80a1cbe:	f7ff fb27 	bl	80a1310 <_ZN5Print5printEc>
 80a1cc2:	4404      	add	r4, r0
 80a1cc4:	e7ee      	b.n	80a1ca4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1cc6:	4620      	mov	r0, r4
 80a1cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a1ccc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a1ccc:	b510      	push	{r4, lr}
 80a1cce:	4604      	mov	r4, r0
 80a1cd0:	4b04      	ldr	r3, [pc, #16]	; (80a1ce4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a1cd2:	2211      	movs	r2, #17
 80a1cd4:	f840 3b04 	str.w	r3, [r0], #4
 80a1cd8:	2100      	movs	r1, #0
 80a1cda:	f001 fc8e 	bl	80a35fa <memset>
{
    clear();
}
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	bd10      	pop	{r4, pc}
 80a1ce2:	bf00      	nop
 80a1ce4:	080a38f0 	.word	0x080a38f0

080a1ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a1ce8:	4603      	mov	r3, r0
 80a1cea:	4a07      	ldr	r2, [pc, #28]	; (80a1d08 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a1cec:	b510      	push	{r4, lr}
 80a1cee:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a1cf2:	f101 0210 	add.w	r2, r1, #16
 80a1cf6:	f851 4b04 	ldr.w	r4, [r1], #4
 80a1cfa:	4291      	cmp	r1, r2
 80a1cfc:	f843 4b04 	str.w	r4, [r3], #4
 80a1d00:	d1f9      	bne.n	80a1cf6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a1d02:	780a      	ldrb	r2, [r1, #0]
 80a1d04:	701a      	strb	r2, [r3, #0]
}
 80a1d06:	bd10      	pop	{r4, pc}
 80a1d08:	080a38f0 	.word	0x080a38f0

080a1d0c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d0c:	4a02      	ldr	r2, [pc, #8]	; (80a1d18 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a1d0e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a1d10:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a1d12:	2204      	movs	r2, #4
 80a1d14:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a1d16:	4770      	bx	lr
 80a1d18:	080a38f0 	.word	0x080a38f0

080a1d1c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a1d1c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a1d1e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1d22:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1d26:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a1d2a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a1d2e:	2304      	movs	r3, #4
 80a1d30:	6041      	str	r1, [r0, #4]
 80a1d32:	7503      	strb	r3, [r0, #20]
 80a1d34:	bd10      	pop	{r4, pc}
	...

080a1d38 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1d38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1d3a:	4d04      	ldr	r5, [pc, #16]	; (80a1d4c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a1d3c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a1d3e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1d42:	9500      	str	r5, [sp, #0]
 80a1d44:	f7ff ffea 	bl	80a1d1c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1d48:	b003      	add	sp, #12
 80a1d4a:	bd30      	pop	{r4, r5, pc}
 80a1d4c:	080a38f0 	.word	0x080a38f0

080a1d50 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1d50:	7441      	strb	r1, [r0, #17]
 80a1d52:	4770      	bx	lr

080a1d54 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a1d54:	4770      	bx	lr

080a1d56 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a1d56:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a1d58:	2100      	movs	r1, #0
 80a1d5a:	7c00      	ldrb	r0, [r0, #16]
 80a1d5c:	f7fe ffb4 	bl	80a0cc8 <HAL_USB_USART_Receive_Data>
}
 80a1d60:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d64:	bf28      	it	cs
 80a1d66:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d6a:	bd08      	pop	{r3, pc}

080a1d6c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a1d6c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a1d6e:	2101      	movs	r1, #1
 80a1d70:	7c00      	ldrb	r0, [r0, #16]
 80a1d72:	f7fe ffa9 	bl	80a0cc8 <HAL_USB_USART_Receive_Data>
}
 80a1d76:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1d7a:	bf28      	it	cs
 80a1d7c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1d80:	bd08      	pop	{r3, pc}

080a1d82 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a1d82:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a1d84:	7c00      	ldrb	r0, [r0, #16]
 80a1d86:	f7fe ff97 	bl	80a0cb8 <HAL_USB_USART_Available_Data_For_Write>
}
 80a1d8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d8e:	bd08      	pop	{r3, pc}

080a1d90 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a1d90:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a1d92:	7c00      	ldrb	r0, [r0, #16]
 80a1d94:	f7fe ff88 	bl	80a0ca8 <HAL_USB_USART_Available_Data>
}
 80a1d98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1d9c:	bd08      	pop	{r3, pc}

080a1d9e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a1d9e:	7c00      	ldrb	r0, [r0, #16]
 80a1da0:	f7fe bfa2 	b.w	80a0ce8 <HAL_USB_USART_Flush_Data>

080a1da4 <_ZN9USBSerialD0Ev>:
 80a1da4:	b510      	push	{r4, lr}
 80a1da6:	4604      	mov	r4, r0
 80a1da8:	2114      	movs	r1, #20
 80a1daa:	f000 fb29 	bl	80a2400 <_ZdlPvj>
 80a1dae:	4620      	mov	r0, r4
 80a1db0:	bd10      	pop	{r4, pc}

080a1db2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1db2:	b538      	push	{r3, r4, r5, lr}
 80a1db4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1db6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a1db8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a1dba:	f7fe ff7d 	bl	80a0cb8 <HAL_USB_USART_Available_Data_For_Write>
 80a1dbe:	2800      	cmp	r0, #0
 80a1dc0:	dc01      	bgt.n	80a1dc6 <_ZN9USBSerial5writeEh+0x14>
 80a1dc2:	7c60      	ldrb	r0, [r4, #17]
 80a1dc4:	b128      	cbz	r0, 80a1dd2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a1dc6:	4629      	mov	r1, r5
 80a1dc8:	7c20      	ldrb	r0, [r4, #16]
 80a1dca:	f7fe ff85 	bl	80a0cd8 <HAL_USB_USART_Send_Data>
 80a1dce:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a1dd2:	bd38      	pop	{r3, r4, r5, pc}

080a1dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a1dd4:	b510      	push	{r4, lr}
 80a1dd6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1dd8:	2300      	movs	r3, #0
 80a1dda:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a1ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a1de0:	60a3      	str	r3, [r4, #8]
 80a1de2:	4b05      	ldr	r3, [pc, #20]	; (80a1df8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a1de4:	4608      	mov	r0, r1
 80a1de6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a1de8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a1dea:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a1dec:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a1dee:	4611      	mov	r1, r2
 80a1df0:	f7fe ff4a 	bl	80a0c88 <HAL_USB_USART_Init>
}
 80a1df4:	4620      	mov	r0, r4
 80a1df6:	bd10      	pop	{r4, pc}
 80a1df8:	080a3904 	.word	0x080a3904

080a1dfc <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a1dfc:	2200      	movs	r2, #0
 80a1dfe:	7c00      	ldrb	r0, [r0, #16]
 80a1e00:	f7fe bf4a 	b.w	80a0c98 <HAL_USB_USART_Begin>

080a1e04 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a1e04:	b510      	push	{r4, lr}
 80a1e06:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e08:	2214      	movs	r2, #20
 80a1e0a:	2100      	movs	r1, #0
 80a1e0c:	f001 fbf5 	bl	80a35fa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e10:	4b05      	ldr	r3, [pc, #20]	; (80a1e28 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e12:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1e14:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a1e16:	4b05      	ldr	r3, [pc, #20]	; (80a1e2c <_Z19acquireSerialBufferv+0x28>)
 80a1e18:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e1a:	f240 1301 	movw	r3, #257	; 0x101
 80a1e1e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e20:	2381      	movs	r3, #129	; 0x81
 80a1e22:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e24:	bd10      	pop	{r4, pc}
 80a1e26:	bf00      	nop
 80a1e28:	200002a9 	.word	0x200002a9
 80a1e2c:	20000228 	.word	0x20000228

080a1e30 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1e30:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e32:	4d0e      	ldr	r5, [pc, #56]	; (80a1e6c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a1e34:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a1e36:	a801      	add	r0, sp, #4
 80a1e38:	f7ff ffe4 	bl	80a1e04 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1e3c:	6829      	ldr	r1, [r5, #0]
 80a1e3e:	f011 0401 	ands.w	r4, r1, #1
 80a1e42:	d110      	bne.n	80a1e66 <_Z16_fetch_usbserialv+0x36>
 80a1e44:	4628      	mov	r0, r5
 80a1e46:	f7fe f92c 	bl	80a00a2 <__cxa_guard_acquire>
 80a1e4a:	b160      	cbz	r0, 80a1e66 <_Z16_fetch_usbserialv+0x36>
 80a1e4c:	aa01      	add	r2, sp, #4
 80a1e4e:	4621      	mov	r1, r4
 80a1e50:	4807      	ldr	r0, [pc, #28]	; (80a1e70 <_Z16_fetch_usbserialv+0x40>)
 80a1e52:	f7ff ffbf 	bl	80a1dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1e56:	4628      	mov	r0, r5
 80a1e58:	f7fe f928 	bl	80a00ac <__cxa_guard_release>
 80a1e5c:	4a05      	ldr	r2, [pc, #20]	; (80a1e74 <_Z16_fetch_usbserialv+0x44>)
 80a1e5e:	4906      	ldr	r1, [pc, #24]	; (80a1e78 <_Z16_fetch_usbserialv+0x48>)
 80a1e60:	4803      	ldr	r0, [pc, #12]	; (80a1e70 <_Z16_fetch_usbserialv+0x40>)
 80a1e62:	f000 fabf 	bl	80a23e4 <__aeabi_atexit>
	return _usbserial;
}
 80a1e66:	4802      	ldr	r0, [pc, #8]	; (80a1e70 <_Z16_fetch_usbserialv+0x40>)
 80a1e68:	b007      	add	sp, #28
 80a1e6a:	bd30      	pop	{r4, r5, pc}
 80a1e6c:	20000224 	.word	0x20000224
 80a1e70:	200003ac 	.word	0x200003ac
 80a1e74:	20000080 	.word	0x20000080
 80a1e78:	080a1d55 	.word	0x080a1d55

080a1e7c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1e7c:	b510      	push	{r4, lr}
 80a1e7e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1e80:	2214      	movs	r2, #20
 80a1e82:	2100      	movs	r1, #0
 80a1e84:	f001 fbb9 	bl	80a35fa <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e88:	4b05      	ldr	r3, [pc, #20]	; (80a1ea0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a1e8a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a1e8c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a1e8e:	4b05      	ldr	r3, [pc, #20]	; (80a1ea4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a1e90:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1e92:	f240 1301 	movw	r3, #257	; 0x101
 80a1e96:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1e98:	2381      	movs	r3, #129	; 0x81
 80a1e9a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a1e9c:	bd10      	pop	{r4, pc}
 80a1e9e:	bf00      	nop
 80a1ea0:	2000045c 	.word	0x2000045c
 80a1ea4:	200003c4 	.word	0x200003c4

080a1ea8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a1ea8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1eaa:	4c0e      	ldr	r4, [pc, #56]	; (80a1ee4 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a1eac:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a1eae:	a801      	add	r0, sp, #4
 80a1eb0:	f7ff ffe4 	bl	80a1e7c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a1eb4:	6823      	ldr	r3, [r4, #0]
 80a1eb6:	07db      	lsls	r3, r3, #31
 80a1eb8:	d410      	bmi.n	80a1edc <_Z17_fetch_usbserial1v+0x34>
 80a1eba:	4620      	mov	r0, r4
 80a1ebc:	f7fe f8f1 	bl	80a00a2 <__cxa_guard_acquire>
 80a1ec0:	b160      	cbz	r0, 80a1edc <_Z17_fetch_usbserial1v+0x34>
 80a1ec2:	aa01      	add	r2, sp, #4
 80a1ec4:	2101      	movs	r1, #1
 80a1ec6:	4808      	ldr	r0, [pc, #32]	; (80a1ee8 <_Z17_fetch_usbserial1v+0x40>)
 80a1ec8:	f7ff ff84 	bl	80a1dd4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	f7fe f8ed 	bl	80a00ac <__cxa_guard_release>
 80a1ed2:	4a06      	ldr	r2, [pc, #24]	; (80a1eec <_Z17_fetch_usbserial1v+0x44>)
 80a1ed4:	4906      	ldr	r1, [pc, #24]	; (80a1ef0 <_Z17_fetch_usbserial1v+0x48>)
 80a1ed6:	4804      	ldr	r0, [pc, #16]	; (80a1ee8 <_Z17_fetch_usbserial1v+0x40>)
 80a1ed8:	f000 fa84 	bl	80a23e4 <__aeabi_atexit>
  return _usbserial1;
}
 80a1edc:	4802      	ldr	r0, [pc, #8]	; (80a1ee8 <_Z17_fetch_usbserial1v+0x40>)
 80a1ede:	b006      	add	sp, #24
 80a1ee0:	bd10      	pop	{r4, pc}
 80a1ee2:	bf00      	nop
 80a1ee4:	200003c0 	.word	0x200003c0
 80a1ee8:	20000448 	.word	0x20000448
 80a1eec:	20000080 	.word	0x20000080
 80a1ef0:	080a1d55 	.word	0x080a1d55

080a1ef4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a1ef4:	4770      	bx	lr

080a1ef6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1ef6:	7441      	strb	r1, [r0, #17]
 80a1ef8:	4770      	bx	lr

080a1efa <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a1efa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a1efc:	7c00      	ldrb	r0, [r0, #16]
 80a1efe:	f7fe fe59 	bl	80a0bb4 <HAL_USART_Available_Data_For_Write>
}
 80a1f02:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f06:	bd08      	pop	{r3, pc}

080a1f08 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a1f08:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a1f0a:	7c00      	ldrb	r0, [r0, #16]
 80a1f0c:	f7fe fe2a 	bl	80a0b64 <HAL_USART_Available_Data>
}
 80a1f10:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a1f14:	bd08      	pop	{r3, pc}

080a1f16 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a1f16:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a1f18:	7c00      	ldrb	r0, [r0, #16]
 80a1f1a:	f7fe fe33 	bl	80a0b84 <HAL_USART_Peek_Data>
}
 80a1f1e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f22:	bf28      	it	cs
 80a1f24:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1f28:	bd08      	pop	{r3, pc}

080a1f2a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a1f2a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a1f2c:	7c00      	ldrb	r0, [r0, #16]
 80a1f2e:	f7fe fe21 	bl	80a0b74 <HAL_USART_Read_Data>
}
 80a1f32:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a1f36:	bf28      	it	cs
 80a1f38:	f04f 30ff 	movcs.w	r0, #4294967295
 80a1f3c:	bd08      	pop	{r3, pc}

080a1f3e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a1f3e:	7c00      	ldrb	r0, [r0, #16]
 80a1f40:	f7fe be28 	b.w	80a0b94 <HAL_USART_Flush_Data>

080a1f44 <_ZN11USARTSerialD0Ev>:
 80a1f44:	b510      	push	{r4, lr}
 80a1f46:	4604      	mov	r4, r0
 80a1f48:	2114      	movs	r1, #20
 80a1f4a:	f000 fa59 	bl	80a2400 <_ZdlPvj>
 80a1f4e:	4620      	mov	r0, r4
 80a1f50:	bd10      	pop	{r4, pc}

080a1f52 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f52:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f54:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a1f56:	4604      	mov	r4, r0
 80a1f58:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a1f5a:	b925      	cbnz	r5, 80a1f66 <_ZN11USARTSerial5writeEh+0x14>
 80a1f5c:	7c00      	ldrb	r0, [r0, #16]
 80a1f5e:	f7fe fe29 	bl	80a0bb4 <HAL_USART_Available_Data_For_Write>
 80a1f62:	2800      	cmp	r0, #0
 80a1f64:	dd05      	ble.n	80a1f72 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f66:	4631      	mov	r1, r6
 80a1f68:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1f6e:	f7fe bdf1 	b.w	80a0b54 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a1f72:	4628      	mov	r0, r5
 80a1f74:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1f78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f78:	b510      	push	{r4, lr}
 80a1f7a:	4604      	mov	r4, r0
 80a1f7c:	4608      	mov	r0, r1
 80a1f7e:	4611      	mov	r1, r2
 80a1f80:	2200      	movs	r2, #0
 80a1f82:	6062      	str	r2, [r4, #4]
 80a1f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1f88:	60a2      	str	r2, [r4, #8]
 80a1f8a:	4a05      	ldr	r2, [pc, #20]	; (80a1fa0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1f8c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1f8e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1f90:	2201      	movs	r2, #1
 80a1f92:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a1f94:	461a      	mov	r2, r3
 80a1f96:	f7fe fdd5 	bl	80a0b44 <HAL_USART_Init>
}
 80a1f9a:	4620      	mov	r0, r4
 80a1f9c:	bd10      	pop	{r4, pc}
 80a1f9e:	bf00      	nop
 80a1fa0:	080a3934 	.word	0x080a3934

080a1fa4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a1fa4:	7c00      	ldrb	r0, [r0, #16]
 80a1fa6:	f7fe bdfd 	b.w	80a0ba4 <HAL_USART_Is_Enabled>
	...

080a1fac <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1fac:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1fae:	4d0c      	ldr	r5, [pc, #48]	; (80a1fe0 <_Z22__fetch_global_Serial1v+0x34>)
 80a1fb0:	6829      	ldr	r1, [r5, #0]
 80a1fb2:	f011 0401 	ands.w	r4, r1, #1
 80a1fb6:	d111      	bne.n	80a1fdc <_Z22__fetch_global_Serial1v+0x30>
 80a1fb8:	4628      	mov	r0, r5
 80a1fba:	f7fe f872 	bl	80a00a2 <__cxa_guard_acquire>
 80a1fbe:	b168      	cbz	r0, 80a1fdc <_Z22__fetch_global_Serial1v+0x30>
 80a1fc0:	4a08      	ldr	r2, [pc, #32]	; (80a1fe4 <_Z22__fetch_global_Serial1v+0x38>)
 80a1fc2:	4621      	mov	r1, r4
 80a1fc4:	4b08      	ldr	r3, [pc, #32]	; (80a1fe8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a1fc6:	4809      	ldr	r0, [pc, #36]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fc8:	f7ff ffd6 	bl	80a1f78 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1fcc:	4628      	mov	r0, r5
 80a1fce:	f7fe f86d 	bl	80a00ac <__cxa_guard_release>
 80a1fd2:	4a07      	ldr	r2, [pc, #28]	; (80a1ff0 <_Z22__fetch_global_Serial1v+0x44>)
 80a1fd4:	4907      	ldr	r1, [pc, #28]	; (80a1ff4 <_Z22__fetch_global_Serial1v+0x48>)
 80a1fd6:	4805      	ldr	r0, [pc, #20]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fd8:	f000 fa04 	bl	80a23e4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1fdc:	4803      	ldr	r0, [pc, #12]	; (80a1fec <_Z22__fetch_global_Serial1v+0x40>)
 80a1fde:	bd38      	pop	{r3, r4, r5, pc}
 80a1fe0:	200005f8 	.word	0x200005f8
 80a1fe4:	200005fc 	.word	0x200005fc
 80a1fe8:	20000574 	.word	0x20000574
 80a1fec:	20000560 	.word	0x20000560
 80a1ff0:	20000080 	.word	0x20000080
 80a1ff4:	080a1ef5 	.word	0x080a1ef5

080a1ff8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a1ff8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1ffa:	6883      	ldr	r3, [r0, #8]
 80a1ffc:	4604      	mov	r4, r0
 80a1ffe:	b90b      	cbnz	r3, 80a2004 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2000:	f000 fa11 	bl	80a2426 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2004:	68c3      	ldr	r3, [r0, #12]
 80a2006:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2008:	68a3      	ldr	r3, [r4, #8]
 80a200a:	b11b      	cbz	r3, 80a2014 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a200c:	2203      	movs	r2, #3
 80a200e:	4621      	mov	r1, r4
 80a2010:	4620      	mov	r0, r4
 80a2012:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2014:	4620      	mov	r0, r4
}
 80a2016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a201a:	2110      	movs	r1, #16
 80a201c:	f000 b9f0 	b.w	80a2400 <_ZdlPvj>

080a2020 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
 80a2020:	4770      	bx	lr

080a2022 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2024:	4606      	mov	r6, r0
 80a2026:	4615      	mov	r5, r2
 80a2028:	460c      	mov	r4, r1
 80a202a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a202c:	42bc      	cmp	r4, r7
 80a202e:	d006      	beq.n	80a203e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2030:	6833      	ldr	r3, [r6, #0]
 80a2032:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2036:	689b      	ldr	r3, [r3, #8]
 80a2038:	4630      	mov	r0, r6
 80a203a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a203c:	e7f6      	b.n	80a202c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a203e:	4628      	mov	r0, r5
 80a2040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2042 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2042:	2200      	movs	r2, #0
 80a2044:	7c00      	ldrb	r0, [r0, #16]
 80a2046:	f7fe bde5 	b.w	80a0c14 <HAL_I2C_Write_Data>

080a204a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a204a:	2100      	movs	r1, #0
 80a204c:	7c00      	ldrb	r0, [r0, #16]
 80a204e:	f7fe bde9 	b.w	80a0c24 <HAL_I2C_Available_Data>

080a2052 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2052:	2100      	movs	r1, #0
 80a2054:	7c00      	ldrb	r0, [r0, #16]
 80a2056:	f7fe bded 	b.w	80a0c34 <HAL_I2C_Read_Data>

080a205a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a205a:	2100      	movs	r1, #0
 80a205c:	7c00      	ldrb	r0, [r0, #16]
 80a205e:	f7fe bdf1 	b.w	80a0c44 <HAL_I2C_Peek_Data>

080a2062 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2062:	2100      	movs	r1, #0
 80a2064:	7c00      	ldrb	r0, [r0, #16]
 80a2066:	f7fe bdf5 	b.w	80a0c54 <HAL_I2C_Flush_Data>

080a206a <_ZN7TwoWireD0Ev>:
 80a206a:	b510      	push	{r4, lr}
 80a206c:	4604      	mov	r4, r0
 80a206e:	2114      	movs	r1, #20
 80a2070:	f000 f9c6 	bl	80a2400 <_ZdlPvj>
 80a2074:	4620      	mov	r0, r4
 80a2076:	bd10      	pop	{r4, pc}

080a2078 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a2078:	b510      	push	{r4, lr}
 80a207a:	4604      	mov	r4, r0
 80a207c:	2300      	movs	r3, #0
 80a207e:	6063      	str	r3, [r4, #4]
 80a2080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2084:	60a3      	str	r3, [r4, #8]
 80a2086:	4b04      	ldr	r3, [pc, #16]	; (80a2098 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
 80a2088:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
 80a208a:	4608      	mov	r0, r1
 80a208c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
 80a208e:	4611      	mov	r1, r2
 80a2090:	f7fe fdf0 	bl	80a0c74 <HAL_I2C_Init>
}
 80a2094:	4620      	mov	r0, r4
 80a2096:	bd10      	pop	{r4, pc}
 80a2098:	080a3964 	.word	0x080a3964

080a209c <_ZN7TwoWire8setSpeedEm>:
// Public Methods //////////////////////////////////////////////////////////////

//setSpeed() should be called before begin() else default to 100KHz
void TwoWire::setSpeed(uint32_t clockSpeed)
{
  HAL_I2C_Set_Speed(_i2c, clockSpeed, NULL);
 80a209c:	2200      	movs	r2, #0
 80a209e:	7c00      	ldrb	r0, [r0, #16]
 80a20a0:	f7fe bd90 	b.w	80a0bc4 <HAL_I2C_Set_Speed>

080a20a4 <_ZN7TwoWire12stretchClockEb>:
  HAL_I2C_Enable_DMA_Mode(_i2c, enableDMAMode, NULL);
}

void TwoWire::stretchClock(bool stretch)
{
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
 80a20a4:	2200      	movs	r2, #0
 80a20a6:	7c00      	ldrb	r0, [r0, #16]
 80a20a8:	f7fe bd94 	b.w	80a0bd4 <HAL_I2C_Stretch_Clock>

080a20ac <_ZN7TwoWire5beginEv>:
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a20ac:	2300      	movs	r3, #0
 80a20ae:	461a      	mov	r2, r3
 80a20b0:	4619      	mov	r1, r3
 80a20b2:	7c00      	ldrb	r0, [r0, #16]
 80a20b4:	f7fe bd96 	b.w	80a0be4 <HAL_I2C_Begin>

080a20b8 <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a20b8:	2200      	movs	r2, #0
 80a20ba:	7c00      	ldrb	r0, [r0, #16]
 80a20bc:	f7fe bd9a 	b.w	80a0bf4 <HAL_I2C_Begin_Transmission>

080a20c0 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a20c0:	2200      	movs	r2, #0
 80a20c2:	7c00      	ldrb	r0, [r0, #16]
 80a20c4:	f7fe bd9e 	b.w	80a0c04 <HAL_I2C_End_Transmission>

080a20c8 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a20c8:	2101      	movs	r1, #1
 80a20ca:	f7ff bff9 	b.w	80a20c0 <_ZN7TwoWire15endTransmissionEh>

080a20ce <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a20ce:	2100      	movs	r1, #0
 80a20d0:	7c00      	ldrb	r0, [r0, #16]
 80a20d2:	f7fe bdc7 	b.w	80a0c64 <HAL_I2C_Is_Enabled>

080a20d6 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a20d6:	2200      	movs	r2, #0
 80a20d8:	4611      	mov	r1, r2
 80a20da:	6840      	ldr	r0, [r0, #4]
 80a20dc:	f7fe be60 	b.w	80a0da0 <network_ready>

080a20e0 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a20e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20e2:	4616      	mov	r6, r2
 80a20e4:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a20e6:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a20e8:	460f      	mov	r7, r1
 80a20ea:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a20ec:	2100      	movs	r1, #0
 80a20ee:	a803      	add	r0, sp, #12
 80a20f0:	f001 fa83 	bl	80a35fa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a20f4:	4630      	mov	r0, r6
 80a20f6:	f001 fade 	bl	80a36b6 <strlen>
 80a20fa:	2500      	movs	r5, #0
 80a20fc:	9500      	str	r5, [sp, #0]
 80a20fe:	b281      	uxth	r1, r0
 80a2100:	687b      	ldr	r3, [r7, #4]
 80a2102:	aa03      	add	r2, sp, #12
 80a2104:	4630      	mov	r0, r6
 80a2106:	f7fe fdf7 	bl	80a0cf8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a210a:	b120      	cbz	r0, 80a2116 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a210c:	4629      	mov	r1, r5
 80a210e:	4620      	mov	r0, r4
 80a2110:	f7ff fdfc 	bl	80a1d0c <_ZN9IPAddressC1Em>
 80a2114:	e003      	b.n	80a211e <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2116:	a903      	add	r1, sp, #12
 80a2118:	4620      	mov	r0, r4
 80a211a:	f7ff fde5 	bl	80a1ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a211e:	4620      	mov	r0, r4
 80a2120:	b009      	add	sp, #36	; 0x24
 80a2122:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2124 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2124:	2200      	movs	r2, #0
 80a2126:	4611      	mov	r1, r2
 80a2128:	6840      	ldr	r0, [r0, #4]
 80a212a:	f7fe be59 	b.w	80a0de0 <network_listening>

080a212e <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a212e:	2200      	movs	r2, #0
 80a2130:	4611      	mov	r1, r2
 80a2132:	6840      	ldr	r0, [r0, #4]
 80a2134:	f7fe be64 	b.w	80a0e00 <network_get_listen_timeout>

080a2138 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2138:	2200      	movs	r2, #0
 80a213a:	6840      	ldr	r0, [r0, #4]
 80a213c:	f7fe be58 	b.w	80a0df0 <network_set_listen_timeout>

080a2140 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a2140:	2200      	movs	r2, #0
 80a2142:	f081 0101 	eor.w	r1, r1, #1
 80a2146:	6840      	ldr	r0, [r0, #4]
 80a2148:	f7fe be42 	b.w	80a0dd0 <network_listen>

080a214c <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a214c:	2300      	movs	r3, #0
 80a214e:	461a      	mov	r2, r3
 80a2150:	4619      	mov	r1, r3
 80a2152:	6840      	ldr	r0, [r0, #4]
 80a2154:	f7fe be34 	b.w	80a0dc0 <network_off>

080a2158 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a2158:	2200      	movs	r2, #0
 80a215a:	4611      	mov	r1, r2
 80a215c:	6840      	ldr	r0, [r0, #4]
 80a215e:	f7fe be0f 	b.w	80a0d80 <network_connecting>

080a2162 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a2162:	2200      	movs	r2, #0
 80a2164:	2102      	movs	r1, #2
 80a2166:	6840      	ldr	r0, [r0, #4]
 80a2168:	f7fe be12 	b.w	80a0d90 <network_disconnect>

080a216c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a216c:	2300      	movs	r3, #0
 80a216e:	461a      	mov	r2, r3
 80a2170:	6840      	ldr	r0, [r0, #4]
 80a2172:	f7fe bdfd 	b.w	80a0d70 <network_connect>
	...

080a2178 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a2178:	4b02      	ldr	r3, [pc, #8]	; (80a2184 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a217a:	2204      	movs	r2, #4
 80a217c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a217e:	4a02      	ldr	r2, [pc, #8]	; (80a2188 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2180:	601a      	str	r2, [r3, #0]
 80a2182:	4770      	bx	lr
 80a2184:	20000680 	.word	0x20000680
 80a2188:	080a398c 	.word	0x080a398c

080a218c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a218c:	2300      	movs	r3, #0
 80a218e:	461a      	mov	r2, r3
 80a2190:	6840      	ldr	r0, [r0, #4]
 80a2192:	f7fe bded 	b.w	80a0d70 <network_connect>

080a2196 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a2196:	2200      	movs	r2, #0
 80a2198:	2102      	movs	r1, #2
 80a219a:	6840      	ldr	r0, [r0, #4]
 80a219c:	f7fe bdf8 	b.w	80a0d90 <network_disconnect>

080a21a0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a21a0:	2200      	movs	r2, #0
 80a21a2:	4611      	mov	r1, r2
 80a21a4:	6840      	ldr	r0, [r0, #4]
 80a21a6:	f7fe bdeb 	b.w	80a0d80 <network_connecting>

080a21aa <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a21aa:	2200      	movs	r2, #0
 80a21ac:	4611      	mov	r1, r2
 80a21ae:	6840      	ldr	r0, [r0, #4]
 80a21b0:	f7fe bdf6 	b.w	80a0da0 <network_ready>

080a21b4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a21b4:	2300      	movs	r3, #0
 80a21b6:	461a      	mov	r2, r3
 80a21b8:	4619      	mov	r1, r3
 80a21ba:	6840      	ldr	r0, [r0, #4]
 80a21bc:	f7fe bdf8 	b.w	80a0db0 <network_on>

080a21c0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a21c0:	2300      	movs	r3, #0
 80a21c2:	461a      	mov	r2, r3
 80a21c4:	4619      	mov	r1, r3
 80a21c6:	6840      	ldr	r0, [r0, #4]
 80a21c8:	f7fe bdfa 	b.w	80a0dc0 <network_off>

080a21cc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a21cc:	2200      	movs	r2, #0
 80a21ce:	f081 0101 	eor.w	r1, r1, #1
 80a21d2:	6840      	ldr	r0, [r0, #4]
 80a21d4:	f7fe bdfc 	b.w	80a0dd0 <network_listen>

080a21d8 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a21d8:	2200      	movs	r2, #0
 80a21da:	6840      	ldr	r0, [r0, #4]
 80a21dc:	f7fe be08 	b.w	80a0df0 <network_set_listen_timeout>

080a21e0 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a21e0:	2200      	movs	r2, #0
 80a21e2:	4611      	mov	r1, r2
 80a21e4:	6840      	ldr	r0, [r0, #4]
 80a21e6:	f7fe be0b 	b.w	80a0e00 <network_get_listen_timeout>

080a21ea <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a21ea:	2200      	movs	r2, #0
 80a21ec:	4611      	mov	r1, r2
 80a21ee:	6840      	ldr	r0, [r0, #4]
 80a21f0:	f7fe bdf6 	b.w	80a0de0 <network_listening>

080a21f4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a21f4:	b570      	push	{r4, r5, r6, lr}
 80a21f6:	4616      	mov	r6, r2
 80a21f8:	b08e      	sub	sp, #56	; 0x38
 80a21fa:	4604      	mov	r4, r0
    IPAddress addr;
 80a21fc:	a808      	add	r0, sp, #32
 80a21fe:	f7ff fd65 	bl	80a1ccc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2202:	2211      	movs	r2, #17
 80a2204:	2100      	movs	r1, #0
 80a2206:	a803      	add	r0, sp, #12
 80a2208:	f001 f9f7 	bl	80a35fa <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a220c:	4630      	mov	r0, r6
 80a220e:	f001 fa52 	bl	80a36b6 <strlen>
 80a2212:	2500      	movs	r5, #0
 80a2214:	4b0a      	ldr	r3, [pc, #40]	; (80a2240 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2216:	9500      	str	r5, [sp, #0]
 80a2218:	b281      	uxth	r1, r0
 80a221a:	685b      	ldr	r3, [r3, #4]
 80a221c:	aa03      	add	r2, sp, #12
 80a221e:	4630      	mov	r0, r6
 80a2220:	f7fe fd6a 	bl	80a0cf8 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2224:	b120      	cbz	r0, 80a2230 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2226:	4629      	mov	r1, r5
 80a2228:	4620      	mov	r0, r4
 80a222a:	f7ff fd6f 	bl	80a1d0c <_ZN9IPAddressC1Em>
 80a222e:	e003      	b.n	80a2238 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2230:	a903      	add	r1, sp, #12
 80a2232:	4620      	mov	r0, r4
 80a2234:	f7ff fd58 	bl	80a1ce8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2238:	4620      	mov	r0, r4
 80a223a:	b00e      	add	sp, #56	; 0x38
 80a223c:	bd70      	pop	{r4, r5, r6, pc}
 80a223e:	bf00      	nop
 80a2240:	20000680 	.word	0x20000680

080a2244 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2244:	4b02      	ldr	r3, [pc, #8]	; (80a2250 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2246:	4a03      	ldr	r2, [pc, #12]	; (80a2254 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2248:	601a      	str	r2, [r3, #0]
 80a224a:	2200      	movs	r2, #0
 80a224c:	605a      	str	r2, [r3, #4]
 80a224e:	4770      	bx	lr
 80a2250:	20000688 	.word	0x20000688
 80a2254:	080a39c0 	.word	0x080a39c0

080a2258 <_ZN8SPIClassD1Ev>:
  RecursiveMutex _mutex;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  ~SPIClass() = default;
 80a2258:	b510      	push	{r4, lr}
 80a225a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
 80a225c:	6880      	ldr	r0, [r0, #8]
 80a225e:	b108      	cbz	r0, 80a2264 <_ZN8SPIClassD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
 80a2260:	f7fe fc68 	bl	80a0b34 <os_mutex_recursive_destroy>
 80a2264:	4620      	mov	r0, r4
 80a2266:	bd10      	pop	{r4, pc}

080a2268 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2268:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 80a226a:	4e1a      	ldr	r6, [pc, #104]	; (80a22d4 <pinAvailable+0x6c>)
 80a226c:	4604      	mov	r4, r0
 80a226e:	6831      	ldr	r1, [r6, #0]
 80a2270:	f011 0501 	ands.w	r5, r1, #1
 80a2274:	d10f      	bne.n	80a2296 <pinAvailable+0x2e>
 80a2276:	4630      	mov	r0, r6
 80a2278:	f7fd ff13 	bl	80a00a2 <__cxa_guard_acquire>
 80a227c:	b158      	cbz	r0, 80a2296 <pinAvailable+0x2e>
 80a227e:	4629      	mov	r1, r5
 80a2280:	4815      	ldr	r0, [pc, #84]	; (80a22d8 <pinAvailable+0x70>)
 80a2282:	f7fe fe25 	bl	80a0ed0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2286:	4630      	mov	r0, r6
 80a2288:	f7fd ff10 	bl	80a00ac <__cxa_guard_release>
 80a228c:	4a13      	ldr	r2, [pc, #76]	; (80a22dc <pinAvailable+0x74>)
 80a228e:	4914      	ldr	r1, [pc, #80]	; (80a22e0 <pinAvailable+0x78>)
 80a2290:	4811      	ldr	r0, [pc, #68]	; (80a22d8 <pinAvailable+0x70>)
 80a2292:	f000 f8a7 	bl	80a23e4 <__aeabi_atexit>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
 80a2296:	4810      	ldr	r0, [pc, #64]	; (80a22d8 <pinAvailable+0x70>)
 80a2298:	f7fe fe29 	bl	80a0eee <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a229c:	b128      	cbz	r0, 80a22aa <pinAvailable+0x42>
 80a229e:	f1a4 030d 	sub.w	r3, r4, #13
 80a22a2:	2b02      	cmp	r3, #2
 80a22a4:	d801      	bhi.n	80a22aa <pinAvailable+0x42>
  {
    return 0; // 'pin' is used
 80a22a6:	2000      	movs	r0, #0
 80a22a8:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a22aa:	f000 f875 	bl	80a2398 <_Z19__fetch_global_Wirev>
 80a22ae:	f7ff ff0e 	bl	80a20ce <_ZN7TwoWire9isEnabledEv>
 80a22b2:	b108      	cbz	r0, 80a22b8 <pinAvailable+0x50>
 80a22b4:	2c01      	cmp	r4, #1
 80a22b6:	d9f6      	bls.n	80a22a6 <pinAvailable+0x3e>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a22b8:	f7ff fe78 	bl	80a1fac <_Z22__fetch_global_Serial1v>
 80a22bc:	f7ff fe72 	bl	80a1fa4 <_ZN11USARTSerial9isEnabledEv>
 80a22c0:	b118      	cbz	r0, 80a22ca <pinAvailable+0x62>
 80a22c2:	f1a4 0312 	sub.w	r3, r4, #18
 80a22c6:	2b01      	cmp	r3, #1
 80a22c8:	d9ed      	bls.n	80a22a6 <pinAvailable+0x3e>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a22ca:	2c17      	cmp	r4, #23
 80a22cc:	bf8c      	ite	hi
 80a22ce:	2000      	movhi	r0, #0
 80a22d0:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a22d2:	bd70      	pop	{r4, r5, r6, pc}
 80a22d4:	20000690 	.word	0x20000690
 80a22d8:	20000694 	.word	0x20000694
 80a22dc:	20000080 	.word	0x20000080
 80a22e0:	080a2259 	.word	0x080a2259

080a22e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22e4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a22e6:	b538      	push	{r3, r4, r5, lr}
 80a22e8:	4604      	mov	r4, r0
 80a22ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a22ec:	d80a      	bhi.n	80a2304 <pinMode+0x20>
 80a22ee:	29ff      	cmp	r1, #255	; 0xff
 80a22f0:	d008      	beq.n	80a2304 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a22f2:	f7ff ffb9 	bl	80a2268 <pinAvailable>
 80a22f6:	b128      	cbz	r0, 80a2304 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a22f8:	4629      	mov	r1, r5
 80a22fa:	4620      	mov	r0, r4
}
 80a22fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2300:	f7fe bbd8 	b.w	80a0ab4 <HAL_Pin_Mode>
 80a2304:	bd38      	pop	{r3, r4, r5, pc}

080a2306 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a2306:	b510      	push	{r4, lr}
 80a2308:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a230a:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a230c:	bf9c      	itt	ls
 80a230e:	340a      	addls	r4, #10
 80a2310:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2312:	4620      	mov	r0, r4
 80a2314:	f7ff ffa8 	bl	80a2268 <pinAvailable>
 80a2318:	b150      	cbz	r0, 80a2330 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a231a:	2103      	movs	r1, #3
 80a231c:	4620      	mov	r0, r4
 80a231e:	f7fe fbc1 	bl	80a0aa4 <HAL_Validate_Pin_Function>
 80a2322:	2803      	cmp	r0, #3
 80a2324:	d104      	bne.n	80a2330 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a2326:	4620      	mov	r0, r4
}
 80a2328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a232c:	f7fe bbca 	b.w	80a0ac4 <HAL_ADC_Read>
}
 80a2330:	2000      	movs	r0, #0
 80a2332:	bd10      	pop	{r4, pc}

080a2334 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2334:	b513      	push	{r0, r1, r4, lr}
 80a2336:	4c08      	ldr	r4, [pc, #32]	; (80a2358 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2338:	2300      	movs	r3, #0
 80a233a:	461a      	mov	r2, r3
 80a233c:	4619      	mov	r1, r3
 80a233e:	9300      	str	r3, [sp, #0]
 80a2340:	4620      	mov	r0, r4
 80a2342:	f7ff fcf9 	bl	80a1d38 <_ZN9IPAddressC1Ehhhh>
 80a2346:	4620      	mov	r0, r4
 80a2348:	4a04      	ldr	r2, [pc, #16]	; (80a235c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a234a:	4905      	ldr	r1, [pc, #20]	; (80a2360 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a234c:	b002      	add	sp, #8
 80a234e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2352:	f000 b847 	b.w	80a23e4 <__aeabi_atexit>
 80a2356:	bf00      	nop
 80a2358:	200006a4 	.word	0x200006a4
 80a235c:	20000080 	.word	0x20000080
 80a2360:	080a1c89 	.word	0x080a1c89

080a2364 <_Z17acquireWireBufferv>:
}

} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
 80a2364:	b570      	push	{r4, r5, r6, lr}
 80a2366:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2368:	2514      	movs	r5, #20
 80a236a:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a236c:	4e09      	ldr	r6, [pc, #36]	; (80a2394 <_Z17acquireWireBufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a236e:	2100      	movs	r1, #0
 80a2370:	f001 f943 	bl	80a35fa <memset>
 80a2374:	8025      	strh	r5, [r4, #0]
 80a2376:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2378:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a237a:	60a5      	str	r5, [r4, #8]
 80a237c:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a237e:	4628      	mov	r0, r5
 80a2380:	f000 f840 	bl	80a2404 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2384:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a2386:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
 80a2388:	4628      	mov	r0, r5
 80a238a:	f000 f83b 	bl	80a2404 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
 80a238e:	60e0      	str	r0, [r4, #12]
} // anonymous

HAL_I2C_Config __attribute__((weak)) acquireWireBuffer()
{
	return defaultWireConfig();
}
 80a2390:	4620      	mov	r0, r4
 80a2392:	bd70      	pop	{r4, r5, r6, pc}
 80a2394:	080a39ec 	.word	0x080a39ec

080a2398 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a2398:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a239a:	4d0e      	ldr	r5, [pc, #56]	; (80a23d4 <_Z19__fetch_global_Wirev+0x3c>)
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
 80a239c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 80a239e:	6829      	ldr	r1, [r5, #0]
 80a23a0:	f011 0401 	ands.w	r4, r1, #1
 80a23a4:	d113      	bne.n	80a23ce <_Z19__fetch_global_Wirev+0x36>
 80a23a6:	4628      	mov	r0, r5
 80a23a8:	f7fd fe7b 	bl	80a00a2 <__cxa_guard_acquire>
 80a23ac:	b178      	cbz	r0, 80a23ce <_Z19__fetch_global_Wirev+0x36>
 80a23ae:	a801      	add	r0, sp, #4
 80a23b0:	f7ff ffd8 	bl	80a2364 <_Z17acquireWireBufferv>
 80a23b4:	aa01      	add	r2, sp, #4
 80a23b6:	4621      	mov	r1, r4
 80a23b8:	4807      	ldr	r0, [pc, #28]	; (80a23d8 <_Z19__fetch_global_Wirev+0x40>)
 80a23ba:	f7ff fe5d 	bl	80a2078 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
 80a23be:	4628      	mov	r0, r5
 80a23c0:	f7fd fe74 	bl	80a00ac <__cxa_guard_release>
 80a23c4:	4a05      	ldr	r2, [pc, #20]	; (80a23dc <_Z19__fetch_global_Wirev+0x44>)
 80a23c6:	4906      	ldr	r1, [pc, #24]	; (80a23e0 <_Z19__fetch_global_Wirev+0x48>)
 80a23c8:	4803      	ldr	r0, [pc, #12]	; (80a23d8 <_Z19__fetch_global_Wirev+0x40>)
 80a23ca:	f000 f80b 	bl	80a23e4 <__aeabi_atexit>
	return wire;
}
 80a23ce:	4802      	ldr	r0, [pc, #8]	; (80a23d8 <_Z19__fetch_global_Wirev+0x40>)
 80a23d0:	b007      	add	sp, #28
 80a23d2:	bd30      	pop	{r4, r5, pc}
 80a23d4:	200006bc 	.word	0x200006bc
 80a23d8:	200006c0 	.word	0x200006c0
 80a23dc:	20000080 	.word	0x20000080
 80a23e0:	080a2021 	.word	0x080a2021

080a23e4 <__aeabi_atexit>:
 80a23e4:	460b      	mov	r3, r1
 80a23e6:	4601      	mov	r1, r0
 80a23e8:	4618      	mov	r0, r3
 80a23ea:	f001 b8ed 	b.w	80a35c8 <__cxa_atexit>
	...

080a23f0 <_ZSt15get_new_handlerv>:
 80a23f0:	4b02      	ldr	r3, [pc, #8]	; (80a23fc <_ZSt15get_new_handlerv+0xc>)
 80a23f2:	6818      	ldr	r0, [r3, #0]
 80a23f4:	f3bf 8f5f 	dmb	sy
 80a23f8:	4770      	bx	lr
 80a23fa:	bf00      	nop
 80a23fc:	200006d4 	.word	0x200006d4

080a2400 <_ZdlPvj>:
 80a2400:	f7fd be4d 	b.w	80a009e <_ZdlPv>

080a2404 <_ZnajRKSt9nothrow_t>:
 80a2404:	f000 b800 	b.w	80a2408 <_ZnwjRKSt9nothrow_t>

080a2408 <_ZnwjRKSt9nothrow_t>:
 80a2408:	b510      	push	{r4, lr}
 80a240a:	2800      	cmp	r0, #0
 80a240c:	bf14      	ite	ne
 80a240e:	4604      	movne	r4, r0
 80a2410:	2401      	moveq	r4, #1
 80a2412:	4620      	mov	r0, r4
 80a2414:	f7fe fd2c 	bl	80a0e70 <malloc>
 80a2418:	b920      	cbnz	r0, 80a2424 <_ZnwjRKSt9nothrow_t+0x1c>
 80a241a:	f7ff ffe9 	bl	80a23f0 <_ZSt15get_new_handlerv>
 80a241e:	b108      	cbz	r0, 80a2424 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2420:	4780      	blx	r0
 80a2422:	e7f6      	b.n	80a2412 <_ZnwjRKSt9nothrow_t+0xa>
 80a2424:	bd10      	pop	{r4, pc}

080a2426 <_ZSt25__throw_bad_function_callv>:
 80a2426:	b508      	push	{r3, lr}
 80a2428:	f7fe fd3a 	bl	80a0ea0 <abort>

080a242c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a242c:	4b18      	ldr	r3, [pc, #96]	; (80a2490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a242e:	681a      	ldr	r2, [r3, #0]
 80a2430:	07d1      	lsls	r1, r2, #31
 80a2432:	bf5c      	itt	pl
 80a2434:	2201      	movpl	r2, #1
 80a2436:	601a      	strpl	r2, [r3, #0]
 80a2438:	4b16      	ldr	r3, [pc, #88]	; (80a2494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a243a:	681a      	ldr	r2, [r3, #0]
 80a243c:	07d2      	lsls	r2, r2, #31
 80a243e:	bf5c      	itt	pl
 80a2440:	2201      	movpl	r2, #1
 80a2442:	601a      	strpl	r2, [r3, #0]
 80a2444:	4b14      	ldr	r3, [pc, #80]	; (80a2498 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2446:	681a      	ldr	r2, [r3, #0]
 80a2448:	07d0      	lsls	r0, r2, #31
 80a244a:	bf5c      	itt	pl
 80a244c:	2201      	movpl	r2, #1
 80a244e:	601a      	strpl	r2, [r3, #0]
 80a2450:	4b12      	ldr	r3, [pc, #72]	; (80a249c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2452:	681a      	ldr	r2, [r3, #0]
 80a2454:	07d1      	lsls	r1, r2, #31
 80a2456:	bf5c      	itt	pl
 80a2458:	2201      	movpl	r2, #1
 80a245a:	601a      	strpl	r2, [r3, #0]
 80a245c:	4b10      	ldr	r3, [pc, #64]	; (80a24a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a245e:	681a      	ldr	r2, [r3, #0]
 80a2460:	07d2      	lsls	r2, r2, #31
 80a2462:	bf5c      	itt	pl
 80a2464:	2201      	movpl	r2, #1
 80a2466:	601a      	strpl	r2, [r3, #0]
 80a2468:	4b0e      	ldr	r3, [pc, #56]	; (80a24a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a246a:	681a      	ldr	r2, [r3, #0]
 80a246c:	07d0      	lsls	r0, r2, #31
 80a246e:	bf5c      	itt	pl
 80a2470:	2201      	movpl	r2, #1
 80a2472:	601a      	strpl	r2, [r3, #0]
 80a2474:	4b0c      	ldr	r3, [pc, #48]	; (80a24a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2476:	681a      	ldr	r2, [r3, #0]
 80a2478:	07d1      	lsls	r1, r2, #31
 80a247a:	bf5c      	itt	pl
 80a247c:	2201      	movpl	r2, #1
 80a247e:	601a      	strpl	r2, [r3, #0]
 80a2480:	4b0a      	ldr	r3, [pc, #40]	; (80a24ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2482:	681a      	ldr	r2, [r3, #0]
 80a2484:	07d2      	lsls	r2, r2, #31
 80a2486:	bf5c      	itt	pl
 80a2488:	2201      	movpl	r2, #1
 80a248a:	601a      	strpl	r2, [r3, #0]
 80a248c:	4770      	bx	lr
 80a248e:	bf00      	nop
 80a2490:	200006f4 	.word	0x200006f4
 80a2494:	200006f0 	.word	0x200006f0
 80a2498:	200006ec 	.word	0x200006ec
 80a249c:	200006e8 	.word	0x200006e8
 80a24a0:	200006e4 	.word	0x200006e4
 80a24a4:	200006e0 	.word	0x200006e0
 80a24a8:	200006dc 	.word	0x200006dc
 80a24ac:	200006d8 	.word	0x200006d8

080a24b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a24b0:	4b24      	ldr	r3, [pc, #144]	; (80a2544 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a24b2:	681a      	ldr	r2, [r3, #0]
 80a24b4:	07d0      	lsls	r0, r2, #31
 80a24b6:	bf5c      	itt	pl
 80a24b8:	2201      	movpl	r2, #1
 80a24ba:	601a      	strpl	r2, [r3, #0]
 80a24bc:	4b22      	ldr	r3, [pc, #136]	; (80a2548 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a24be:	681a      	ldr	r2, [r3, #0]
 80a24c0:	07d1      	lsls	r1, r2, #31
 80a24c2:	bf5c      	itt	pl
 80a24c4:	2201      	movpl	r2, #1
 80a24c6:	601a      	strpl	r2, [r3, #0]
 80a24c8:	4b20      	ldr	r3, [pc, #128]	; (80a254c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a24ca:	681a      	ldr	r2, [r3, #0]
 80a24cc:	07d2      	lsls	r2, r2, #31
 80a24ce:	bf5c      	itt	pl
 80a24d0:	2201      	movpl	r2, #1
 80a24d2:	601a      	strpl	r2, [r3, #0]
 80a24d4:	4b1e      	ldr	r3, [pc, #120]	; (80a2550 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a24d6:	681a      	ldr	r2, [r3, #0]
 80a24d8:	07d0      	lsls	r0, r2, #31
 80a24da:	bf5c      	itt	pl
 80a24dc:	2201      	movpl	r2, #1
 80a24de:	601a      	strpl	r2, [r3, #0]
 80a24e0:	4b1c      	ldr	r3, [pc, #112]	; (80a2554 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a24e2:	681a      	ldr	r2, [r3, #0]
 80a24e4:	07d1      	lsls	r1, r2, #31
 80a24e6:	bf5c      	itt	pl
 80a24e8:	2201      	movpl	r2, #1
 80a24ea:	601a      	strpl	r2, [r3, #0]
 80a24ec:	4b1a      	ldr	r3, [pc, #104]	; (80a2558 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a24ee:	681a      	ldr	r2, [r3, #0]
 80a24f0:	07d2      	lsls	r2, r2, #31
 80a24f2:	bf5c      	itt	pl
 80a24f4:	2201      	movpl	r2, #1
 80a24f6:	601a      	strpl	r2, [r3, #0]
 80a24f8:	4b18      	ldr	r3, [pc, #96]	; (80a255c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a24fa:	681a      	ldr	r2, [r3, #0]
 80a24fc:	07d0      	lsls	r0, r2, #31
 80a24fe:	bf5c      	itt	pl
 80a2500:	2201      	movpl	r2, #1
 80a2502:	601a      	strpl	r2, [r3, #0]
 80a2504:	4b16      	ldr	r3, [pc, #88]	; (80a2560 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2506:	681a      	ldr	r2, [r3, #0]
 80a2508:	07d1      	lsls	r1, r2, #31
 80a250a:	bf5c      	itt	pl
 80a250c:	2201      	movpl	r2, #1
 80a250e:	601a      	strpl	r2, [r3, #0]
 80a2510:	4b14      	ldr	r3, [pc, #80]	; (80a2564 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2512:	681a      	ldr	r2, [r3, #0]
 80a2514:	07d2      	lsls	r2, r2, #31
 80a2516:	bf5c      	itt	pl
 80a2518:	2201      	movpl	r2, #1
 80a251a:	601a      	strpl	r2, [r3, #0]
 80a251c:	4b12      	ldr	r3, [pc, #72]	; (80a2568 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a251e:	681a      	ldr	r2, [r3, #0]
 80a2520:	07d0      	lsls	r0, r2, #31
 80a2522:	bf5c      	itt	pl
 80a2524:	2201      	movpl	r2, #1
 80a2526:	601a      	strpl	r2, [r3, #0]
 80a2528:	4b10      	ldr	r3, [pc, #64]	; (80a256c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a252a:	681a      	ldr	r2, [r3, #0]
 80a252c:	07d1      	lsls	r1, r2, #31
 80a252e:	bf5c      	itt	pl
 80a2530:	2201      	movpl	r2, #1
 80a2532:	601a      	strpl	r2, [r3, #0]
 80a2534:	4b0e      	ldr	r3, [pc, #56]	; (80a2570 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2536:	681a      	ldr	r2, [r3, #0]
 80a2538:	07d2      	lsls	r2, r2, #31
 80a253a:	bf5c      	itt	pl
 80a253c:	2201      	movpl	r2, #1
 80a253e:	601a      	strpl	r2, [r3, #0]
 80a2540:	4770      	bx	lr
 80a2542:	bf00      	nop
 80a2544:	20000724 	.word	0x20000724
 80a2548:	20000720 	.word	0x20000720
 80a254c:	2000071c 	.word	0x2000071c
 80a2550:	20000718 	.word	0x20000718
 80a2554:	20000714 	.word	0x20000714
 80a2558:	20000710 	.word	0x20000710
 80a255c:	2000070c 	.word	0x2000070c
 80a2560:	20000708 	.word	0x20000708
 80a2564:	20000704 	.word	0x20000704
 80a2568:	20000700 	.word	0x20000700
 80a256c:	200006fc 	.word	0x200006fc
 80a2570:	200006f8 	.word	0x200006f8

080a2574 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2574:	4b24      	ldr	r3, [pc, #144]	; (80a2608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2576:	681a      	ldr	r2, [r3, #0]
 80a2578:	07d0      	lsls	r0, r2, #31
 80a257a:	bf5c      	itt	pl
 80a257c:	2201      	movpl	r2, #1
 80a257e:	601a      	strpl	r2, [r3, #0]
 80a2580:	4b22      	ldr	r3, [pc, #136]	; (80a260c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2582:	681a      	ldr	r2, [r3, #0]
 80a2584:	07d1      	lsls	r1, r2, #31
 80a2586:	bf5c      	itt	pl
 80a2588:	2201      	movpl	r2, #1
 80a258a:	601a      	strpl	r2, [r3, #0]
 80a258c:	4b20      	ldr	r3, [pc, #128]	; (80a2610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a258e:	681a      	ldr	r2, [r3, #0]
 80a2590:	07d2      	lsls	r2, r2, #31
 80a2592:	bf5c      	itt	pl
 80a2594:	2201      	movpl	r2, #1
 80a2596:	601a      	strpl	r2, [r3, #0]
 80a2598:	4b1e      	ldr	r3, [pc, #120]	; (80a2614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a259a:	681a      	ldr	r2, [r3, #0]
 80a259c:	07d0      	lsls	r0, r2, #31
 80a259e:	bf5c      	itt	pl
 80a25a0:	2201      	movpl	r2, #1
 80a25a2:	601a      	strpl	r2, [r3, #0]
 80a25a4:	4b1c      	ldr	r3, [pc, #112]	; (80a2618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a25a6:	681a      	ldr	r2, [r3, #0]
 80a25a8:	07d1      	lsls	r1, r2, #31
 80a25aa:	bf5c      	itt	pl
 80a25ac:	2201      	movpl	r2, #1
 80a25ae:	601a      	strpl	r2, [r3, #0]
 80a25b0:	4b1a      	ldr	r3, [pc, #104]	; (80a261c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a25b2:	681a      	ldr	r2, [r3, #0]
 80a25b4:	07d2      	lsls	r2, r2, #31
 80a25b6:	bf5c      	itt	pl
 80a25b8:	2201      	movpl	r2, #1
 80a25ba:	601a      	strpl	r2, [r3, #0]
 80a25bc:	4b18      	ldr	r3, [pc, #96]	; (80a2620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a25be:	681a      	ldr	r2, [r3, #0]
 80a25c0:	07d0      	lsls	r0, r2, #31
 80a25c2:	bf5c      	itt	pl
 80a25c4:	2201      	movpl	r2, #1
 80a25c6:	601a      	strpl	r2, [r3, #0]
 80a25c8:	4b16      	ldr	r3, [pc, #88]	; (80a2624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a25ca:	681a      	ldr	r2, [r3, #0]
 80a25cc:	07d1      	lsls	r1, r2, #31
 80a25ce:	bf5c      	itt	pl
 80a25d0:	2201      	movpl	r2, #1
 80a25d2:	601a      	strpl	r2, [r3, #0]
 80a25d4:	4b14      	ldr	r3, [pc, #80]	; (80a2628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a25d6:	681a      	ldr	r2, [r3, #0]
 80a25d8:	07d2      	lsls	r2, r2, #31
 80a25da:	bf5c      	itt	pl
 80a25dc:	2201      	movpl	r2, #1
 80a25de:	601a      	strpl	r2, [r3, #0]
 80a25e0:	4b12      	ldr	r3, [pc, #72]	; (80a262c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a25e2:	681a      	ldr	r2, [r3, #0]
 80a25e4:	07d0      	lsls	r0, r2, #31
 80a25e6:	bf5c      	itt	pl
 80a25e8:	2201      	movpl	r2, #1
 80a25ea:	601a      	strpl	r2, [r3, #0]
 80a25ec:	4b10      	ldr	r3, [pc, #64]	; (80a2630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a25ee:	681a      	ldr	r2, [r3, #0]
 80a25f0:	07d1      	lsls	r1, r2, #31
 80a25f2:	bf5c      	itt	pl
 80a25f4:	2201      	movpl	r2, #1
 80a25f6:	601a      	strpl	r2, [r3, #0]
 80a25f8:	4b0e      	ldr	r3, [pc, #56]	; (80a2634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a25fa:	681a      	ldr	r2, [r3, #0]
 80a25fc:	07d2      	lsls	r2, r2, #31
 80a25fe:	bf5c      	itt	pl
 80a2600:	2201      	movpl	r2, #1
 80a2602:	601a      	strpl	r2, [r3, #0]
 80a2604:	4770      	bx	lr
 80a2606:	bf00      	nop
 80a2608:	20000754 	.word	0x20000754
 80a260c:	20000750 	.word	0x20000750
 80a2610:	2000074c 	.word	0x2000074c
 80a2614:	20000748 	.word	0x20000748
 80a2618:	20000744 	.word	0x20000744
 80a261c:	20000740 	.word	0x20000740
 80a2620:	2000073c 	.word	0x2000073c
 80a2624:	20000738 	.word	0x20000738
 80a2628:	20000734 	.word	0x20000734
 80a262c:	20000730 	.word	0x20000730
 80a2630:	2000072c 	.word	0x2000072c
 80a2634:	20000728 	.word	0x20000728

080a2638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2638:	4b18      	ldr	r3, [pc, #96]	; (80a269c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a263a:	681a      	ldr	r2, [r3, #0]
 80a263c:	07d1      	lsls	r1, r2, #31
 80a263e:	bf5c      	itt	pl
 80a2640:	2201      	movpl	r2, #1
 80a2642:	601a      	strpl	r2, [r3, #0]
 80a2644:	4b16      	ldr	r3, [pc, #88]	; (80a26a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2646:	681a      	ldr	r2, [r3, #0]
 80a2648:	07d2      	lsls	r2, r2, #31
 80a264a:	bf5c      	itt	pl
 80a264c:	2201      	movpl	r2, #1
 80a264e:	601a      	strpl	r2, [r3, #0]
 80a2650:	4b14      	ldr	r3, [pc, #80]	; (80a26a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2652:	681a      	ldr	r2, [r3, #0]
 80a2654:	07d0      	lsls	r0, r2, #31
 80a2656:	bf5c      	itt	pl
 80a2658:	2201      	movpl	r2, #1
 80a265a:	601a      	strpl	r2, [r3, #0]
 80a265c:	4b12      	ldr	r3, [pc, #72]	; (80a26a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a265e:	681a      	ldr	r2, [r3, #0]
 80a2660:	07d1      	lsls	r1, r2, #31
 80a2662:	bf5c      	itt	pl
 80a2664:	2201      	movpl	r2, #1
 80a2666:	601a      	strpl	r2, [r3, #0]
 80a2668:	4b10      	ldr	r3, [pc, #64]	; (80a26ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a266a:	681a      	ldr	r2, [r3, #0]
 80a266c:	07d2      	lsls	r2, r2, #31
 80a266e:	bf5c      	itt	pl
 80a2670:	2201      	movpl	r2, #1
 80a2672:	601a      	strpl	r2, [r3, #0]
 80a2674:	4b0e      	ldr	r3, [pc, #56]	; (80a26b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2676:	681a      	ldr	r2, [r3, #0]
 80a2678:	07d0      	lsls	r0, r2, #31
 80a267a:	bf5c      	itt	pl
 80a267c:	2201      	movpl	r2, #1
 80a267e:	601a      	strpl	r2, [r3, #0]
 80a2680:	4b0c      	ldr	r3, [pc, #48]	; (80a26b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2682:	681a      	ldr	r2, [r3, #0]
 80a2684:	07d1      	lsls	r1, r2, #31
 80a2686:	bf5c      	itt	pl
 80a2688:	2201      	movpl	r2, #1
 80a268a:	601a      	strpl	r2, [r3, #0]
 80a268c:	4b0a      	ldr	r3, [pc, #40]	; (80a26b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a268e:	681a      	ldr	r2, [r3, #0]
 80a2690:	07d2      	lsls	r2, r2, #31
 80a2692:	bf5c      	itt	pl
 80a2694:	2201      	movpl	r2, #1
 80a2696:	601a      	strpl	r2, [r3, #0]
 80a2698:	4770      	bx	lr
 80a269a:	bf00      	nop
 80a269c:	20000774 	.word	0x20000774
 80a26a0:	20000770 	.word	0x20000770
 80a26a4:	2000076c 	.word	0x2000076c
 80a26a8:	20000768 	.word	0x20000768
 80a26ac:	20000764 	.word	0x20000764
 80a26b0:	20000760 	.word	0x20000760
 80a26b4:	2000075c 	.word	0x2000075c
 80a26b8:	20000758 	.word	0x20000758

080a26bc <sqrt>:
 80a26bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26c0:	b08b      	sub	sp, #44	; 0x2c
 80a26c2:	4604      	mov	r4, r0
 80a26c4:	460d      	mov	r5, r1
 80a26c6:	f000 f855 	bl	80a2774 <__ieee754_sqrt>
 80a26ca:	4b28      	ldr	r3, [pc, #160]	; (80a276c <sqrt+0xb0>)
 80a26cc:	4606      	mov	r6, r0
 80a26ce:	f993 a000 	ldrsb.w	sl, [r3]
 80a26d2:	460f      	mov	r7, r1
 80a26d4:	f1ba 3fff 	cmp.w	sl, #4294967295
 80a26d8:	d012      	beq.n	80a2700 <sqrt+0x44>
 80a26da:	4622      	mov	r2, r4
 80a26dc:	462b      	mov	r3, r5
 80a26de:	4620      	mov	r0, r4
 80a26e0:	4629      	mov	r1, r5
 80a26e2:	f000 fd5f 	bl	80a31a4 <__aeabi_dcmpun>
 80a26e6:	4683      	mov	fp, r0
 80a26e8:	b950      	cbnz	r0, 80a2700 <sqrt+0x44>
 80a26ea:	f04f 0800 	mov.w	r8, #0
 80a26ee:	f04f 0900 	mov.w	r9, #0
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	4629      	mov	r1, r5
 80a26f6:	4642      	mov	r2, r8
 80a26f8:	464b      	mov	r3, r9
 80a26fa:	f000 fd2b 	bl	80a3154 <__aeabi_dcmplt>
 80a26fe:	b920      	cbnz	r0, 80a270a <sqrt+0x4e>
 80a2700:	4630      	mov	r0, r6
 80a2702:	4639      	mov	r1, r7
 80a2704:	b00b      	add	sp, #44	; 0x2c
 80a2706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a270a:	4a19      	ldr	r2, [pc, #100]	; (80a2770 <sqrt+0xb4>)
 80a270c:	2301      	movs	r3, #1
 80a270e:	f8cd b020 	str.w	fp, [sp, #32]
 80a2712:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a2716:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a271a:	9201      	str	r2, [sp, #4]
 80a271c:	9300      	str	r3, [sp, #0]
 80a271e:	f1ba 0f00 	cmp.w	sl, #0
 80a2722:	d015      	beq.n	80a2750 <sqrt+0x94>
 80a2724:	4642      	mov	r2, r8
 80a2726:	464b      	mov	r3, r9
 80a2728:	4640      	mov	r0, r8
 80a272a:	4649      	mov	r1, r9
 80a272c:	f000 fbca 	bl	80a2ec4 <__aeabi_ddiv>
 80a2730:	f1ba 0f02 	cmp.w	sl, #2
 80a2734:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a2738:	d10c      	bne.n	80a2754 <sqrt+0x98>
 80a273a:	f7fe fbc1 	bl	80a0ec0 <__errno>
 80a273e:	2321      	movs	r3, #33	; 0x21
 80a2740:	6003      	str	r3, [r0, #0]
 80a2742:	9b08      	ldr	r3, [sp, #32]
 80a2744:	b963      	cbnz	r3, 80a2760 <sqrt+0xa4>
 80a2746:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a274a:	b00b      	add	sp, #44	; 0x2c
 80a274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2750:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80a2754:	4668      	mov	r0, sp
 80a2756:	f000 f8d1 	bl	80a28fc <matherr>
 80a275a:	2800      	cmp	r0, #0
 80a275c:	d1f1      	bne.n	80a2742 <sqrt+0x86>
 80a275e:	e7ec      	b.n	80a273a <sqrt+0x7e>
 80a2760:	f7fe fbae 	bl	80a0ec0 <__errno>
 80a2764:	9b08      	ldr	r3, [sp, #32]
 80a2766:	6003      	str	r3, [r0, #0]
 80a2768:	e7ed      	b.n	80a2746 <sqrt+0x8a>
 80a276a:	bf00      	nop
 80a276c:	20000018 	.word	0x20000018
 80a2770:	080a39f0 	.word	0x080a39f0

080a2774 <__ieee754_sqrt>:
 80a2774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2778:	4e5f      	ldr	r6, [pc, #380]	; (80a28f8 <__ieee754_sqrt+0x184>)
 80a277a:	460c      	mov	r4, r1
 80a277c:	46b6      	mov	lr, r6
 80a277e:	400e      	ands	r6, r1
 80a2780:	4576      	cmp	r6, lr
 80a2782:	4605      	mov	r5, r0
 80a2784:	f000 8098 	beq.w	80a28b8 <__ieee754_sqrt+0x144>
 80a2788:	2900      	cmp	r1, #0
 80a278a:	460b      	mov	r3, r1
 80a278c:	4602      	mov	r2, r0
 80a278e:	dd74      	ble.n	80a287a <__ieee754_sqrt+0x106>
 80a2790:	ea5f 5e21 	movs.w	lr, r1, asr #20
 80a2794:	d07f      	beq.n	80a2896 <__ieee754_sqrt+0x122>
 80a2796:	f2ae 3eff 	subw	lr, lr, #1023	; 0x3ff
 80a279a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a279e:	f01e 0f01 	tst.w	lr, #1
 80a27a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a27a6:	d163      	bne.n	80a2870 <__ieee754_sqrt+0xfc>
 80a27a8:	2700      	movs	r7, #0
 80a27aa:	463e      	mov	r6, r7
 80a27ac:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
 80a27b0:	440b      	add	r3, r1
 80a27b2:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 80a27b6:	0052      	lsls	r2, r2, #1
 80a27b8:	2016      	movs	r0, #22
 80a27ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80a27be:	1874      	adds	r4, r6, r1
 80a27c0:	429c      	cmp	r4, r3
 80a27c2:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 80a27c6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a27ca:	dc02      	bgt.n	80a27d2 <__ieee754_sqrt+0x5e>
 80a27cc:	1b1b      	subs	r3, r3, r4
 80a27ce:	1866      	adds	r6, r4, r1
 80a27d0:	440f      	add	r7, r1
 80a27d2:	3801      	subs	r0, #1
 80a27d4:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80a27d8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a27dc:	d1ef      	bne.n	80a27be <__ieee754_sqrt+0x4a>
 80a27de:	4684      	mov	ip, r0
 80a27e0:	2420      	movs	r4, #32
 80a27e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80a27e6:	e009      	b.n	80a27fc <__ieee754_sqrt+0x88>
 80a27e8:	d020      	beq.n	80a282c <__ieee754_sqrt+0xb8>
 80a27ea:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
 80a27ee:	3c01      	subs	r4, #1
 80a27f0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80a27f4:	442b      	add	r3, r5
 80a27f6:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80a27fa:	d020      	beq.n	80a283e <__ieee754_sqrt+0xca>
 80a27fc:	429e      	cmp	r6, r3
 80a27fe:	eb01 050c 	add.w	r5, r1, ip
 80a2802:	daf1      	bge.n	80a27e8 <__ieee754_sqrt+0x74>
 80a2804:	2d00      	cmp	r5, #0
 80a2806:	eb05 0c01 	add.w	ip, r5, r1
 80a280a:	db09      	blt.n	80a2820 <__ieee754_sqrt+0xac>
 80a280c:	46b0      	mov	r8, r6
 80a280e:	4295      	cmp	r5, r2
 80a2810:	eba3 0306 	sub.w	r3, r3, r6
 80a2814:	d900      	bls.n	80a2818 <__ieee754_sqrt+0xa4>
 80a2816:	3b01      	subs	r3, #1
 80a2818:	4646      	mov	r6, r8
 80a281a:	1b52      	subs	r2, r2, r5
 80a281c:	4408      	add	r0, r1
 80a281e:	e7e4      	b.n	80a27ea <__ieee754_sqrt+0x76>
 80a2820:	f1bc 0f00 	cmp.w	ip, #0
 80a2824:	dbf2      	blt.n	80a280c <__ieee754_sqrt+0x98>
 80a2826:	f106 0801 	add.w	r8, r6, #1
 80a282a:	e7f0      	b.n	80a280e <__ieee754_sqrt+0x9a>
 80a282c:	4295      	cmp	r5, r2
 80a282e:	d817      	bhi.n	80a2860 <__ieee754_sqrt+0xec>
 80a2830:	2d00      	cmp	r5, #0
 80a2832:	eb05 0c01 	add.w	ip, r5, r1
 80a2836:	db49      	blt.n	80a28cc <__ieee754_sqrt+0x158>
 80a2838:	4698      	mov	r8, r3
 80a283a:	2300      	movs	r3, #0
 80a283c:	e7ec      	b.n	80a2818 <__ieee754_sqrt+0xa4>
 80a283e:	4313      	orrs	r3, r2
 80a2840:	d110      	bne.n	80a2864 <__ieee754_sqrt+0xf0>
 80a2842:	0840      	lsrs	r0, r0, #1
 80a2844:	107b      	asrs	r3, r7, #1
 80a2846:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80a284a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80a284e:	07fa      	lsls	r2, r7, #31
 80a2850:	eb03 570e 	add.w	r7, r3, lr, lsl #20
 80a2854:	4639      	mov	r1, r7
 80a2856:	bf48      	it	mi
 80a2858:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80a285c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2860:	4633      	mov	r3, r6
 80a2862:	e7c2      	b.n	80a27ea <__ieee754_sqrt+0x76>
 80a2864:	1c41      	adds	r1, r0, #1
 80a2866:	d035      	beq.n	80a28d4 <__ieee754_sqrt+0x160>
 80a2868:	f000 0301 	and.w	r3, r0, #1
 80a286c:	4418      	add	r0, r3
 80a286e:	e7e8      	b.n	80a2842 <__ieee754_sqrt+0xce>
 80a2870:	005b      	lsls	r3, r3, #1
 80a2872:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80a2876:	0052      	lsls	r2, r2, #1
 80a2878:	e796      	b.n	80a27a8 <__ieee754_sqrt+0x34>
 80a287a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80a287e:	4306      	orrs	r6, r0
 80a2880:	d0ec      	beq.n	80a285c <__ieee754_sqrt+0xe8>
 80a2882:	bb79      	cbnz	r1, 80a28e4 <__ieee754_sqrt+0x170>
 80a2884:	468e      	mov	lr, r1
 80a2886:	0ad3      	lsrs	r3, r2, #11
 80a2888:	f1ae 0e15 	sub.w	lr, lr, #21
 80a288c:	0552      	lsls	r2, r2, #21
 80a288e:	2b00      	cmp	r3, #0
 80a2890:	d0f9      	beq.n	80a2886 <__ieee754_sqrt+0x112>
 80a2892:	02dd      	lsls	r5, r3, #11
 80a2894:	d421      	bmi.n	80a28da <__ieee754_sqrt+0x166>
 80a2896:	2100      	movs	r1, #0
 80a2898:	e000      	b.n	80a289c <__ieee754_sqrt+0x128>
 80a289a:	4601      	mov	r1, r0
 80a289c:	005b      	lsls	r3, r3, #1
 80a289e:	02dc      	lsls	r4, r3, #11
 80a28a0:	f101 0001 	add.w	r0, r1, #1
 80a28a4:	d5f9      	bpl.n	80a289a <__ieee754_sqrt+0x126>
 80a28a6:	f1c0 0420 	rsb	r4, r0, #32
 80a28aa:	fa22 f404 	lsr.w	r4, r2, r4
 80a28ae:	4323      	orrs	r3, r4
 80a28b0:	ebc1 0e0e 	rsb	lr, r1, lr
 80a28b4:	4082      	lsls	r2, r0
 80a28b6:	e76e      	b.n	80a2796 <__ieee754_sqrt+0x22>
 80a28b8:	4602      	mov	r2, r0
 80a28ba:	460b      	mov	r3, r1
 80a28bc:	f000 f9d8 	bl	80a2c70 <__aeabi_dmul>
 80a28c0:	462a      	mov	r2, r5
 80a28c2:	4623      	mov	r3, r4
 80a28c4:	f000 f822 	bl	80a290c <__adddf3>
 80a28c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a28cc:	f1bc 0f00 	cmp.w	ip, #0
 80a28d0:	daa9      	bge.n	80a2826 <__ieee754_sqrt+0xb2>
 80a28d2:	e7b1      	b.n	80a2838 <__ieee754_sqrt+0xc4>
 80a28d4:	3701      	adds	r7, #1
 80a28d6:	4620      	mov	r0, r4
 80a28d8:	e7b4      	b.n	80a2844 <__ieee754_sqrt+0xd0>
 80a28da:	2420      	movs	r4, #32
 80a28dc:	f04f 31ff 	mov.w	r1, #4294967295
 80a28e0:	2000      	movs	r0, #0
 80a28e2:	e7e2      	b.n	80a28aa <__ieee754_sqrt+0x136>
 80a28e4:	4602      	mov	r2, r0
 80a28e6:	460b      	mov	r3, r1
 80a28e8:	f000 f80e 	bl	80a2908 <__aeabi_dsub>
 80a28ec:	4602      	mov	r2, r0
 80a28ee:	460b      	mov	r3, r1
 80a28f0:	f000 fae8 	bl	80a2ec4 <__aeabi_ddiv>
 80a28f4:	e7b2      	b.n	80a285c <__ieee754_sqrt+0xe8>
 80a28f6:	bf00      	nop
 80a28f8:	7ff00000 	.word	0x7ff00000

080a28fc <matherr>:
 80a28fc:	2000      	movs	r0, #0
 80a28fe:	4770      	bx	lr

080a2900 <__aeabi_drsub>:
 80a2900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2904:	e002      	b.n	80a290c <__adddf3>
 80a2906:	bf00      	nop

080a2908 <__aeabi_dsub>:
 80a2908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a290c <__adddf3>:
 80a290c:	b530      	push	{r4, r5, lr}
 80a290e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a2912:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2916:	ea94 0f05 	teq	r4, r5
 80a291a:	bf08      	it	eq
 80a291c:	ea90 0f02 	teqeq	r0, r2
 80a2920:	bf1f      	itttt	ne
 80a2922:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2926:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a292a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a292e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2932:	f000 80e2 	beq.w	80a2afa <__adddf3+0x1ee>
 80a2936:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a293a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a293e:	bfb8      	it	lt
 80a2940:	426d      	neglt	r5, r5
 80a2942:	dd0c      	ble.n	80a295e <__adddf3+0x52>
 80a2944:	442c      	add	r4, r5
 80a2946:	ea80 0202 	eor.w	r2, r0, r2
 80a294a:	ea81 0303 	eor.w	r3, r1, r3
 80a294e:	ea82 0000 	eor.w	r0, r2, r0
 80a2952:	ea83 0101 	eor.w	r1, r3, r1
 80a2956:	ea80 0202 	eor.w	r2, r0, r2
 80a295a:	ea81 0303 	eor.w	r3, r1, r3
 80a295e:	2d36      	cmp	r5, #54	; 0x36
 80a2960:	bf88      	it	hi
 80a2962:	bd30      	pophi	{r4, r5, pc}
 80a2964:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a296c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a2970:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2974:	d002      	beq.n	80a297c <__adddf3+0x70>
 80a2976:	4240      	negs	r0, r0
 80a2978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a297c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a2980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2984:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2988:	d002      	beq.n	80a2990 <__adddf3+0x84>
 80a298a:	4252      	negs	r2, r2
 80a298c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a2990:	ea94 0f05 	teq	r4, r5
 80a2994:	f000 80a7 	beq.w	80a2ae6 <__adddf3+0x1da>
 80a2998:	f1a4 0401 	sub.w	r4, r4, #1
 80a299c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a29a0:	db0d      	blt.n	80a29be <__adddf3+0xb2>
 80a29a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a29a6:	fa22 f205 	lsr.w	r2, r2, r5
 80a29aa:	1880      	adds	r0, r0, r2
 80a29ac:	f141 0100 	adc.w	r1, r1, #0
 80a29b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a29b4:	1880      	adds	r0, r0, r2
 80a29b6:	fa43 f305 	asr.w	r3, r3, r5
 80a29ba:	4159      	adcs	r1, r3
 80a29bc:	e00e      	b.n	80a29dc <__adddf3+0xd0>
 80a29be:	f1a5 0520 	sub.w	r5, r5, #32
 80a29c2:	f10e 0e20 	add.w	lr, lr, #32
 80a29c6:	2a01      	cmp	r2, #1
 80a29c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a29cc:	bf28      	it	cs
 80a29ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a29d2:	fa43 f305 	asr.w	r3, r3, r5
 80a29d6:	18c0      	adds	r0, r0, r3
 80a29d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a29dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a29e0:	d507      	bpl.n	80a29f2 <__adddf3+0xe6>
 80a29e2:	f04f 0e00 	mov.w	lr, #0
 80a29e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a29ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a29ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80a29f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a29f6:	d31b      	bcc.n	80a2a30 <__adddf3+0x124>
 80a29f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a29fc:	d30c      	bcc.n	80a2a18 <__adddf3+0x10c>
 80a29fe:	0849      	lsrs	r1, r1, #1
 80a2a00:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2a04:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2a08:	f104 0401 	add.w	r4, r4, #1
 80a2a0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a2a10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2a14:	f080 809a 	bcs.w	80a2b4c <__adddf3+0x240>
 80a2a18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2a1c:	bf08      	it	eq
 80a2a1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2a22:	f150 0000 	adcs.w	r0, r0, #0
 80a2a26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2a2a:	ea41 0105 	orr.w	r1, r1, r5
 80a2a2e:	bd30      	pop	{r4, r5, pc}
 80a2a30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2a34:	4140      	adcs	r0, r0
 80a2a36:	eb41 0101 	adc.w	r1, r1, r1
 80a2a3a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2a3e:	f1a4 0401 	sub.w	r4, r4, #1
 80a2a42:	d1e9      	bne.n	80a2a18 <__adddf3+0x10c>
 80a2a44:	f091 0f00 	teq	r1, #0
 80a2a48:	bf04      	itt	eq
 80a2a4a:	4601      	moveq	r1, r0
 80a2a4c:	2000      	moveq	r0, #0
 80a2a4e:	fab1 f381 	clz	r3, r1
 80a2a52:	bf08      	it	eq
 80a2a54:	3320      	addeq	r3, #32
 80a2a56:	f1a3 030b 	sub.w	r3, r3, #11
 80a2a5a:	f1b3 0220 	subs.w	r2, r3, #32
 80a2a5e:	da0c      	bge.n	80a2a7a <__adddf3+0x16e>
 80a2a60:	320c      	adds	r2, #12
 80a2a62:	dd08      	ble.n	80a2a76 <__adddf3+0x16a>
 80a2a64:	f102 0c14 	add.w	ip, r2, #20
 80a2a68:	f1c2 020c 	rsb	r2, r2, #12
 80a2a6c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a2a70:	fa21 f102 	lsr.w	r1, r1, r2
 80a2a74:	e00c      	b.n	80a2a90 <__adddf3+0x184>
 80a2a76:	f102 0214 	add.w	r2, r2, #20
 80a2a7a:	bfd8      	it	le
 80a2a7c:	f1c2 0c20 	rsble	ip, r2, #32
 80a2a80:	fa01 f102 	lsl.w	r1, r1, r2
 80a2a84:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2a88:	bfdc      	itt	le
 80a2a8a:	ea41 010c 	orrle.w	r1, r1, ip
 80a2a8e:	4090      	lslle	r0, r2
 80a2a90:	1ae4      	subs	r4, r4, r3
 80a2a92:	bfa2      	ittt	ge
 80a2a94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2a98:	4329      	orrge	r1, r5
 80a2a9a:	bd30      	popge	{r4, r5, pc}
 80a2a9c:	ea6f 0404 	mvn.w	r4, r4
 80a2aa0:	3c1f      	subs	r4, #31
 80a2aa2:	da1c      	bge.n	80a2ade <__adddf3+0x1d2>
 80a2aa4:	340c      	adds	r4, #12
 80a2aa6:	dc0e      	bgt.n	80a2ac6 <__adddf3+0x1ba>
 80a2aa8:	f104 0414 	add.w	r4, r4, #20
 80a2aac:	f1c4 0220 	rsb	r2, r4, #32
 80a2ab0:	fa20 f004 	lsr.w	r0, r0, r4
 80a2ab4:	fa01 f302 	lsl.w	r3, r1, r2
 80a2ab8:	ea40 0003 	orr.w	r0, r0, r3
 80a2abc:	fa21 f304 	lsr.w	r3, r1, r4
 80a2ac0:	ea45 0103 	orr.w	r1, r5, r3
 80a2ac4:	bd30      	pop	{r4, r5, pc}
 80a2ac6:	f1c4 040c 	rsb	r4, r4, #12
 80a2aca:	f1c4 0220 	rsb	r2, r4, #32
 80a2ace:	fa20 f002 	lsr.w	r0, r0, r2
 80a2ad2:	fa01 f304 	lsl.w	r3, r1, r4
 80a2ad6:	ea40 0003 	orr.w	r0, r0, r3
 80a2ada:	4629      	mov	r1, r5
 80a2adc:	bd30      	pop	{r4, r5, pc}
 80a2ade:	fa21 f004 	lsr.w	r0, r1, r4
 80a2ae2:	4629      	mov	r1, r5
 80a2ae4:	bd30      	pop	{r4, r5, pc}
 80a2ae6:	f094 0f00 	teq	r4, #0
 80a2aea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a2aee:	bf06      	itte	eq
 80a2af0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a2af4:	3401      	addeq	r4, #1
 80a2af6:	3d01      	subne	r5, #1
 80a2af8:	e74e      	b.n	80a2998 <__adddf3+0x8c>
 80a2afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2afe:	bf18      	it	ne
 80a2b00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2b04:	d029      	beq.n	80a2b5a <__adddf3+0x24e>
 80a2b06:	ea94 0f05 	teq	r4, r5
 80a2b0a:	bf08      	it	eq
 80a2b0c:	ea90 0f02 	teqeq	r0, r2
 80a2b10:	d005      	beq.n	80a2b1e <__adddf3+0x212>
 80a2b12:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2b16:	bf04      	itt	eq
 80a2b18:	4619      	moveq	r1, r3
 80a2b1a:	4610      	moveq	r0, r2
 80a2b1c:	bd30      	pop	{r4, r5, pc}
 80a2b1e:	ea91 0f03 	teq	r1, r3
 80a2b22:	bf1e      	ittt	ne
 80a2b24:	2100      	movne	r1, #0
 80a2b26:	2000      	movne	r0, #0
 80a2b28:	bd30      	popne	{r4, r5, pc}
 80a2b2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a2b2e:	d105      	bne.n	80a2b3c <__adddf3+0x230>
 80a2b30:	0040      	lsls	r0, r0, #1
 80a2b32:	4149      	adcs	r1, r1
 80a2b34:	bf28      	it	cs
 80a2b36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2b3a:	bd30      	pop	{r4, r5, pc}
 80a2b3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a2b40:	bf3c      	itt	cc
 80a2b42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2b46:	bd30      	popcc	{r4, r5, pc}
 80a2b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2b4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a2b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2b54:	f04f 0000 	mov.w	r0, #0
 80a2b58:	bd30      	pop	{r4, r5, pc}
 80a2b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a2b5e:	bf1a      	itte	ne
 80a2b60:	4619      	movne	r1, r3
 80a2b62:	4610      	movne	r0, r2
 80a2b64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2b68:	bf1c      	itt	ne
 80a2b6a:	460b      	movne	r3, r1
 80a2b6c:	4602      	movne	r2, r0
 80a2b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a2b72:	bf06      	itte	eq
 80a2b74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2b78:	ea91 0f03 	teqeq	r1, r3
 80a2b7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a2b80:	bd30      	pop	{r4, r5, pc}
 80a2b82:	bf00      	nop

080a2b84 <__aeabi_ui2d>:
 80a2b84:	f090 0f00 	teq	r0, #0
 80a2b88:	bf04      	itt	eq
 80a2b8a:	2100      	moveq	r1, #0
 80a2b8c:	4770      	bxeq	lr
 80a2b8e:	b530      	push	{r4, r5, lr}
 80a2b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2b98:	f04f 0500 	mov.w	r5, #0
 80a2b9c:	f04f 0100 	mov.w	r1, #0
 80a2ba0:	e750      	b.n	80a2a44 <__adddf3+0x138>
 80a2ba2:	bf00      	nop

080a2ba4 <__aeabi_i2d>:
 80a2ba4:	f090 0f00 	teq	r0, #0
 80a2ba8:	bf04      	itt	eq
 80a2baa:	2100      	moveq	r1, #0
 80a2bac:	4770      	bxeq	lr
 80a2bae:	b530      	push	{r4, r5, lr}
 80a2bb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2bb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2bb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a2bbc:	bf48      	it	mi
 80a2bbe:	4240      	negmi	r0, r0
 80a2bc0:	f04f 0100 	mov.w	r1, #0
 80a2bc4:	e73e      	b.n	80a2a44 <__adddf3+0x138>
 80a2bc6:	bf00      	nop

080a2bc8 <__aeabi_f2d>:
 80a2bc8:	0042      	lsls	r2, r0, #1
 80a2bca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a2bce:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2bd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a2bd6:	bf1f      	itttt	ne
 80a2bd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a2bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2be0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a2be4:	4770      	bxne	lr
 80a2be6:	f092 0f00 	teq	r2, #0
 80a2bea:	bf14      	ite	ne
 80a2bec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a2bf0:	4770      	bxeq	lr
 80a2bf2:	b530      	push	{r4, r5, lr}
 80a2bf4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a2bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2bfc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2c00:	e720      	b.n	80a2a44 <__adddf3+0x138>
 80a2c02:	bf00      	nop

080a2c04 <__aeabi_ul2d>:
 80a2c04:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c08:	bf08      	it	eq
 80a2c0a:	4770      	bxeq	lr
 80a2c0c:	b530      	push	{r4, r5, lr}
 80a2c0e:	f04f 0500 	mov.w	r5, #0
 80a2c12:	e00a      	b.n	80a2c2a <__aeabi_l2d+0x16>

080a2c14 <__aeabi_l2d>:
 80a2c14:	ea50 0201 	orrs.w	r2, r0, r1
 80a2c18:	bf08      	it	eq
 80a2c1a:	4770      	bxeq	lr
 80a2c1c:	b530      	push	{r4, r5, lr}
 80a2c1e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a2c22:	d502      	bpl.n	80a2c2a <__aeabi_l2d+0x16>
 80a2c24:	4240      	negs	r0, r0
 80a2c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2c2a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2c2e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2c32:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2c36:	f43f aedc 	beq.w	80a29f2 <__adddf3+0xe6>
 80a2c3a:	f04f 0203 	mov.w	r2, #3
 80a2c3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c42:	bf18      	it	ne
 80a2c44:	3203      	addne	r2, #3
 80a2c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2c4a:	bf18      	it	ne
 80a2c4c:	3203      	addne	r2, #3
 80a2c4e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a2c52:	f1c2 0320 	rsb	r3, r2, #32
 80a2c56:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2c5a:	fa20 f002 	lsr.w	r0, r0, r2
 80a2c5e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a2c62:	ea40 000e 	orr.w	r0, r0, lr
 80a2c66:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c6a:	4414      	add	r4, r2
 80a2c6c:	e6c1      	b.n	80a29f2 <__adddf3+0xe6>
 80a2c6e:	bf00      	nop

080a2c70 <__aeabi_dmul>:
 80a2c70:	b570      	push	{r4, r5, r6, lr}
 80a2c72:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2c76:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2c7a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2c7e:	bf1d      	ittte	ne
 80a2c80:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2c84:	ea94 0f0c 	teqne	r4, ip
 80a2c88:	ea95 0f0c 	teqne	r5, ip
 80a2c8c:	f000 f8de 	bleq	80a2e4c <__aeabi_dmul+0x1dc>
 80a2c90:	442c      	add	r4, r5
 80a2c92:	ea81 0603 	eor.w	r6, r1, r3
 80a2c96:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2c9a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a2c9e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a2ca2:	bf18      	it	ne
 80a2ca4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a2ca8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a2cb0:	d038      	beq.n	80a2d24 <__aeabi_dmul+0xb4>
 80a2cb2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a2cb6:	f04f 0500 	mov.w	r5, #0
 80a2cba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a2cbe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a2cc2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a2cc6:	f04f 0600 	mov.w	r6, #0
 80a2cca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a2cce:	f09c 0f00 	teq	ip, #0
 80a2cd2:	bf18      	it	ne
 80a2cd4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a2cd8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a2cdc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a2ce0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a2ce4:	d204      	bcs.n	80a2cf0 <__aeabi_dmul+0x80>
 80a2ce6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a2cea:	416d      	adcs	r5, r5
 80a2cec:	eb46 0606 	adc.w	r6, r6, r6
 80a2cf0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a2cf4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a2cf8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a2cfc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a2d00:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2d04:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2d08:	bf88      	it	hi
 80a2d0a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2d0e:	d81e      	bhi.n	80a2d4e <__aeabi_dmul+0xde>
 80a2d10:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2d14:	bf08      	it	eq
 80a2d16:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2d1a:	f150 0000 	adcs.w	r0, r0, #0
 80a2d1e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2d22:	bd70      	pop	{r4, r5, r6, pc}
 80a2d24:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2d28:	ea46 0101 	orr.w	r1, r6, r1
 80a2d2c:	ea40 0002 	orr.w	r0, r0, r2
 80a2d30:	ea81 0103 	eor.w	r1, r1, r3
 80a2d34:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2d38:	bfc2      	ittt	gt
 80a2d3a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2d3e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a2d42:	bd70      	popgt	{r4, r5, r6, pc}
 80a2d44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2d48:	f04f 0e00 	mov.w	lr, #0
 80a2d4c:	3c01      	subs	r4, #1
 80a2d4e:	f300 80ab 	bgt.w	80a2ea8 <__aeabi_dmul+0x238>
 80a2d52:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2d56:	bfde      	ittt	le
 80a2d58:	2000      	movle	r0, #0
 80a2d5a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a2d5e:	bd70      	pople	{r4, r5, r6, pc}
 80a2d60:	f1c4 0400 	rsb	r4, r4, #0
 80a2d64:	3c20      	subs	r4, #32
 80a2d66:	da35      	bge.n	80a2dd4 <__aeabi_dmul+0x164>
 80a2d68:	340c      	adds	r4, #12
 80a2d6a:	dc1b      	bgt.n	80a2da4 <__aeabi_dmul+0x134>
 80a2d6c:	f104 0414 	add.w	r4, r4, #20
 80a2d70:	f1c4 0520 	rsb	r5, r4, #32
 80a2d74:	fa00 f305 	lsl.w	r3, r0, r5
 80a2d78:	fa20 f004 	lsr.w	r0, r0, r4
 80a2d7c:	fa01 f205 	lsl.w	r2, r1, r5
 80a2d80:	ea40 0002 	orr.w	r0, r0, r2
 80a2d84:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2d88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2d8c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2d90:	fa21 f604 	lsr.w	r6, r1, r4
 80a2d94:	eb42 0106 	adc.w	r1, r2, r6
 80a2d98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2d9c:	bf08      	it	eq
 80a2d9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2da2:	bd70      	pop	{r4, r5, r6, pc}
 80a2da4:	f1c4 040c 	rsb	r4, r4, #12
 80a2da8:	f1c4 0520 	rsb	r5, r4, #32
 80a2dac:	fa00 f304 	lsl.w	r3, r0, r4
 80a2db0:	fa20 f005 	lsr.w	r0, r0, r5
 80a2db4:	fa01 f204 	lsl.w	r2, r1, r4
 80a2db8:	ea40 0002 	orr.w	r0, r0, r2
 80a2dbc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a2dc4:	f141 0100 	adc.w	r1, r1, #0
 80a2dc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2dcc:	bf08      	it	eq
 80a2dce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2dd2:	bd70      	pop	{r4, r5, r6, pc}
 80a2dd4:	f1c4 0520 	rsb	r5, r4, #32
 80a2dd8:	fa00 f205 	lsl.w	r2, r0, r5
 80a2ddc:	ea4e 0e02 	orr.w	lr, lr, r2
 80a2de0:	fa20 f304 	lsr.w	r3, r0, r4
 80a2de4:	fa01 f205 	lsl.w	r2, r1, r5
 80a2de8:	ea43 0302 	orr.w	r3, r3, r2
 80a2dec:	fa21 f004 	lsr.w	r0, r1, r4
 80a2df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2df4:	fa21 f204 	lsr.w	r2, r1, r4
 80a2df8:	ea20 0002 	bic.w	r0, r0, r2
 80a2dfc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a2e00:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2e04:	bf08      	it	eq
 80a2e06:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2e0a:	bd70      	pop	{r4, r5, r6, pc}
 80a2e0c:	f094 0f00 	teq	r4, #0
 80a2e10:	d10f      	bne.n	80a2e32 <__aeabi_dmul+0x1c2>
 80a2e12:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2e16:	0040      	lsls	r0, r0, #1
 80a2e18:	eb41 0101 	adc.w	r1, r1, r1
 80a2e1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2e20:	bf08      	it	eq
 80a2e22:	3c01      	subeq	r4, #1
 80a2e24:	d0f7      	beq.n	80a2e16 <__aeabi_dmul+0x1a6>
 80a2e26:	ea41 0106 	orr.w	r1, r1, r6
 80a2e2a:	f095 0f00 	teq	r5, #0
 80a2e2e:	bf18      	it	ne
 80a2e30:	4770      	bxne	lr
 80a2e32:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2e36:	0052      	lsls	r2, r2, #1
 80a2e38:	eb43 0303 	adc.w	r3, r3, r3
 80a2e3c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a2e40:	bf08      	it	eq
 80a2e42:	3d01      	subeq	r5, #1
 80a2e44:	d0f7      	beq.n	80a2e36 <__aeabi_dmul+0x1c6>
 80a2e46:	ea43 0306 	orr.w	r3, r3, r6
 80a2e4a:	4770      	bx	lr
 80a2e4c:	ea94 0f0c 	teq	r4, ip
 80a2e50:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2e54:	bf18      	it	ne
 80a2e56:	ea95 0f0c 	teqne	r5, ip
 80a2e5a:	d00c      	beq.n	80a2e76 <__aeabi_dmul+0x206>
 80a2e5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e60:	bf18      	it	ne
 80a2e62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e66:	d1d1      	bne.n	80a2e0c <__aeabi_dmul+0x19c>
 80a2e68:	ea81 0103 	eor.w	r1, r1, r3
 80a2e6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2e70:	f04f 0000 	mov.w	r0, #0
 80a2e74:	bd70      	pop	{r4, r5, r6, pc}
 80a2e76:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2e7a:	bf06      	itte	eq
 80a2e7c:	4610      	moveq	r0, r2
 80a2e7e:	4619      	moveq	r1, r3
 80a2e80:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2e84:	d019      	beq.n	80a2eba <__aeabi_dmul+0x24a>
 80a2e86:	ea94 0f0c 	teq	r4, ip
 80a2e8a:	d102      	bne.n	80a2e92 <__aeabi_dmul+0x222>
 80a2e8c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a2e90:	d113      	bne.n	80a2eba <__aeabi_dmul+0x24a>
 80a2e92:	ea95 0f0c 	teq	r5, ip
 80a2e96:	d105      	bne.n	80a2ea4 <__aeabi_dmul+0x234>
 80a2e98:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2e9c:	bf1c      	itt	ne
 80a2e9e:	4610      	movne	r0, r2
 80a2ea0:	4619      	movne	r1, r3
 80a2ea2:	d10a      	bne.n	80a2eba <__aeabi_dmul+0x24a>
 80a2ea4:	ea81 0103 	eor.w	r1, r1, r3
 80a2ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a2eac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2eb0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2eb4:	f04f 0000 	mov.w	r0, #0
 80a2eb8:	bd70      	pop	{r4, r5, r6, pc}
 80a2eba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a2ebe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a2ec2:	bd70      	pop	{r4, r5, r6, pc}

080a2ec4 <__aeabi_ddiv>:
 80a2ec4:	b570      	push	{r4, r5, r6, lr}
 80a2ec6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2eca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2ece:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a2ed2:	bf1d      	ittte	ne
 80a2ed4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2ed8:	ea94 0f0c 	teqne	r4, ip
 80a2edc:	ea95 0f0c 	teqne	r5, ip
 80a2ee0:	f000 f8a7 	bleq	80a3032 <__aeabi_ddiv+0x16e>
 80a2ee4:	eba4 0405 	sub.w	r4, r4, r5
 80a2ee8:	ea81 0e03 	eor.w	lr, r1, r3
 80a2eec:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2ef4:	f000 8088 	beq.w	80a3008 <__aeabi_ddiv+0x144>
 80a2ef8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2efc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a2f00:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2f04:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2f08:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2f0c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a2f10:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2f14:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2f18:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2f1c:	429d      	cmp	r5, r3
 80a2f1e:	bf08      	it	eq
 80a2f20:	4296      	cmpeq	r6, r2
 80a2f22:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2f26:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2f2a:	d202      	bcs.n	80a2f32 <__aeabi_ddiv+0x6e>
 80a2f2c:	085b      	lsrs	r3, r3, #1
 80a2f2e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f32:	1ab6      	subs	r6, r6, r2
 80a2f34:	eb65 0503 	sbc.w	r5, r5, r3
 80a2f38:	085b      	lsrs	r3, r3, #1
 80a2f3a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f3e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a2f42:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2f46:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f4a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f4e:	bf22      	ittt	cs
 80a2f50:	1ab6      	subcs	r6, r6, r2
 80a2f52:	4675      	movcs	r5, lr
 80a2f54:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2f58:	085b      	lsrs	r3, r3, #1
 80a2f5a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f5e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f62:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f66:	bf22      	ittt	cs
 80a2f68:	1ab6      	subcs	r6, r6, r2
 80a2f6a:	4675      	movcs	r5, lr
 80a2f6c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2f70:	085b      	lsrs	r3, r3, #1
 80a2f72:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f76:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f7e:	bf22      	ittt	cs
 80a2f80:	1ab6      	subcs	r6, r6, r2
 80a2f82:	4675      	movcs	r5, lr
 80a2f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2f88:	085b      	lsrs	r3, r3, #1
 80a2f8a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2f8e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2f92:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2f96:	bf22      	ittt	cs
 80a2f98:	1ab6      	subcs	r6, r6, r2
 80a2f9a:	4675      	movcs	r5, lr
 80a2f9c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2fa0:	ea55 0e06 	orrs.w	lr, r5, r6
 80a2fa4:	d018      	beq.n	80a2fd8 <__aeabi_ddiv+0x114>
 80a2fa6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a2faa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a2fae:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a2fb2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a2fb6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a2fba:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a2fbe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a2fc2:	d1c0      	bne.n	80a2f46 <__aeabi_ddiv+0x82>
 80a2fc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fc8:	d10b      	bne.n	80a2fe2 <__aeabi_ddiv+0x11e>
 80a2fca:	ea41 0100 	orr.w	r1, r1, r0
 80a2fce:	f04f 0000 	mov.w	r0, #0
 80a2fd2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a2fd6:	e7b6      	b.n	80a2f46 <__aeabi_ddiv+0x82>
 80a2fd8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a2fdc:	bf04      	itt	eq
 80a2fde:	4301      	orreq	r1, r0
 80a2fe0:	2000      	moveq	r0, #0
 80a2fe2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2fe6:	bf88      	it	hi
 80a2fe8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a2fec:	f63f aeaf 	bhi.w	80a2d4e <__aeabi_dmul+0xde>
 80a2ff0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a2ff4:	bf04      	itt	eq
 80a2ff6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a2ffa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a2ffe:	f150 0000 	adcs.w	r0, r0, #0
 80a3002:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3006:	bd70      	pop	{r4, r5, r6, pc}
 80a3008:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a300c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3010:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3014:	bfc2      	ittt	gt
 80a3016:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a301a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a301e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3020:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3024:	f04f 0e00 	mov.w	lr, #0
 80a3028:	3c01      	subs	r4, #1
 80a302a:	e690      	b.n	80a2d4e <__aeabi_dmul+0xde>
 80a302c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3030:	e68d      	b.n	80a2d4e <__aeabi_dmul+0xde>
 80a3032:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3036:	ea94 0f0c 	teq	r4, ip
 80a303a:	bf08      	it	eq
 80a303c:	ea95 0f0c 	teqeq	r5, ip
 80a3040:	f43f af3b 	beq.w	80a2eba <__aeabi_dmul+0x24a>
 80a3044:	ea94 0f0c 	teq	r4, ip
 80a3048:	d10a      	bne.n	80a3060 <__aeabi_ddiv+0x19c>
 80a304a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a304e:	f47f af34 	bne.w	80a2eba <__aeabi_dmul+0x24a>
 80a3052:	ea95 0f0c 	teq	r5, ip
 80a3056:	f47f af25 	bne.w	80a2ea4 <__aeabi_dmul+0x234>
 80a305a:	4610      	mov	r0, r2
 80a305c:	4619      	mov	r1, r3
 80a305e:	e72c      	b.n	80a2eba <__aeabi_dmul+0x24a>
 80a3060:	ea95 0f0c 	teq	r5, ip
 80a3064:	d106      	bne.n	80a3074 <__aeabi_ddiv+0x1b0>
 80a3066:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a306a:	f43f aefd 	beq.w	80a2e68 <__aeabi_dmul+0x1f8>
 80a306e:	4610      	mov	r0, r2
 80a3070:	4619      	mov	r1, r3
 80a3072:	e722      	b.n	80a2eba <__aeabi_dmul+0x24a>
 80a3074:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3078:	bf18      	it	ne
 80a307a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a307e:	f47f aec5 	bne.w	80a2e0c <__aeabi_dmul+0x19c>
 80a3082:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3086:	f47f af0d 	bne.w	80a2ea4 <__aeabi_dmul+0x234>
 80a308a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a308e:	f47f aeeb 	bne.w	80a2e68 <__aeabi_dmul+0x1f8>
 80a3092:	e712      	b.n	80a2eba <__aeabi_dmul+0x24a>

080a3094 <__gedf2>:
 80a3094:	f04f 3cff 	mov.w	ip, #4294967295
 80a3098:	e006      	b.n	80a30a8 <__cmpdf2+0x4>
 80a309a:	bf00      	nop

080a309c <__ledf2>:
 80a309c:	f04f 0c01 	mov.w	ip, #1
 80a30a0:	e002      	b.n	80a30a8 <__cmpdf2+0x4>
 80a30a2:	bf00      	nop

080a30a4 <__cmpdf2>:
 80a30a4:	f04f 0c01 	mov.w	ip, #1
 80a30a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a30ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a30b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a30b8:	bf18      	it	ne
 80a30ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a30be:	d01b      	beq.n	80a30f8 <__cmpdf2+0x54>
 80a30c0:	b001      	add	sp, #4
 80a30c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a30c6:	bf0c      	ite	eq
 80a30c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a30cc:	ea91 0f03 	teqne	r1, r3
 80a30d0:	bf02      	ittt	eq
 80a30d2:	ea90 0f02 	teqeq	r0, r2
 80a30d6:	2000      	moveq	r0, #0
 80a30d8:	4770      	bxeq	lr
 80a30da:	f110 0f00 	cmn.w	r0, #0
 80a30de:	ea91 0f03 	teq	r1, r3
 80a30e2:	bf58      	it	pl
 80a30e4:	4299      	cmppl	r1, r3
 80a30e6:	bf08      	it	eq
 80a30e8:	4290      	cmpeq	r0, r2
 80a30ea:	bf2c      	ite	cs
 80a30ec:	17d8      	asrcs	r0, r3, #31
 80a30ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a30f2:	f040 0001 	orr.w	r0, r0, #1
 80a30f6:	4770      	bx	lr
 80a30f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a30fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3100:	d102      	bne.n	80a3108 <__cmpdf2+0x64>
 80a3102:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3106:	d107      	bne.n	80a3118 <__cmpdf2+0x74>
 80a3108:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a310c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3110:	d1d6      	bne.n	80a30c0 <__cmpdf2+0x1c>
 80a3112:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3116:	d0d3      	beq.n	80a30c0 <__cmpdf2+0x1c>
 80a3118:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a311c:	4770      	bx	lr
 80a311e:	bf00      	nop

080a3120 <__aeabi_cdrcmple>:
 80a3120:	4684      	mov	ip, r0
 80a3122:	4610      	mov	r0, r2
 80a3124:	4662      	mov	r2, ip
 80a3126:	468c      	mov	ip, r1
 80a3128:	4619      	mov	r1, r3
 80a312a:	4663      	mov	r3, ip
 80a312c:	e000      	b.n	80a3130 <__aeabi_cdcmpeq>
 80a312e:	bf00      	nop

080a3130 <__aeabi_cdcmpeq>:
 80a3130:	b501      	push	{r0, lr}
 80a3132:	f7ff ffb7 	bl	80a30a4 <__cmpdf2>
 80a3136:	2800      	cmp	r0, #0
 80a3138:	bf48      	it	mi
 80a313a:	f110 0f00 	cmnmi.w	r0, #0
 80a313e:	bd01      	pop	{r0, pc}

080a3140 <__aeabi_dcmpeq>:
 80a3140:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3144:	f7ff fff4 	bl	80a3130 <__aeabi_cdcmpeq>
 80a3148:	bf0c      	ite	eq
 80a314a:	2001      	moveq	r0, #1
 80a314c:	2000      	movne	r0, #0
 80a314e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3152:	bf00      	nop

080a3154 <__aeabi_dcmplt>:
 80a3154:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3158:	f7ff ffea 	bl	80a3130 <__aeabi_cdcmpeq>
 80a315c:	bf34      	ite	cc
 80a315e:	2001      	movcc	r0, #1
 80a3160:	2000      	movcs	r0, #0
 80a3162:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3166:	bf00      	nop

080a3168 <__aeabi_dcmple>:
 80a3168:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a316c:	f7ff ffe0 	bl	80a3130 <__aeabi_cdcmpeq>
 80a3170:	bf94      	ite	ls
 80a3172:	2001      	movls	r0, #1
 80a3174:	2000      	movhi	r0, #0
 80a3176:	f85d fb08 	ldr.w	pc, [sp], #8
 80a317a:	bf00      	nop

080a317c <__aeabi_dcmpge>:
 80a317c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3180:	f7ff ffce 	bl	80a3120 <__aeabi_cdrcmple>
 80a3184:	bf94      	ite	ls
 80a3186:	2001      	movls	r0, #1
 80a3188:	2000      	movhi	r0, #0
 80a318a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a318e:	bf00      	nop

080a3190 <__aeabi_dcmpgt>:
 80a3190:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3194:	f7ff ffc4 	bl	80a3120 <__aeabi_cdrcmple>
 80a3198:	bf34      	ite	cc
 80a319a:	2001      	movcc	r0, #1
 80a319c:	2000      	movcs	r0, #0
 80a319e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a31a2:	bf00      	nop

080a31a4 <__aeabi_dcmpun>:
 80a31a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a31a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31ac:	d102      	bne.n	80a31b4 <__aeabi_dcmpun+0x10>
 80a31ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a31b2:	d10a      	bne.n	80a31ca <__aeabi_dcmpun+0x26>
 80a31b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a31b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a31bc:	d102      	bne.n	80a31c4 <__aeabi_dcmpun+0x20>
 80a31be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a31c2:	d102      	bne.n	80a31ca <__aeabi_dcmpun+0x26>
 80a31c4:	f04f 0000 	mov.w	r0, #0
 80a31c8:	4770      	bx	lr
 80a31ca:	f04f 0001 	mov.w	r0, #1
 80a31ce:	4770      	bx	lr

080a31d0 <__aeabi_d2iz>:
 80a31d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a31d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a31d8:	d215      	bcs.n	80a3206 <__aeabi_d2iz+0x36>
 80a31da:	d511      	bpl.n	80a3200 <__aeabi_d2iz+0x30>
 80a31dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a31e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a31e4:	d912      	bls.n	80a320c <__aeabi_d2iz+0x3c>
 80a31e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a31ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a31ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a31f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a31f6:	fa23 f002 	lsr.w	r0, r3, r2
 80a31fa:	bf18      	it	ne
 80a31fc:	4240      	negne	r0, r0
 80a31fe:	4770      	bx	lr
 80a3200:	f04f 0000 	mov.w	r0, #0
 80a3204:	4770      	bx	lr
 80a3206:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a320a:	d105      	bne.n	80a3218 <__aeabi_d2iz+0x48>
 80a320c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3210:	bf08      	it	eq
 80a3212:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3216:	4770      	bx	lr
 80a3218:	f04f 0000 	mov.w	r0, #0
 80a321c:	4770      	bx	lr
 80a321e:	bf00      	nop

080a3220 <__aeabi_d2uiz>:
 80a3220:	004a      	lsls	r2, r1, #1
 80a3222:	d211      	bcs.n	80a3248 <__aeabi_d2uiz+0x28>
 80a3224:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3228:	d211      	bcs.n	80a324e <__aeabi_d2uiz+0x2e>
 80a322a:	d50d      	bpl.n	80a3248 <__aeabi_d2uiz+0x28>
 80a322c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3230:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3234:	d40e      	bmi.n	80a3254 <__aeabi_d2uiz+0x34>
 80a3236:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a323a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a323e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3242:	fa23 f002 	lsr.w	r0, r3, r2
 80a3246:	4770      	bx	lr
 80a3248:	f04f 0000 	mov.w	r0, #0
 80a324c:	4770      	bx	lr
 80a324e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3252:	d102      	bne.n	80a325a <__aeabi_d2uiz+0x3a>
 80a3254:	f04f 30ff 	mov.w	r0, #4294967295
 80a3258:	4770      	bx	lr
 80a325a:	f04f 0000 	mov.w	r0, #0
 80a325e:	4770      	bx	lr

080a3260 <__aeabi_uldivmod>:
 80a3260:	b953      	cbnz	r3, 80a3278 <__aeabi_uldivmod+0x18>
 80a3262:	b94a      	cbnz	r2, 80a3278 <__aeabi_uldivmod+0x18>
 80a3264:	2900      	cmp	r1, #0
 80a3266:	bf08      	it	eq
 80a3268:	2800      	cmpeq	r0, #0
 80a326a:	bf1c      	itt	ne
 80a326c:	f04f 31ff 	movne.w	r1, #4294967295
 80a3270:	f04f 30ff 	movne.w	r0, #4294967295
 80a3274:	f000 b9a6 	b.w	80a35c4 <__aeabi_idiv0>
 80a3278:	f1ad 0c08 	sub.w	ip, sp, #8
 80a327c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a3280:	f000 f82a 	bl	80a32d8 <__udivmoddi4>
 80a3284:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a3288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a328c:	b004      	add	sp, #16
 80a328e:	4770      	bx	lr

080a3290 <__aeabi_d2ulz>:
 80a3290:	b5d0      	push	{r4, r6, r7, lr}
 80a3292:	2200      	movs	r2, #0
 80a3294:	4b0e      	ldr	r3, [pc, #56]	; (80a32d0 <__aeabi_d2ulz+0x40>)
 80a3296:	4606      	mov	r6, r0
 80a3298:	460f      	mov	r7, r1
 80a329a:	f7ff fce9 	bl	80a2c70 <__aeabi_dmul>
 80a329e:	f7ff ffbf 	bl	80a3220 <__aeabi_d2uiz>
 80a32a2:	4604      	mov	r4, r0
 80a32a4:	f7ff fc6e 	bl	80a2b84 <__aeabi_ui2d>
 80a32a8:	2200      	movs	r2, #0
 80a32aa:	4b0a      	ldr	r3, [pc, #40]	; (80a32d4 <__aeabi_d2ulz+0x44>)
 80a32ac:	f7ff fce0 	bl	80a2c70 <__aeabi_dmul>
 80a32b0:	4602      	mov	r2, r0
 80a32b2:	460b      	mov	r3, r1
 80a32b4:	4630      	mov	r0, r6
 80a32b6:	4639      	mov	r1, r7
 80a32b8:	f7ff fb26 	bl	80a2908 <__aeabi_dsub>
 80a32bc:	f7ff ffb0 	bl	80a3220 <__aeabi_d2uiz>
 80a32c0:	4623      	mov	r3, r4
 80a32c2:	2200      	movs	r2, #0
 80a32c4:	ea42 0200 	orr.w	r2, r2, r0
 80a32c8:	4610      	mov	r0, r2
 80a32ca:	4619      	mov	r1, r3
 80a32cc:	bdd0      	pop	{r4, r6, r7, pc}
 80a32ce:	bf00      	nop
 80a32d0:	3df00000 	.word	0x3df00000
 80a32d4:	41f00000 	.word	0x41f00000

080a32d8 <__udivmoddi4>:
 80a32d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a32dc:	468c      	mov	ip, r1
 80a32de:	460c      	mov	r4, r1
 80a32e0:	4605      	mov	r5, r0
 80a32e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a32e4:	2b00      	cmp	r3, #0
 80a32e6:	d14f      	bne.n	80a3388 <__udivmoddi4+0xb0>
 80a32e8:	428a      	cmp	r2, r1
 80a32ea:	4617      	mov	r7, r2
 80a32ec:	d96b      	bls.n	80a33c6 <__udivmoddi4+0xee>
 80a32ee:	fab2 fe82 	clz	lr, r2
 80a32f2:	f1be 0f00 	cmp.w	lr, #0
 80a32f6:	d00b      	beq.n	80a3310 <__udivmoddi4+0x38>
 80a32f8:	f1ce 0520 	rsb	r5, lr, #32
 80a32fc:	fa20 f505 	lsr.w	r5, r0, r5
 80a3300:	fa01 f30e 	lsl.w	r3, r1, lr
 80a3304:	ea45 0c03 	orr.w	ip, r5, r3
 80a3308:	fa02 f70e 	lsl.w	r7, r2, lr
 80a330c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3310:	0c39      	lsrs	r1, r7, #16
 80a3312:	fbbc f0f1 	udiv	r0, ip, r1
 80a3316:	b2ba      	uxth	r2, r7
 80a3318:	fb01 c310 	mls	r3, r1, r0, ip
 80a331c:	fb00 f802 	mul.w	r8, r0, r2
 80a3320:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a3324:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a3328:	45a0      	cmp	r8, r4
 80a332a:	d909      	bls.n	80a3340 <__udivmoddi4+0x68>
 80a332c:	19e4      	adds	r4, r4, r7
 80a332e:	f100 33ff 	add.w	r3, r0, #4294967295
 80a3332:	f080 8128 	bcs.w	80a3586 <__udivmoddi4+0x2ae>
 80a3336:	45a0      	cmp	r8, r4
 80a3338:	f240 8125 	bls.w	80a3586 <__udivmoddi4+0x2ae>
 80a333c:	3802      	subs	r0, #2
 80a333e:	443c      	add	r4, r7
 80a3340:	ebc8 0404 	rsb	r4, r8, r4
 80a3344:	fbb4 f3f1 	udiv	r3, r4, r1
 80a3348:	fb01 4c13 	mls	ip, r1, r3, r4
 80a334c:	fb03 f202 	mul.w	r2, r3, r2
 80a3350:	b2ac      	uxth	r4, r5
 80a3352:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a3356:	428a      	cmp	r2, r1
 80a3358:	d909      	bls.n	80a336e <__udivmoddi4+0x96>
 80a335a:	19c9      	adds	r1, r1, r7
 80a335c:	f103 34ff 	add.w	r4, r3, #4294967295
 80a3360:	f080 810f 	bcs.w	80a3582 <__udivmoddi4+0x2aa>
 80a3364:	428a      	cmp	r2, r1
 80a3366:	f240 810c 	bls.w	80a3582 <__udivmoddi4+0x2aa>
 80a336a:	3b02      	subs	r3, #2
 80a336c:	4439      	add	r1, r7
 80a336e:	1a8a      	subs	r2, r1, r2
 80a3370:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a3374:	2100      	movs	r1, #0
 80a3376:	2e00      	cmp	r6, #0
 80a3378:	d063      	beq.n	80a3442 <__udivmoddi4+0x16a>
 80a337a:	fa22 f20e 	lsr.w	r2, r2, lr
 80a337e:	2300      	movs	r3, #0
 80a3380:	e886 000c 	stmia.w	r6, {r2, r3}
 80a3384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3388:	428b      	cmp	r3, r1
 80a338a:	d907      	bls.n	80a339c <__udivmoddi4+0xc4>
 80a338c:	2e00      	cmp	r6, #0
 80a338e:	d056      	beq.n	80a343e <__udivmoddi4+0x166>
 80a3390:	2100      	movs	r1, #0
 80a3392:	e886 0011 	stmia.w	r6, {r0, r4}
 80a3396:	4608      	mov	r0, r1
 80a3398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a339c:	fab3 f183 	clz	r1, r3
 80a33a0:	2900      	cmp	r1, #0
 80a33a2:	f040 8093 	bne.w	80a34cc <__udivmoddi4+0x1f4>
 80a33a6:	42a3      	cmp	r3, r4
 80a33a8:	d302      	bcc.n	80a33b0 <__udivmoddi4+0xd8>
 80a33aa:	4282      	cmp	r2, r0
 80a33ac:	f200 80fe 	bhi.w	80a35ac <__udivmoddi4+0x2d4>
 80a33b0:	1a85      	subs	r5, r0, r2
 80a33b2:	eb64 0303 	sbc.w	r3, r4, r3
 80a33b6:	469c      	mov	ip, r3
 80a33b8:	2001      	movs	r0, #1
 80a33ba:	2e00      	cmp	r6, #0
 80a33bc:	d041      	beq.n	80a3442 <__udivmoddi4+0x16a>
 80a33be:	e886 1020 	stmia.w	r6, {r5, ip}
 80a33c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a33c6:	b912      	cbnz	r2, 80a33ce <__udivmoddi4+0xf6>
 80a33c8:	2701      	movs	r7, #1
 80a33ca:	fbb7 f7f2 	udiv	r7, r7, r2
 80a33ce:	fab7 fe87 	clz	lr, r7
 80a33d2:	f1be 0f00 	cmp.w	lr, #0
 80a33d6:	d136      	bne.n	80a3446 <__udivmoddi4+0x16e>
 80a33d8:	1be4      	subs	r4, r4, r7
 80a33da:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a33de:	fa1f f987 	uxth.w	r9, r7
 80a33e2:	2101      	movs	r1, #1
 80a33e4:	fbb4 f3f8 	udiv	r3, r4, r8
 80a33e8:	fb08 4413 	mls	r4, r8, r3, r4
 80a33ec:	fb09 f203 	mul.w	r2, r9, r3
 80a33f0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a33f4:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a33f8:	42a2      	cmp	r2, r4
 80a33fa:	d907      	bls.n	80a340c <__udivmoddi4+0x134>
 80a33fc:	19e4      	adds	r4, r4, r7
 80a33fe:	f103 30ff 	add.w	r0, r3, #4294967295
 80a3402:	d202      	bcs.n	80a340a <__udivmoddi4+0x132>
 80a3404:	42a2      	cmp	r2, r4
 80a3406:	f200 80d3 	bhi.w	80a35b0 <__udivmoddi4+0x2d8>
 80a340a:	4603      	mov	r3, r0
 80a340c:	1aa4      	subs	r4, r4, r2
 80a340e:	fbb4 f0f8 	udiv	r0, r4, r8
 80a3412:	fb08 4810 	mls	r8, r8, r0, r4
 80a3416:	fb09 f900 	mul.w	r9, r9, r0
 80a341a:	b2ac      	uxth	r4, r5
 80a341c:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a3420:	4591      	cmp	r9, r2
 80a3422:	d907      	bls.n	80a3434 <__udivmoddi4+0x15c>
 80a3424:	19d2      	adds	r2, r2, r7
 80a3426:	f100 34ff 	add.w	r4, r0, #4294967295
 80a342a:	d202      	bcs.n	80a3432 <__udivmoddi4+0x15a>
 80a342c:	4591      	cmp	r9, r2
 80a342e:	f200 80ba 	bhi.w	80a35a6 <__udivmoddi4+0x2ce>
 80a3432:	4620      	mov	r0, r4
 80a3434:	ebc9 0202 	rsb	r2, r9, r2
 80a3438:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a343c:	e79b      	b.n	80a3376 <__udivmoddi4+0x9e>
 80a343e:	4631      	mov	r1, r6
 80a3440:	4630      	mov	r0, r6
 80a3442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3446:	fa07 f70e 	lsl.w	r7, r7, lr
 80a344a:	f1ce 0c20 	rsb	ip, lr, #32
 80a344e:	fa24 f30c 	lsr.w	r3, r4, ip
 80a3452:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3456:	fbb3 faf8 	udiv	sl, r3, r8
 80a345a:	fa1f f987 	uxth.w	r9, r7
 80a345e:	fb08 351a 	mls	r5, r8, sl, r3
 80a3462:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3466:	fa04 f40e 	lsl.w	r4, r4, lr
 80a346a:	fb0a fb09 	mul.w	fp, sl, r9
 80a346e:	ea4c 0c04 	orr.w	ip, ip, r4
 80a3472:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3476:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a347a:	459b      	cmp	fp, r3
 80a347c:	fa00 f50e 	lsl.w	r5, r0, lr
 80a3480:	d90a      	bls.n	80a3498 <__udivmoddi4+0x1c0>
 80a3482:	19db      	adds	r3, r3, r7
 80a3484:	f10a 32ff 	add.w	r2, sl, #4294967295
 80a3488:	f080 808b 	bcs.w	80a35a2 <__udivmoddi4+0x2ca>
 80a348c:	459b      	cmp	fp, r3
 80a348e:	f240 8088 	bls.w	80a35a2 <__udivmoddi4+0x2ca>
 80a3492:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3496:	443b      	add	r3, r7
 80a3498:	ebcb 0303 	rsb	r3, fp, r3
 80a349c:	fbb3 f0f8 	udiv	r0, r3, r8
 80a34a0:	fb08 3310 	mls	r3, r8, r0, r3
 80a34a4:	fb00 f409 	mul.w	r4, r0, r9
 80a34a8:	fa1f fc8c 	uxth.w	ip, ip
 80a34ac:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a34b0:	429c      	cmp	r4, r3
 80a34b2:	d907      	bls.n	80a34c4 <__udivmoddi4+0x1ec>
 80a34b4:	19db      	adds	r3, r3, r7
 80a34b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80a34ba:	d26e      	bcs.n	80a359a <__udivmoddi4+0x2c2>
 80a34bc:	429c      	cmp	r4, r3
 80a34be:	d96c      	bls.n	80a359a <__udivmoddi4+0x2c2>
 80a34c0:	3802      	subs	r0, #2
 80a34c2:	443b      	add	r3, r7
 80a34c4:	1b1c      	subs	r4, r3, r4
 80a34c6:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a34ca:	e78b      	b.n	80a33e4 <__udivmoddi4+0x10c>
 80a34cc:	f1c1 0e20 	rsb	lr, r1, #32
 80a34d0:	408b      	lsls	r3, r1
 80a34d2:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a34d6:	ea4c 0c03 	orr.w	ip, ip, r3
 80a34da:	fa24 f70e 	lsr.w	r7, r4, lr
 80a34de:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a34e2:	fbb7 faf9 	udiv	sl, r7, r9
 80a34e6:	fa1f f38c 	uxth.w	r3, ip
 80a34ea:	fb09 771a 	mls	r7, r9, sl, r7
 80a34ee:	fa20 f80e 	lsr.w	r8, r0, lr
 80a34f2:	408c      	lsls	r4, r1
 80a34f4:	fb0a f503 	mul.w	r5, sl, r3
 80a34f8:	ea48 0404 	orr.w	r4, r8, r4
 80a34fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a3500:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a3504:	42bd      	cmp	r5, r7
 80a3506:	fa02 f201 	lsl.w	r2, r2, r1
 80a350a:	fa00 fb01 	lsl.w	fp, r0, r1
 80a350e:	d909      	bls.n	80a3524 <__udivmoddi4+0x24c>
 80a3510:	eb17 070c 	adds.w	r7, r7, ip
 80a3514:	f10a 30ff 	add.w	r0, sl, #4294967295
 80a3518:	d241      	bcs.n	80a359e <__udivmoddi4+0x2c6>
 80a351a:	42bd      	cmp	r5, r7
 80a351c:	d93f      	bls.n	80a359e <__udivmoddi4+0x2c6>
 80a351e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3522:	4467      	add	r7, ip
 80a3524:	1b7f      	subs	r7, r7, r5
 80a3526:	fbb7 f5f9 	udiv	r5, r7, r9
 80a352a:	fb09 7715 	mls	r7, r9, r5, r7
 80a352e:	fb05 f303 	mul.w	r3, r5, r3
 80a3532:	b2a4      	uxth	r4, r4
 80a3534:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3538:	42bb      	cmp	r3, r7
 80a353a:	d908      	bls.n	80a354e <__udivmoddi4+0x276>
 80a353c:	eb17 070c 	adds.w	r7, r7, ip
 80a3540:	f105 30ff 	add.w	r0, r5, #4294967295
 80a3544:	d227      	bcs.n	80a3596 <__udivmoddi4+0x2be>
 80a3546:	42bb      	cmp	r3, r7
 80a3548:	d925      	bls.n	80a3596 <__udivmoddi4+0x2be>
 80a354a:	3d02      	subs	r5, #2
 80a354c:	4467      	add	r7, ip
 80a354e:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a3552:	fba0 8902 	umull	r8, r9, r0, r2
 80a3556:	1aff      	subs	r7, r7, r3
 80a3558:	454f      	cmp	r7, r9
 80a355a:	4645      	mov	r5, r8
 80a355c:	464c      	mov	r4, r9
 80a355e:	d314      	bcc.n	80a358a <__udivmoddi4+0x2b2>
 80a3560:	d029      	beq.n	80a35b6 <__udivmoddi4+0x2de>
 80a3562:	b366      	cbz	r6, 80a35be <__udivmoddi4+0x2e6>
 80a3564:	ebbb 0305 	subs.w	r3, fp, r5
 80a3568:	eb67 0704 	sbc.w	r7, r7, r4
 80a356c:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a3570:	40cb      	lsrs	r3, r1
 80a3572:	40cf      	lsrs	r7, r1
 80a3574:	ea4e 0303 	orr.w	r3, lr, r3
 80a3578:	e886 0088 	stmia.w	r6, {r3, r7}
 80a357c:	2100      	movs	r1, #0
 80a357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3582:	4623      	mov	r3, r4
 80a3584:	e6f3      	b.n	80a336e <__udivmoddi4+0x96>
 80a3586:	4618      	mov	r0, r3
 80a3588:	e6da      	b.n	80a3340 <__udivmoddi4+0x68>
 80a358a:	ebb8 0502 	subs.w	r5, r8, r2
 80a358e:	eb69 040c 	sbc.w	r4, r9, ip
 80a3592:	3801      	subs	r0, #1
 80a3594:	e7e5      	b.n	80a3562 <__udivmoddi4+0x28a>
 80a3596:	4605      	mov	r5, r0
 80a3598:	e7d9      	b.n	80a354e <__udivmoddi4+0x276>
 80a359a:	4610      	mov	r0, r2
 80a359c:	e792      	b.n	80a34c4 <__udivmoddi4+0x1ec>
 80a359e:	4682      	mov	sl, r0
 80a35a0:	e7c0      	b.n	80a3524 <__udivmoddi4+0x24c>
 80a35a2:	4692      	mov	sl, r2
 80a35a4:	e778      	b.n	80a3498 <__udivmoddi4+0x1c0>
 80a35a6:	3802      	subs	r0, #2
 80a35a8:	443a      	add	r2, r7
 80a35aa:	e743      	b.n	80a3434 <__udivmoddi4+0x15c>
 80a35ac:	4608      	mov	r0, r1
 80a35ae:	e704      	b.n	80a33ba <__udivmoddi4+0xe2>
 80a35b0:	3b02      	subs	r3, #2
 80a35b2:	443c      	add	r4, r7
 80a35b4:	e72a      	b.n	80a340c <__udivmoddi4+0x134>
 80a35b6:	45c3      	cmp	fp, r8
 80a35b8:	d3e7      	bcc.n	80a358a <__udivmoddi4+0x2b2>
 80a35ba:	463c      	mov	r4, r7
 80a35bc:	e7d1      	b.n	80a3562 <__udivmoddi4+0x28a>
 80a35be:	4631      	mov	r1, r6
 80a35c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a35c4 <__aeabi_idiv0>:
 80a35c4:	4770      	bx	lr
 80a35c6:	bf00      	nop

080a35c8 <__cxa_atexit>:
 80a35c8:	b510      	push	{r4, lr}
 80a35ca:	4c05      	ldr	r4, [pc, #20]	; (80a35e0 <__cxa_atexit+0x18>)
 80a35cc:	4613      	mov	r3, r2
 80a35ce:	b12c      	cbz	r4, 80a35dc <__cxa_atexit+0x14>
 80a35d0:	460a      	mov	r2, r1
 80a35d2:	4601      	mov	r1, r0
 80a35d4:	2002      	movs	r0, #2
 80a35d6:	f3af 8000 	nop.w
 80a35da:	bd10      	pop	{r4, pc}
 80a35dc:	4620      	mov	r0, r4
 80a35de:	bd10      	pop	{r4, pc}
 80a35e0:	00000000 	.word	0x00000000

080a35e4 <memcpy>:
 80a35e4:	b510      	push	{r4, lr}
 80a35e6:	1e43      	subs	r3, r0, #1
 80a35e8:	440a      	add	r2, r1
 80a35ea:	4291      	cmp	r1, r2
 80a35ec:	d004      	beq.n	80a35f8 <memcpy+0x14>
 80a35ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a35f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a35f6:	e7f8      	b.n	80a35ea <memcpy+0x6>
 80a35f8:	bd10      	pop	{r4, pc}

080a35fa <memset>:
 80a35fa:	4603      	mov	r3, r0
 80a35fc:	4402      	add	r2, r0
 80a35fe:	4293      	cmp	r3, r2
 80a3600:	d002      	beq.n	80a3608 <memset+0xe>
 80a3602:	f803 1b01 	strb.w	r1, [r3], #1
 80a3606:	e7fa      	b.n	80a35fe <memset+0x4>
 80a3608:	4770      	bx	lr
	...

080a360c <srand>:
 80a360c:	b538      	push	{r3, r4, r5, lr}
 80a360e:	4b12      	ldr	r3, [pc, #72]	; (80a3658 <srand+0x4c>)
 80a3610:	4605      	mov	r5, r0
 80a3612:	681c      	ldr	r4, [r3, #0]
 80a3614:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3616:	b9d3      	cbnz	r3, 80a364e <srand+0x42>
 80a3618:	2018      	movs	r0, #24
 80a361a:	f7fd fc29 	bl	80a0e70 <malloc>
 80a361e:	f243 330e 	movw	r3, #13070	; 0x330e
 80a3622:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3624:	8003      	strh	r3, [r0, #0]
 80a3626:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a362a:	8043      	strh	r3, [r0, #2]
 80a362c:	f241 2334 	movw	r3, #4660	; 0x1234
 80a3630:	8083      	strh	r3, [r0, #4]
 80a3632:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3636:	80c3      	strh	r3, [r0, #6]
 80a3638:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a363c:	8103      	strh	r3, [r0, #8]
 80a363e:	2305      	movs	r3, #5
 80a3640:	8143      	strh	r3, [r0, #10]
 80a3642:	230b      	movs	r3, #11
 80a3644:	8183      	strh	r3, [r0, #12]
 80a3646:	2201      	movs	r2, #1
 80a3648:	2300      	movs	r3, #0
 80a364a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a364e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a3650:	2200      	movs	r2, #0
 80a3652:	611d      	str	r5, [r3, #16]
 80a3654:	615a      	str	r2, [r3, #20]
 80a3656:	bd38      	pop	{r3, r4, r5, pc}
 80a3658:	2000007c 	.word	0x2000007c

080a365c <strcmp>:
 80a365c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a3660:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a3664:	2a01      	cmp	r2, #1
 80a3666:	bf28      	it	cs
 80a3668:	429a      	cmpcs	r2, r3
 80a366a:	d0f7      	beq.n	80a365c <strcmp>
 80a366c:	1ad0      	subs	r0, r2, r3
 80a366e:	4770      	bx	lr

080a3670 <strcpy>:
 80a3670:	4603      	mov	r3, r0
 80a3672:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a3676:	f803 2b01 	strb.w	r2, [r3], #1
 80a367a:	2a00      	cmp	r2, #0
 80a367c:	d1f9      	bne.n	80a3672 <strcpy+0x2>
 80a367e:	4770      	bx	lr

080a3680 <strdup>:
 80a3680:	4b02      	ldr	r3, [pc, #8]	; (80a368c <strdup+0xc>)
 80a3682:	4601      	mov	r1, r0
 80a3684:	6818      	ldr	r0, [r3, #0]
 80a3686:	f000 b803 	b.w	80a3690 <_strdup_r>
 80a368a:	bf00      	nop
 80a368c:	2000007c 	.word	0x2000007c

080a3690 <_strdup_r>:
 80a3690:	b570      	push	{r4, r5, r6, lr}
 80a3692:	4606      	mov	r6, r0
 80a3694:	4608      	mov	r0, r1
 80a3696:	460c      	mov	r4, r1
 80a3698:	f000 f80d 	bl	80a36b6 <strlen>
 80a369c:	1c45      	adds	r5, r0, #1
 80a369e:	4629      	mov	r1, r5
 80a36a0:	4630      	mov	r0, r6
 80a36a2:	f7fd fc05 	bl	80a0eb0 <_malloc_r>
 80a36a6:	4606      	mov	r6, r0
 80a36a8:	b118      	cbz	r0, 80a36b2 <_strdup_r+0x22>
 80a36aa:	462a      	mov	r2, r5
 80a36ac:	4621      	mov	r1, r4
 80a36ae:	f7ff ff99 	bl	80a35e4 <memcpy>
 80a36b2:	4630      	mov	r0, r6
 80a36b4:	bd70      	pop	{r4, r5, r6, pc}

080a36b6 <strlen>:
 80a36b6:	4603      	mov	r3, r0
 80a36b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a36bc:	2a00      	cmp	r2, #0
 80a36be:	d1fb      	bne.n	80a36b8 <strlen+0x2>
 80a36c0:	1a18      	subs	r0, r3, r0
 80a36c2:	3801      	subs	r0, #1
 80a36c4:	4770      	bx	lr

080a36c6 <link_code_end>:
	...

080a36c8 <dynalib_user>:
 80a36c8:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a36d8:	0000 0000 7453 7261 6974 676e 4300 6c61     ....Starting.Cal
 80a36e8:	6269 6172 6974 6e6f 4300 6c61 6269 6172     ibration.Calibra
 80a36f8:	6974 676e 2000 5350 0049 4f44 454e 0021     ting. PSI.DONE!.
 80a3708:	6e61 6c61 676f 6156 006c 7250 7365 7573     analogVal.Pressu
 80a3718:	6572 6f00 6576 7272 6469 4f65 006e 766f     re.overrideOn.ov
 80a3728:	7265 6972 6564 664f 0066 6f44 656e 7720     errideOff.Done w
 80a3738:	7469 2068 6163 696c 7262 7461 6f69 006e     ith calibration.
 80a3748:	7550 706d 5320 6174 7574 3a73 0020 7574     Pump Status: .tu
 80a3758:	6e72 7550 706d 6e4f 4f00 204e 7400 7275     rnPumpOn.ON .tur
 80a3768:	506e 6d75 4f70 6666 4f00 4646 6d00 6165     nPumpOff.OFF.mea
 80a3778:	006e 754f 2074 666f 5220 6e61 6567 0000     n.Out of Range..

080a3788 <_ZTV17LiquidCrystal_I2C>:
	...
 80a3790:	0859 080a 085b 080a 0927 080a 12bd 080a     Y...[...'.......
 80a37a0:	0000 0000 0040 0000 0014 0000 0054 0000     ....@.......T...
 80a37b0:	616e 006e 766f 0066 002e 6e69 0066 6162     nan.ovf...inf.ba
 80a37c0:	6475 5300 7265 6169 006c 5355 5342 7265     ud.Serial.USBSer
 80a37d0:	6169 316c 7400 7079 0065 6170 6172 006d     ial1.type.param.
 80a37e0:	6d63 0064 6469 6800 646e 7300 7274 006d     cmd.id.hnd.strm.
 80a37f0:	6966 746c 6c00 6c76 6100 6464 6148 646e     filt.lvl.addHand
 80a3800:	656c 0072 6572 6f6d 6576 6148 646e 656c     ler.removeHandle
 80a3810:	0072 6e65 6d75 6148 646e 656c 7372 4a00     r.enumHandlers.J
 80a3820:	4f53 534e 7274 6165 4c6d 676f 6148 646e     SONStreamLogHand
 80a3830:	656c 0072 7061 0070 3025 3031 2075 5d00     ler.app.%010u .]
 80a3840:	0020 6425 2c00 0020 2928 203a 2000 005b      .%d., .(): . [.
 80a3850:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80a3860:	736c 3d20 0020 0a0d 6c00 006e 6e66 6300     ls = ....ln.fn.c
 80a3870:	646f 0065 6564 6174 6c69 6e00 6e6f 0065     ode.detail.none.
 80a3880:	7274 6361 0065 6e69 6f66 7700 7261 006e     trace.info.warn.
 80a3890:	7265 6f72 0072 6170 696e 0063 6c61 006c     error.panic.all.
 80a38a0:	005a 2b25 3330 3a64 3025 7532 2500 2d59     Z.%+03d:%02u.%Y-
 80a38b0:	6d25 252d 5464 4825 253a 3a4d 5325 7a25     %m-%dT%H:%M:%S%z
 80a38c0:	6100 6373 6974 656d 0000 0000               .asctime....

080a38cc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a38d4:	16a9 080a 16af 080a 16f3 080a 16bd 080a     ................
 80a38e4:	16ab 080a                                   ....

080a38e8 <_ZTV9IPAddress>:
	...
 80a38f0:	1c99 080a 1c89 080a 1c8b 080a               ............

080a38fc <_ZTV9USBSerial>:
	...
 80a3904:	1d55 080a 1da5 080a 1db3 080a 12bd 080a     U...............
 80a3914:	1d91 080a 1d57 080a 1d6d 080a 1d9f 080a     ....W...m.......
 80a3924:	1d83 080a 1d51 080a                         ....Q...

080a392c <_ZTV11USARTSerial>:
	...
 80a3934:	1ef5 080a 1f45 080a 1f53 080a 12bd 080a     ....E...S.......
 80a3944:	1f09 080a 1f2b 080a 1f17 080a 1f3f 080a     ....+.......?...
 80a3954:	1ef7 080a 1efb 080a                         ........

080a395c <_ZTV7TwoWire>:
	...
 80a3964:	2021 080a 206b 080a 2043 080a 2023 080a     ! ..k ..C ..# ..
 80a3974:	204b 080a 2053 080a 205b 080a 2063 080a     K ..S ..[ ..c ..

080a3984 <_ZTVN5spark9WiFiClassE>:
	...
 80a398c:	216d 080a 2163 080a 2159 080a 20d7 080a     m!..c!..Y!... ..
 80a399c:	14d3 080a 214d 080a 2141 080a 2139 080a     ....M!..A!..9!..
 80a39ac:	212f 080a 2125 080a 20e1 080a               /!..%!... ..

080a39b8 <_ZTVN5spark12NetworkClassE>:
	...
 80a39c0:	218d 080a 2197 080a 21a1 080a 21ab 080a     .!...!...!...!..
 80a39d0:	21b5 080a 21c1 080a 21cd 080a 21d9 080a     .!...!...!...!..
 80a39e0:	21e1 080a 21eb 080a 21f5 080a               .!...!...!..

080a39ec <_ZSt7nothrow>:
 80a39ec:	0000 0000 7173 7472 0000 0000               ....sqrt....

080a39f8 <__sf_fake_stdin>:
	...

080a3a18 <__sf_fake_stdout>:
	...

080a3a38 <__sf_fake_stderr>:
	...
 80a3a58:	0043                                        C.

080a3a5a <link_const_variable_data_end>:
	...

080a3a5c <link_constructors_location>:
 80a3a5c:	080a07ad 	.word	0x080a07ad
 80a3a60:	080a0a91 	.word	0x080a0a91
 80a3a64:	080a0f15 	.word	0x080a0f15
 80a3a68:	080a14ed 	.word	0x080a14ed
 80a3a6c:	080a14fd 	.word	0x080a14fd
 80a3a70:	080a1555 	.word	0x080a1555
 80a3a74:	080a2179 	.word	0x080a2179
 80a3a78:	080a2245 	.word	0x080a2245
 80a3a7c:	080a2335 	.word	0x080a2335
 80a3a80:	080a242d 	.word	0x080a242d
 80a3a84:	080a24b1 	.word	0x080a24b1
 80a3a88:	080a2575 	.word	0x080a2575
 80a3a8c:	080a2639 	.word	0x080a2639
